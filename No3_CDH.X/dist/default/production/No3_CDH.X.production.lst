

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu Nov 23 19:57:20 2017

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	dabs	1,0x7E,2
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000D                     	;# 
    75  000E                     	;# 
    76  000E                     	;# 
    77  000F                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0014                     	;# 
    83  0015                     	;# 
    84  0015                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001B                     	;# 
    92  001C                     	;# 
    93  001D                     	;# 
    94  001E                     	;# 
    95  001F                     	;# 
    96  0081                     	;# 
    97  0085                     	;# 
    98  0086                     	;# 
    99  0087                     	;# 
   100  0088                     	;# 
   101  0089                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  0091                     	;# 
   106  0092                     	;# 
   107  0093                     	;# 
   108  0094                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  010F                     	;# 
   119  018C                     	;# 
   120  018D                     	;# 
   121  0000                     	;# 
   122  0001                     	;# 
   123  0002                     	;# 
   124  0003                     	;# 
   125  0004                     	;# 
   126  0005                     	;# 
   127  0006                     	;# 
   128  0007                     	;# 
   129  0008                     	;# 
   130  0009                     	;# 
   131  000A                     	;# 
   132  000B                     	;# 
   133  000C                     	;# 
   134  000D                     	;# 
   135  000E                     	;# 
   136  000E                     	;# 
   137  000F                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0015                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001B                     	;# 
   151  001B                     	;# 
   152  001C                     	;# 
   153  001D                     	;# 
   154  001E                     	;# 
   155  001F                     	;# 
   156  0081                     	;# 
   157  0085                     	;# 
   158  0086                     	;# 
   159  0087                     	;# 
   160  0088                     	;# 
   161  0089                     	;# 
   162  008C                     	;# 
   163  008D                     	;# 
   164  008E                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0094                     	;# 
   169  0098                     	;# 
   170  0099                     	;# 
   171  009C                     	;# 
   172  009D                     	;# 
   173  009E                     	;# 
   174  009F                     	;# 
   175  010C                     	;# 
   176  010D                     	;# 
   177  010E                     	;# 
   178  010F                     	;# 
   179  018C                     	;# 
   180  018D                     	;# 
   181  0000                     	;# 
   182  0001                     	;# 
   183  0002                     	;# 
   184  0003                     	;# 
   185  0004                     	;# 
   186  0005                     	;# 
   187  0006                     	;# 
   188  0007                     	;# 
   189  0008                     	;# 
   190  0009                     	;# 
   191  000A                     	;# 
   192  000B                     	;# 
   193  000C                     	;# 
   194  000D                     	;# 
   195  000E                     	;# 
   196  000E                     	;# 
   197  000F                     	;# 
   198  0010                     	;# 
   199  0011                     	;# 
   200  0012                     	;# 
   201  0013                     	;# 
   202  0014                     	;# 
   203  0015                     	;# 
   204  0015                     	;# 
   205  0016                     	;# 
   206  0017                     	;# 
   207  0018                     	;# 
   208  0019                     	;# 
   209  001A                     	;# 
   210  001B                     	;# 
   211  001B                     	;# 
   212  001C                     	;# 
   213  001D                     	;# 
   214  001E                     	;# 
   215  001F                     	;# 
   216  0081                     	;# 
   217  0085                     	;# 
   218  0086                     	;# 
   219  0087                     	;# 
   220  0088                     	;# 
   221  0089                     	;# 
   222  008C                     	;# 
   223  008D                     	;# 
   224  008E                     	;# 
   225  0091                     	;# 
   226  0092                     	;# 
   227  0093                     	;# 
   228  0094                     	;# 
   229  0098                     	;# 
   230  0099                     	;# 
   231  009C                     	;# 
   232  009D                     	;# 
   233  009E                     	;# 
   234  009F                     	;# 
   235  010C                     	;# 
   236  010D                     	;# 
   237  010E                     	;# 
   238  010F                     	;# 
   239  018C                     	;# 
   240  018D                     	;# 
   241  0000                     	;# 
   242  0001                     	;# 
   243  0002                     	;# 
   244  0003                     	;# 
   245  0004                     	;# 
   246  0005                     	;# 
   247  0006                     	;# 
   248  0007                     	;# 
   249  0008                     	;# 
   250  0009                     	;# 
   251  000A                     	;# 
   252  000B                     	;# 
   253  000C                     	;# 
   254  000D                     	;# 
   255  000E                     	;# 
   256  000E                     	;# 
   257  000F                     	;# 
   258  0010                     	;# 
   259  0011                     	;# 
   260  0012                     	;# 
   261  0013                     	;# 
   262  0014                     	;# 
   263  0015                     	;# 
   264  0015                     	;# 
   265  0016                     	;# 
   266  0017                     	;# 
   267  0018                     	;# 
   268  0019                     	;# 
   269  001A                     	;# 
   270  001B                     	;# 
   271  001B                     	;# 
   272  001C                     	;# 
   273  001D                     	;# 
   274  001E                     	;# 
   275  001F                     	;# 
   276  0081                     	;# 
   277  0085                     	;# 
   278  0086                     	;# 
   279  0087                     	;# 
   280  0088                     	;# 
   281  0089                     	;# 
   282  008C                     	;# 
   283  008D                     	;# 
   284  008E                     	;# 
   285  0091                     	;# 
   286  0092                     	;# 
   287  0093                     	;# 
   288  0094                     	;# 
   289  0098                     	;# 
   290  0099                     	;# 
   291  009C                     	;# 
   292  009D                     	;# 
   293  009E                     	;# 
   294  009F                     	;# 
   295  010C                     	;# 
   296  010D                     	;# 
   297  010E                     	;# 
   298  010F                     	;# 
   299  018C                     	;# 
   300  018D                     	;# 
   301  0000                     	;# 
   302  0001                     	;# 
   303  0002                     	;# 
   304  0003                     	;# 
   305  0004                     	;# 
   306  0005                     	;# 
   307  0006                     	;# 
   308  0007                     	;# 
   309  0008                     	;# 
   310  0009                     	;# 
   311  000A                     	;# 
   312  000B                     	;# 
   313  000C                     	;# 
   314  000D                     	;# 
   315  000E                     	;# 
   316  000E                     	;# 
   317  000F                     	;# 
   318  0010                     	;# 
   319  0011                     	;# 
   320  0012                     	;# 
   321  0013                     	;# 
   322  0014                     	;# 
   323  0015                     	;# 
   324  0015                     	;# 
   325  0016                     	;# 
   326  0017                     	;# 
   327  0018                     	;# 
   328  0019                     	;# 
   329  001A                     	;# 
   330  001B                     	;# 
   331  001B                     	;# 
   332  001C                     	;# 
   333  001D                     	;# 
   334  001E                     	;# 
   335  001F                     	;# 
   336  0081                     	;# 
   337  0085                     	;# 
   338  0086                     	;# 
   339  0087                     	;# 
   340  0088                     	;# 
   341  0089                     	;# 
   342  008C                     	;# 
   343  008D                     	;# 
   344  008E                     	;# 
   345  0091                     	;# 
   346  0092                     	;# 
   347  0093                     	;# 
   348  0094                     	;# 
   349  0098                     	;# 
   350  0099                     	;# 
   351  009C                     	;# 
   352  009D                     	;# 
   353  009E                     	;# 
   354  009F                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  018C                     	;# 
   360  018D                     	;# 
   361  0000                     	;# 
   362  0001                     	;# 
   363  0002                     	;# 
   364  0003                     	;# 
   365  0004                     	;# 
   366  0005                     	;# 
   367  0006                     	;# 
   368  0007                     	;# 
   369  0008                     	;# 
   370  0009                     	;# 
   371  000A                     	;# 
   372  000B                     	;# 
   373  000C                     	;# 
   374  000D                     	;# 
   375  000E                     	;# 
   376  000E                     	;# 
   377  000F                     	;# 
   378  0010                     	;# 
   379  0011                     	;# 
   380  0012                     	;# 
   381  0013                     	;# 
   382  0014                     	;# 
   383  0015                     	;# 
   384  0015                     	;# 
   385  0016                     	;# 
   386  0017                     	;# 
   387  0018                     	;# 
   388  0019                     	;# 
   389  001A                     	;# 
   390  001B                     	;# 
   391  001B                     	;# 
   392  001C                     	;# 
   393  001D                     	;# 
   394  001E                     	;# 
   395  001F                     	;# 
   396  0081                     	;# 
   397  0085                     	;# 
   398  0086                     	;# 
   399  0087                     	;# 
   400  0088                     	;# 
   401  0089                     	;# 
   402  008C                     	;# 
   403  008D                     	;# 
   404  008E                     	;# 
   405  0091                     	;# 
   406  0092                     	;# 
   407  0093                     	;# 
   408  0094                     	;# 
   409  0098                     	;# 
   410  0099                     	;# 
   411  009C                     	;# 
   412  009D                     	;# 
   413  009E                     	;# 
   414  009F                     	;# 
   415  010C                     	;# 
   416  010D                     	;# 
   417  010E                     	;# 
   418  010F                     	;# 
   419  018C                     	;# 
   420  018D                     	;# 
   421  0000                     	;# 
   422  0001                     	;# 
   423  0002                     	;# 
   424  0003                     	;# 
   425  0004                     	;# 
   426  0005                     	;# 
   427  0006                     	;# 
   428  0007                     	;# 
   429  0008                     	;# 
   430  0009                     	;# 
   431  000A                     	;# 
   432  000B                     	;# 
   433  000C                     	;# 
   434  000D                     	;# 
   435  000E                     	;# 
   436  000E                     	;# 
   437  000F                     	;# 
   438  0010                     	;# 
   439  0011                     	;# 
   440  0012                     	;# 
   441  0013                     	;# 
   442  0014                     	;# 
   443  0015                     	;# 
   444  0015                     	;# 
   445  0016                     	;# 
   446  0017                     	;# 
   447  0018                     	;# 
   448  0019                     	;# 
   449  001A                     	;# 
   450  001B                     	;# 
   451  001B                     	;# 
   452  001C                     	;# 
   453  001D                     	;# 
   454  001E                     	;# 
   455  001F                     	;# 
   456  0081                     	;# 
   457  0085                     	;# 
   458  0086                     	;# 
   459  0087                     	;# 
   460  0088                     	;# 
   461  0089                     	;# 
   462  008C                     	;# 
   463  008D                     	;# 
   464  008E                     	;# 
   465  0091                     	;# 
   466  0092                     	;# 
   467  0093                     	;# 
   468  0094                     	;# 
   469  0098                     	;# 
   470  0099                     	;# 
   471  009C                     	;# 
   472  009D                     	;# 
   473  009E                     	;# 
   474  009F                     	;# 
   475  010C                     	;# 
   476  010D                     	;# 
   477  010E                     	;# 
   478  010F                     	;# 
   479  018C                     	;# 
   480  018D                     	;# 
   481  0000                     	;# 
   482  0001                     	;# 
   483  0002                     	;# 
   484  0003                     	;# 
   485  0004                     	;# 
   486  0005                     	;# 
   487  0006                     	;# 
   488  0007                     	;# 
   489  0008                     	;# 
   490  0009                     	;# 
   491  000A                     	;# 
   492  000B                     	;# 
   493  000C                     	;# 
   494  000D                     	;# 
   495  000E                     	;# 
   496  000E                     	;# 
   497  000F                     	;# 
   498  0010                     	;# 
   499  0011                     	;# 
   500  0012                     	;# 
   501  0013                     	;# 
   502  0014                     	;# 
   503  0015                     	;# 
   504  0015                     	;# 
   505  0016                     	;# 
   506  0017                     	;# 
   507  0018                     	;# 
   508  0019                     	;# 
   509  001A                     	;# 
   510  001B                     	;# 
   511  001B                     	;# 
   512  001C                     	;# 
   513  001D                     	;# 
   514  001E                     	;# 
   515  001F                     	;# 
   516  0081                     	;# 
   517  0085                     	;# 
   518  0086                     	;# 
   519  0087                     	;# 
   520  0088                     	;# 
   521  0089                     	;# 
   522  008C                     	;# 
   523  008D                     	;# 
   524  008E                     	;# 
   525  0091                     	;# 
   526  0092                     	;# 
   527  0093                     	;# 
   528  0094                     	;# 
   529  0098                     	;# 
   530  0099                     	;# 
   531  009C                     	;# 
   532  009D                     	;# 
   533  009E                     	;# 
   534  009F                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  010F                     	;# 
   539  018C                     	;# 
   540  018D                     	;# 
   541                           
   542                           	psect	idataBANK3
   543  0971                     __pidataBANK3:	
   544                           
   545                           ;initializer for main@F1179
   546  0971  3461               	retlw	97
   547  0972  3462               	retlw	98
   548  0973  3463               	retlw	99
   549  0974  3464               	retlw	100
   550  0975  3465               	retlw	101
   551  0976  3466               	retlw	102
   552  0977  3467               	retlw	103
   553  0978  3468               	retlw	104
   554  0979  3469               	retlw	105
   555  097A  346A               	retlw	106
   556  097B  346B               	retlw	107
   557  097C  346C               	retlw	108
   558  097D  346D               	retlw	109
   559  097E  3400               	retlw	0
   560  097F  3400               	retlw	0
   561                           
   562                           	psect	strings
   563  0800                     __pstrings:	
   564  0800                     stringtab:	
   565  0800                     __stringtab:	
   566                           
   567                           ;	String table - string pointers are 1 byte each
   568  0800  1BFF               	btfsc	btemp+1,7
   569  0801  280A               	ljmp	stringcode
   570  0802  1383               	bcf	3,7
   571  0803  187F               	btfsc	btemp+1,0
   572  0804  1783               	bsf	3,7
   573  0805  0800               	movf	0,w
   574  0806  0A84               	incf	4,f
   575  0807  1903               	skipnz
   576  0808  0AFF               	incf	btemp+1,f
   577  0809  0008               	return
   578  080A                     stringcode:	
   579  080A                     stringdir:	
   580  080A  3008               	movlw	high stringdir
   581  080B  008A               	movwf	10
   582  080C  0804               	movf	4,w
   583  080D  0A84               	incf	4,f
   584  080E  0782               	addwf	2,f
   585  080F                     __stringbase:	
   586  080F  3400               	retlw	0
   587  0810                     __end_of__stringtab:	
   588  0810                     uint16_to_byte_array@bit_mask:	
   589  0810  34FF               	retlw	255
   590  0811  3400               	retlw	0
   591  0812                     __end_ofuint16_to_byte_array@bit_mask:	
   592  0812                     bit_shift@bit_mask_for_l:	
   593  0812  3403               	retlw	3
   594  0813                     __end_ofbit_shift@bit_mask_for_l:	
   595  001F                     _ADCON0	set	31
   596  001F                     _ADCON0bits	set	31
   597  001E                     _ADRESH	set	30
   598  000B                     _INTCONbits	set	11
   599  000C                     _PIR1bits	set	12
   600  0005                     _PORTA	set	5
   601  0005                     _PORTAbits	set	5
   602  0006                     _PORTB	set	6
   603  0007                     _PORTC	set	7
   604  0008                     _PORTD	set	8
   605  0009                     _PORTE	set	9
   606  001A                     _RCREG	set	26
   607  0018                     _RCSTA	set	24
   608  0013                     _SSPBUF	set	19
   609  0014                     _SSPCONbits	set	20
   610  0019                     _TXREG	set	25
   611  0037                     _RB7	set	55
   612  0065                     _RCIF	set	101
   613  0064                     _TXIF	set	100
   614  009F                     _ADCON1	set	159
   615  009F                     _ADCON1bits	set	159
   616  009E                     _ADRESL	set	158
   617  008C                     _PIE1bits	set	140
   618  0099                     _SPBRG	set	153
   619  0094                     _SSPSTATbits	set	148
   620  0085                     _TRISA	set	133
   621  0085                     _TRISAbits	set	133
   622  0086                     _TRISB	set	134
   623  0087                     _TRISC	set	135
   624  0088                     _TRISD	set	136
   625  0089                     _TRISE	set	137
   626  0098                     _TXSTA	set	152
   627  042D                     _TRISA5	set	1069
   628  043B                     _TRISC3	set	1083
   629  043C                     _TRISC4	set	1084
   630  043D                     _TRISC5	set	1085
   631  043E                     _TRISC6	set	1086
   632  043F                     _TRISC7	set	1087
   633  0813                     STR_1:	
   634  0813  3453               	retlw	83	;'S'
   635  0814  346C               	retlw	108	;'l'
   636  0815  3461               	retlw	97	;'a'
   637  0816  3476               	retlw	118	;'v'
   638  0817  3465               	retlw	101	;'e'
   639  0818  3420               	retlw	32	;' '
   640  0819  3450               	retlw	80	;'P'
   641  081A  3472               	retlw	114	;'r'
   642  081B  346F               	retlw	111	;'o'
   643  081C  3467               	retlw	103	;'g'
   644  081D  3472               	retlw	114	;'r'
   645  081E  3461               	retlw	97	;'a'
   646  081F  346D               	retlw	109	;'m'
   647  0820  3420               	retlw	32	;' '
   648  0821  3453               	retlw	83	;'S'
   649  0822  3474               	retlw	116	;'t'
   650  0823  3461               	retlw	97	;'a'
   651  0824  3472               	retlw	114	;'r'
   652  0825  3474               	retlw	116	;'t'
   653  0826  3421               	retlw	33	;'!'
   654  0827  340D               	retlw	13
   655  0828  340A               	retlw	10
   656  0829  3400               	retlw	0
   657                           
   658                           ; #config settings
   659  0000                     
   660                           	psect	cinit
   661  0015                     start_initialization:	
   662  0015                     __initialization:	
   663                           
   664                           ; Clear objects allocated to COMMON
   665  0015  01FC               	clrf	__pbssCOMMON& (0+127)
   666                           
   667                           ; Clear objects allocated to BANK0
   668  0016  1383               	bcf	3,7	;select IRP bank0
   669  0017  3042               	movlw	low __pbssBANK0
   670  0018  0084               	movwf	4
   671  0019  3063               	movlw	low (__pbssBANK0+33)
   672  001A  120A  158A  2125  120A  118A  	fcall	clear_ram0
   673                           
   674                           ; Clear objects allocated to BANK1
   675  001F  30CF               	movlw	low __pbssBANK1
   676  0020  0084               	movwf	4
   677  0021  30F0               	movlw	low (__pbssBANK1+33)
   678  0022  120A  158A  2125  120A  118A  	fcall	clear_ram0
   679                           
   680                           ; Clear objects allocated to BANK3
   681  0027  1683               	bsf	3,5	;RP0=1, select bank3
   682  0028  1703               	bsf	3,6	;RP1=1, select bank3
   683  0029  01A9               	clrf	__pbssBANK3& (0+127)
   684                           
   685                           ; Initialize objects allocated to BANK3
   686  002A  1783               	bsf	3,7	;select IRP bank2
   687  002B  309F               	movlw	low (__pdataBANK3+15)
   688  002C  00FD               	movwf	btemp+-1
   689  002D  3009               	movlw	high __pidataBANK3
   690  002E  00FE               	movwf	btemp
   691  002F  3071               	movlw	low __pidataBANK3
   692  0030  00FF               	movwf	btemp+1
   693  0031  3090               	movlw	low __pdataBANK3
   694  0032  0084               	movwf	4
   695  0033  120A  158A  2195   	fcall	init_ram0
   696  0036                     end_of_initialization:	
   697                           ;End of C runtime variable initialization code
   698                           
   699  0036                     __end_of__initialization:	
   700  0036  0183               	clrf	3
   701  0037  120A  118A  283A   	ljmp	_main	;jump to C main() function
   702                           
   703                           	psect	bssCOMMON
   704  007C                     __pbssCOMMON:	
   705  007C                     _tx_packet_status:	
   706  007C                     	ds	1
   707                           
   708                           	psect	bssBANK0
   709  0042                     __pbssBANK0:	
   710  0042                     _rx_packet:	
   711  0042                     	ds	33
   712                           
   713                           	psect	bssBANK1
   714  00CF                     __pbssBANK1:	
   715  00CF                     _tx_packet:	
   716  00CF                     	ds	33
   717                           
   718                           	psect	bssBANK3
   719  01A9                     __pbssBANK3:	
   720  01A9                     _rx_packet_status:	
   721  01A9                     	ds	1
   722                           
   723                           	psect	dataBANK3
   724  0190                     __pdataBANK3:	
   725  0190                     main@F1179:	
   726  0190                     	ds	15
   727                           
   728                           	psect	clrtext
   729  0925                     clear_ram0:	
   730                           ;	Called with FSR containing the base address, and
   731                           ;	W with the last address+1
   732                           
   733  0925  0064               	clrwdt	;clear the watchdog before getting into this loop
   734  0926                     clrloop0:	
   735  0926  0180               	clrf	0	;clear RAM location pointed to by FSR
   736  0927  0A84               	incf	4,f	;increment pointer
   737  0928  0604               	xorwf	4,w	;XOR with final address
   738  0929  1903               	btfsc	3,2	;have we reached the end yet?
   739  092A  3400               	retlw	0	;all done for this memory range, return
   740  092B  0604               	xorwf	4,w	;XOR again to restore value
   741  092C  2926               	goto	clrloop0	;do the next byte
   742                           
   743                           	psect	inittext
   744  0991                     init_fetch0:	
   745                           ;	Called with low address in FSR and high address in W
   746                           
   747  0991  087E               	movf	126,w
   748  0992  008A               	movwf	10
   749  0993  087F               	movf	127,w
   750  0994  0082               	movwf	2
   751  0995                     init_ram0:	
   752                           ;Called with:
   753                           ;	high address of idata address in btemp 
   754                           ;	low address of idata address in btemp+1 
   755                           ;	low address of data in FSR
   756                           ;	high address + 1 of data in btemp-1
   757                           
   758  0995  2191  120A  158A   	fcall	init_fetch0
   759  0998  0080               	movwf	0
   760  0999  0A84               	incf	4,f
   761  099A  0804               	movf	4,w
   762  099B  067D               	xorwf	125,w
   763  099C  1903               	btfsc	3,2
   764  099D  3400               	retlw	0
   765  099E  0AFF               	incf	127,f
   766  099F  1903               	btfsc	3,2
   767  09A0  0AFE               	incf	126,f
   768  09A1  2995               	goto	init_ram0
   769                           
   770                           	psect	cstackBANK3
   771  019F                     __pcstackBANK3:	
   772  019F                     get_pt@light:	
   773                           
   774                           ; 3 bytes @ 0x0
   775  019F                     	ds	3
   776  01A2                     _get_pt$1195:	
   777                           
   778                           ; 3 bytes @ 0x3
   779  01A2                     	ds	3
   780  01A5                     ??_main:	
   781                           
   782                           ; 0 bytes @ 0x6
   783  01A5                     	ds	4
   784                           
   785                           	psect	cstackBANK2
   786  0110                     __pcstackBANK2:	
   787  0110                     main@r_data:	
   788                           
   789                           ; 30 bytes @ 0x0
   790  0110                     	ds	30
   791  012E                     main@temp:	
   792                           
   793                           ; 3 bytes @ 0x1E
   794  012E                     	ds	3
   795  0131                     main@light1:	
   796                           
   797                           ; 3 bytes @ 0x21
   798  0131                     	ds	3
   799  0134                     main@light2:	
   800                           
   801                           ; 3 bytes @ 0x24
   802  0134                     	ds	3
   803  0137                     main@light3:	
   804                           
   805                           ; 3 bytes @ 0x27
   806  0137                     	ds	3
   807  013A                     main@light4:	
   808                           
   809                           ; 3 bytes @ 0x2A
   810  013A                     	ds	3
   811  013D                     main@light5:	
   812                           
   813                           ; 3 bytes @ 0x2D
   814  013D                     	ds	3
   815  0140                     main@light6:	
   816                           
   817                           ; 3 bytes @ 0x30
   818  0140                     	ds	3
   819  0143                     main@r_data_type:	
   820                           
   821                           ; 1 bytes @ 0x33
   822  0143                     	ds	1
   823  0144                     main@r_data_len:	
   824                           
   825                           ; 1 bytes @ 0x34
   826  0144                     	ds	1
   827  0145                     main@send_data:	
   828                           
   829                           ; 15 bytes @ 0x35
   830  0145                     	ds	15
   831  0154                     main@counter:	
   832                           
   833                           ; 1 bytes @ 0x44
   834  0154                     	ds	1
   835  0155                     main@temp_buf_c:	
   836                           
   837                           ; 5 bytes @ 0x45
   838  0155                     	ds	5
   839  015A                     main@i:	
   840                           
   841                           ; 1 bytes @ 0x4A
   842  015A                     	ds	1
   843  015B                     main@volt:	
   844                           
   845                           ; 3 bytes @ 0x4B
   846  015B                     	ds	3
   847  015E                     main@adcon_shift:	
   848                           
   849                           ; 1 bytes @ 0x4E
   850  015E                     	ds	1
   851  015F                     main@temp_c:	
   852                           
   853                           ; 1 bytes @ 0x4F
   854  015F                     	ds	1
   855                           
   856                           	psect	cstackBANK1
   857  00A0                     __pcstackBANK1:	
   858  00A0                     ??_pic_port_init:	
   859  00A0                     ??_uart_init:	
   860                           ; 0 bytes @ 0x0
   861                           
   862  00A0                     ??_spi_slave_start:	
   863                           ; 0 bytes @ 0x0
   864                           
   865  00A0                     ??_put_char:	
   866                           ; 0 bytes @ 0x0
   867                           
   868  00A0                     ?_send_data_slave:	
   869                           ; 0 bytes @ 0x0
   870                           
   871  00A0                     ?_uint8_data_set:	
   872                           ; 0 bytes @ 0x0
   873                           
   874  00A0                     ??_rx_packet_clear:	
   875                           ; 0 bytes @ 0x0
   876                           
   877  00A0                     ?_uint16_to_byte_array:	
   878                           ; 0 bytes @ 0x0
   879                           
   880  00A0                     ?_double_to_byte_array:	
   881                           ; 0 bytes @ 0x0
   882                           
   883  00A0                     ?_process_1_null:	
   884                           ; 0 bytes @ 0x0
   885                           
   886  00A0                     ?_process_1:	
   887                           ; 0 bytes @ 0x0
   888                           
   889  00A0                     ?_bit_shift:	
   890                           ; 0 bytes @ 0x0
   891                           
   892  00A0                     ?___bmul:	
   893                           ; 0 bytes @ 0x0
   894                           
   895  00A0                     ?___wmul:	
   896                           ; 1 bytes @ 0x0
   897                           
   898  00A0                     ?___awdiv:	
   899                           ; 2 bytes @ 0x0
   900                           
   901  00A0                     ?___awmod:	
   902                           ; 2 bytes @ 0x0
   903                           
   904  00A0                     ?___ftpack:	
   905                           ; 2 bytes @ 0x0
   906                           
   907  00A0                     ?___fttol:	
   908                           ; 3 bytes @ 0x0
   909                           
   910  00A0                     send_data_slave@data_end_command:	
   911                           ; 4 bytes @ 0x0
   912                           
   913  00A0                     uint8_data_set@data_len:	
   914                           ; 1 bytes @ 0x0
   915                           
   916  00A0                     uint16_to_byte_array@p_data_array:	
   917                           ; 1 bytes @ 0x0
   918                           
   919  00A0                     double_to_byte_array@p_data_array:	
   920                           ; 1 bytes @ 0x0
   921                           
   922  00A0                     spi_slave_start@spi_isr:	
   923                           ; 1 bytes @ 0x0
   924                           
   925  00A0                     put_char@byte_data:	
   926                           ; 1 bytes @ 0x0
   927                           
   928  00A0                     bit_shift@p_adres:	
   929                           ; 1 bytes @ 0x0
   930                           
   931  00A0                     process_1@p_flag:	
   932                           ; 1 bytes @ 0x0
   933                           
   934  00A0                     process_1_null@p_flag:	
   935                           ; 1 bytes @ 0x0
   936                           
   937  00A0                     ___bmul@multiplicand:	
   938                           ; 1 bytes @ 0x0
   939                           
   940  00A0                     ___wmul@multiplier:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  00A0                     ___awdiv@divisor:	
   944                           ; 2 bytes @ 0x0
   945                           
   946  00A0                     ___awmod@divisor:	
   947                           ; 2 bytes @ 0x0
   948                           
   949  00A0                     ___ftpack@arg:	
   950                           ; 2 bytes @ 0x0
   951                           
   952  00A0                     ___fttol@f1:	
   953                           ; 3 bytes @ 0x0
   954                           
   955                           
   956                           ; 3 bytes @ 0x0
   957  00A0                     	ds	1
   958  00A1                     ?_put_string:	
   959  00A1                     ??_send_data_slave:	
   960                           ; 0 bytes @ 0x1
   961                           
   962  00A1                     ??_uint8_data_set:	
   963                           ; 0 bytes @ 0x1
   964                           
   965  00A1                     ??_uint16_to_byte_array:	
   966                           ; 0 bytes @ 0x1
   967                           
   968  00A1                     ??_double_to_byte_array:	
   969                           ; 0 bytes @ 0x1
   970                           
   971  00A1                     ??_bit_shift:	
   972                           ; 0 bytes @ 0x1
   973                           
   974  00A1                     ??___bmul:	
   975                           ; 0 bytes @ 0x1
   976                           
   977  00A1                     rx_packet_clear@i:	
   978                           ; 0 bytes @ 0x1
   979                           
   980  00A1                     process_1@p_buf:	
   981                           ; 1 bytes @ 0x1
   982                           
   983  00A1                     process_1_null@p_buf:	
   984                           ; 1 bytes @ 0x1
   985                           
   986  00A1                     put_string@str:	
   987                           ; 1 bytes @ 0x1
   988                           
   989                           
   990                           ; 2 bytes @ 0x1
   991  00A1                     	ds	1
   992  00A2                     ?_extract_receive_packet:	
   993  00A2                     ??_process_1_null:	
   994                           ; 0 bytes @ 0x2
   995                           
   996  00A2                     ??_process_1:	
   997                           ; 0 bytes @ 0x2
   998                           
   999  00A2                     send_data_slave@data_type:	
  1000                           ; 0 bytes @ 0x2
  1001                           
  1002  00A2                     extract_receive_packet@p_data_buf:	
  1003                           ; 1 bytes @ 0x2
  1004                           
  1005  00A2                     uint8_data_set@p_data:	
  1006                           ; 1 bytes @ 0x2
  1007                           
  1008  00A2                     ___bmul@product:	
  1009                           ; 1 bytes @ 0x2
  1010                           
  1011  00A2                     ___wmul@multiplicand:	
  1012                           ; 1 bytes @ 0x2
  1013                           
  1014  00A2                     ___awdiv@dividend:	
  1015                           ; 2 bytes @ 0x2
  1016                           
  1017  00A2                     ___awmod@dividend:	
  1018                           ; 2 bytes @ 0x2
  1019                           
  1020                           
  1021                           ; 2 bytes @ 0x2
  1022  00A2                     	ds	1
  1023  00A3                     ??_put_string:	
  1024  00A3                     extract_receive_packet@p_data_len_buf:	
  1025                           ; 0 bytes @ 0x3
  1026                           
  1027  00A3                     ___bmul@multiplier:	
  1028                           ; 1 bytes @ 0x3
  1029                           
  1030  00A3                     ___ftpack@exp:	
  1031                           ; 1 bytes @ 0x3
  1032                           
  1033  00A3                     double_to_byte_array@converter:	
  1034                           ; 1 bytes @ 0x3
  1035                           
  1036                           
  1037                           ; 4 bytes @ 0x3
  1038  00A3                     	ds	1
  1039  00A4                     ??_extract_receive_packet:	
  1040  00A4                     ??___wmul:	
  1041                           ; 0 bytes @ 0x4
  1042                           
  1043  00A4                     ??___awdiv:	
  1044                           ; 0 bytes @ 0x4
  1045                           
  1046  00A4                     ??___awmod:	
  1047                           ; 0 bytes @ 0x4
  1048                           
  1049  00A4                     ??___fttol:	
  1050                           ; 0 bytes @ 0x4
  1051                           
  1052  00A4                     uint16_to_byte_array@p_data:	
  1053                           ; 0 bytes @ 0x4
  1054                           
  1055  00A4                     process_1@num:	
  1056                           ; 1 bytes @ 0x4
  1057                           
  1058  00A4                     process_1_null@num:	
  1059                           ; 1 bytes @ 0x4
  1060                           
  1061  00A4                     ___ftpack@sign:	
  1062                           ; 1 bytes @ 0x4
  1063                           
  1064  00A4                     ___wmul@product:	
  1065                           ; 1 bytes @ 0x4
  1066                           
  1067                           
  1068                           ; 2 bytes @ 0x4
  1069  00A4                     	ds	1
  1070  00A5                     ?_uint16_data_set:	
  1071  00A5                     ??___ftpack:	
  1072                           ; 0 bytes @ 0x5
  1073                           
  1074  00A5                     extract_receive_packet@p_data_type_buf:	
  1075                           ; 0 bytes @ 0x5
  1076                           
  1077  00A5                     uint16_data_set@data_len:	
  1078                           ; 1 bytes @ 0x5
  1079                           
  1080  00A5                     bit_shift@p_ad_value:	
  1081                           ; 1 bytes @ 0x5
  1082                           
  1083  00A5                     process_1@divide_1:	
  1084                           ; 1 bytes @ 0x5
  1085                           
  1086  00A5                     process_1_null@divide_1:	
  1087                           ; 1 bytes @ 0x5
  1088                           
  1089  00A5                     ___awdiv@counter:	
  1090                           ; 1 bytes @ 0x5
  1091                           
  1092  00A5                     ___awmod@counter:	
  1093                           ; 1 bytes @ 0x5
  1094                           
  1095                           
  1096                           ; 1 bytes @ 0x5
  1097  00A5                     	ds	1
  1098  00A6                     ??_uint16_data_set:	
  1099  00A6                     extract_receive_packet@i:	
  1100                           ; 0 bytes @ 0x6
  1101                           
  1102  00A6                     ___awdiv@sign:	
  1103                           ; 1 bytes @ 0x6
  1104                           
  1105  00A6                     ___awmod@sign:	
  1106                           ; 1 bytes @ 0x6
  1107                           
  1108  00A6                     process_1@i:	
  1109                           ; 1 bytes @ 0x6
  1110                           
  1111  00A6                     process_1_null@i:	
  1112                           ; 2 bytes @ 0x6
  1113                           
  1114                           
  1115                           ; 2 bytes @ 0x6
  1116  00A6                     	ds	1
  1117  00A7                     double_to_byte_array@p_data:	
  1118  00A7                     ___awdiv@quotient:	
  1119                           ; 1 bytes @ 0x7
  1120                           
  1121  00A7                     uint16_data_set@buf:	
  1122                           ; 2 bytes @ 0x7
  1123                           
  1124                           
  1125                           ; 3 bytes @ 0x7
  1126  00A7                     	ds	1
  1127  00A8                     ?___lwtoft:	
  1128  00A8                     double_to_byte_array@i:	
  1129                           ; 3 bytes @ 0x8
  1130                           
  1131  00A8                     process_1@val:	
  1132                           ; 1 bytes @ 0x8
  1133                           
  1134  00A8                     process_1_null@val:	
  1135                           ; 1 bytes @ 0x8
  1136                           
  1137  00A8                     ___fttol@sign1:	
  1138                           ; 1 bytes @ 0x8
  1139                           
  1140  00A8                     ___lwtoft@c:	
  1141                           ; 1 bytes @ 0x8
  1142                           
  1143                           
  1144                           ; 2 bytes @ 0x8
  1145  00A8                     	ds	1
  1146  00A9                     ?_double_data_set:	
  1147  00A9                     ?_process_10:	
  1148                           ; 0 bytes @ 0x9
  1149                           
  1150  00A9                     double_data_set@data_len:	
  1151                           ; 0 bytes @ 0x9
  1152                           
  1153  00A9                     process_10@p_flag:	
  1154                           ; 1 bytes @ 0x9
  1155                           
  1156  00A9                     ___fttol@lval:	
  1157                           ; 1 bytes @ 0x9
  1158                           
  1159                           
  1160                           ; 4 bytes @ 0x9
  1161  00A9                     	ds	1
  1162  00AA                     ??_double_data_set:	
  1163  00AA                     uint16_data_set@p_data:	
  1164                           ; 0 bytes @ 0xA
  1165                           
  1166  00AA                     process_10@p_buf:	
  1167                           ; 1 bytes @ 0xA
  1168                           
  1169                           
  1170                           ; 1 bytes @ 0xA
  1171  00AA                     	ds	1
  1172  00AB                     ??_process_10:	
  1173  00AB                     ??___lwtoft:	
  1174                           ; 0 bytes @ 0xB
  1175                           
  1176  00AB                     uint16_data_set@i:	
  1177                           ; 0 bytes @ 0xB
  1178                           
  1179  00AB                     double_data_set@buf:	
  1180                           ; 1 bytes @ 0xB
  1181                           
  1182                           
  1183                           ; 5 bytes @ 0xB
  1184  00AB                     	ds	1
  1185  00AC                     ?___ftmul:	
  1186  00AC                     ___ftmul@f1:	
  1187                           ; 3 bytes @ 0xC
  1188                           
  1189                           
  1190                           ; 3 bytes @ 0xC
  1191  00AC                     	ds	1
  1192  00AD                     ___fttol@exp1:	
  1193                           
  1194                           ; 1 bytes @ 0xD
  1195  00AD                     	ds	1
  1196  00AE                     process_10@divide_10:	
  1197                           
  1198                           ; 1 bytes @ 0xE
  1199  00AE                     	ds	1
  1200  00AF                     process_10@remainder_10:	
  1201  00AF                     ___ftmul@f2:	
  1202                           ; 1 bytes @ 0xF
  1203                           
  1204                           
  1205                           ; 3 bytes @ 0xF
  1206  00AF                     	ds	1
  1207  00B0                     double_data_set@p_data:	
  1208  00B0                     process_10@val:	
  1209                           ; 1 bytes @ 0x10
  1210                           
  1211                           
  1212                           ; 1 bytes @ 0x10
  1213  00B0                     	ds	1
  1214  00B1                     double_data_set@i:	
  1215  00B1                     process_10@i:	
  1216                           ; 1 bytes @ 0x11
  1217                           
  1218                           
  1219                           ; 1 bytes @ 0x11
  1220  00B1                     	ds	1
  1221  00B2                     ??___ftmul:	
  1222  00B2                     ?_sent_data_set:	
  1223                           ; 0 bytes @ 0x12
  1224                           
  1225  00B2                     sent_data_set@data_len:	
  1226                           ; 1 bytes @ 0x12
  1227                           
  1228  00B2                     process_10@num:	
  1229                           ; 1 bytes @ 0x12
  1230                           
  1231                           
  1232                           ; 1 bytes @ 0x12
  1233  00B2                     	ds	1
  1234  00B3                     ?_process_100:	
  1235  00B3                     sent_data_set@byte_of_type:	
  1236                           ; 0 bytes @ 0x13
  1237                           
  1238  00B3                     process_100@p_flag:	
  1239                           ; 1 bytes @ 0x13
  1240                           
  1241                           
  1242                           ; 1 bytes @ 0x13
  1243  00B3                     	ds	1
  1244  00B4                     ??_sent_data_set:	
  1245  00B4                     process_100@p_buf:	
  1246                           ; 0 bytes @ 0x14
  1247                           
  1248                           
  1249                           ; 1 bytes @ 0x14
  1250  00B4                     	ds	1
  1251  00B5                     ??_process_100:	
  1252                           
  1253                           ; 0 bytes @ 0x15
  1254  00B5                     	ds	1
  1255  00B6                     ___ftmul@exp:	
  1256                           
  1257                           ; 1 bytes @ 0x16
  1258  00B6                     	ds	1
  1259  00B7                     ___ftmul@f3_as_product:	
  1260                           
  1261                           ; 3 bytes @ 0x17
  1262  00B7                     	ds	1
  1263  00B8                     process_100@num:	
  1264                           
  1265                           ; 1 bytes @ 0x18
  1266  00B8                     	ds	1
  1267  00B9                     sent_data_set@p_data:	
  1268  00B9                     process_100@remainder_100:	
  1269                           ; 1 bytes @ 0x19
  1270                           
  1271                           
  1272                           ; 1 bytes @ 0x19
  1273  00B9                     	ds	1
  1274  00BA                     ?_number_to_string_char:	
  1275  00BA                     number_to_string_char@num:	
  1276                           ; 0 bytes @ 0x1A
  1277                           
  1278  00BA                     ___ftmul@cntr:	
  1279                           ; 1 bytes @ 0x1A
  1280                           
  1281                           
  1282                           ; 1 bytes @ 0x1A
  1283  00BA                     	ds	1
  1284  00BB                     ??_number_to_string_char:	
  1285  00BB                     ___ftmul@sign:	
  1286                           ; 0 bytes @ 0x1B
  1287                           
  1288                           
  1289                           ; 1 bytes @ 0x1B
  1290  00BB                     	ds	1
  1291  00BC                     ?_get_adcon:	
  1292  00BC                     ?___ftdiv:	
  1293                           ; 3 bytes @ 0x1C
  1294                           
  1295  00BC                     ___ftdiv@f2:	
  1296                           ; 3 bytes @ 0x1C
  1297                           
  1298                           
  1299                           ; 3 bytes @ 0x1C
  1300  00BC                     	ds	1
  1301  00BD                     number_to_string_char@flag:	
  1302                           
  1303                           ; 1 bytes @ 0x1D
  1304  00BD                     	ds	1
  1305  00BE                     number_to_string_char@buf:	
  1306                           
  1307                           ; 1 bytes @ 0x1E
  1308  00BE                     	ds	1
  1309  00BF                     ??_get_adcon:	
  1310  00BF                     ___ftdiv@f1:	
  1311                           ; 0 bytes @ 0x1F
  1312                           
  1313                           
  1314                           ; 3 bytes @ 0x1F
  1315  00BF                     	ds	1
  1316  00C0                     get_adcon@adcon_shift:	
  1317                           
  1318                           ; 1 bytes @ 0x20
  1319  00C0                     	ds	1
  1320  00C1                     get_adcon@voltage_value:	
  1321                           
  1322                           ; 3 bytes @ 0x21
  1323  00C1                     	ds	1
  1324  00C2                     ??___ftdiv:	
  1325                           
  1326                           ; 0 bytes @ 0x22
  1327  00C2                     	ds	2
  1328  00C4                     get_adcon@my_adres:	
  1329                           
  1330                           ; 2 bytes @ 0x24
  1331  00C4                     	ds	2
  1332  00C6                     ___ftdiv@cntr:	
  1333  00C6                     get_adcon@ad_value:	
  1334                           ; 1 bytes @ 0x26
  1335                           
  1336                           
  1337                           ; 2 bytes @ 0x26
  1338  00C6                     	ds	1
  1339  00C7                     ___ftdiv@f3:	
  1340                           
  1341                           ; 3 bytes @ 0x27
  1342  00C7                     	ds	3
  1343  00CA                     ___ftdiv@exp:	
  1344                           
  1345                           ; 1 bytes @ 0x2A
  1346  00CA                     	ds	1
  1347  00CB                     ___ftdiv@sign:	
  1348                           
  1349                           ; 1 bytes @ 0x2B
  1350  00CB                     	ds	1
  1351  00CC                     ?_get_pt:	
  1352  00CC                     get_pt@volt:	
  1353                           ; 3 bytes @ 0x2C
  1354                           
  1355                           
  1356                           ; 3 bytes @ 0x2C
  1357  00CC                     	ds	3
  1358  00CF                     ??_get_pt:	
  1359                           
  1360                           	psect	cstackCOMMON
  1361  0070                     __pcstackCOMMON:	
  1362                           ; 0 bytes @ 0x2F
  1363                           
  1364  0070                     ?_pic_port_init:	
  1365  0070                     ?_uart_init:	
  1366                           ; 0 bytes @ 0x0
  1367                           
  1368  0070                     ?_spi_slave_start:	
  1369                           ; 0 bytes @ 0x0
  1370                           
  1371  0070                     ?_put_char:	
  1372                           ; 0 bytes @ 0x0
  1373                           
  1374  0070                     ?_rx_packet_clear:	
  1375                           ; 0 bytes @ 0x0
  1376                           
  1377  0070                     ?_spi_slave_send:	
  1378                           ; 0 bytes @ 0x0
  1379                           
  1380  0070                     ??_spi_slave_send:	
  1381                           ; 0 bytes @ 0x0
  1382                           
  1383  0070                     ?_spi_slave_receive:	
  1384                           ; 0 bytes @ 0x0
  1385                           
  1386  0070                     ??_spi_slave_receive:	
  1387                           ; 0 bytes @ 0x0
  1388                           
  1389  0070                     ?_buf_send:	
  1390                           ; 0 bytes @ 0x0
  1391                           
  1392  0070                     ??_buf_send:	
  1393                           ; 0 bytes @ 0x0
  1394                           
  1395  0070                     ?_tx_packet_clear:	
  1396                           ; 0 bytes @ 0x0
  1397                           
  1398  0070                     ??_tx_packet_clear:	
  1399                           ; 0 bytes @ 0x0
  1400                           
  1401  0070                     ?_send_packet:	
  1402                           ; 0 bytes @ 0x0
  1403                           
  1404  0070                     ?_receive_packet:	
  1405                           ; 0 bytes @ 0x0
  1406                           
  1407  0070                     ?_check_flag:	
  1408                           ; 0 bytes @ 0x0
  1409                           
  1410  0070                     ?_isr:	
  1411                           ; 0 bytes @ 0x0
  1412                           
  1413  0070                     ?_main:	
  1414                           ; 0 bytes @ 0x0
  1415                           
  1416                           
  1417                           ; 2 bytes @ 0x0
  1418  0070                     	ds	1
  1419  0071                     tx_packet_clear@i:	
  1420  0071                     buf_send@i:	
  1421                           ; 1 bytes @ 0x1
  1422                           
  1423  0071                     spi_slave_send@buf:	
  1424                           ; 1 bytes @ 0x1
  1425                           
  1426  0071                     spi_slave_receive@p_get:	
  1427                           ; 1 bytes @ 0x1
  1428                           
  1429                           
  1430                           ; 1 bytes @ 0x1
  1431  0071                     	ds	1
  1432  0072                     buf_send@buf:	
  1433  0072                     spi_slave_send@data:	
  1434                           ; 1 bytes @ 0x2
  1435                           
  1436                           
  1437                           ; 1 bytes @ 0x2
  1438  0072                     	ds	1
  1439  0073                     ??_send_packet:	
  1440  0073                     ??_receive_packet:	
  1441                           ; 0 bytes @ 0x3
  1442                           
  1443  0073                     ??_check_flag:	
  1444                           ; 0 bytes @ 0x3
  1445                           
  1446                           
  1447                           ; 0 bytes @ 0x3
  1448  0073                     	ds	1
  1449  0074                     send_packet@i:	
  1450                           
  1451                           ; 1 bytes @ 0x4
  1452  0074                     	ds	2
  1453  0076                     ??_isr:	
  1454                           
  1455                           ; 0 bytes @ 0x6
  1456  0076                     	ds	5
  1457  007B                     isr@isr_spi_buf:	
  1458                           
  1459                           ; 1 bytes @ 0xB
  1460  007B                     	ds	1
  1461                           
  1462                           	psect	cstackBANK0
  1463  0020                     __pcstackBANK0:	
  1464  0020                     receive_packet@receive_buf:	
  1465                           
  1466                           ; 33 bytes @ 0x0
  1467  0020                     	ds	33
  1468  0041                     receive_packet@i:	
  1469                           
  1470                           ; 1 bytes @ 0x21
  1471  0041                     	ds	1
  1472                           
  1473                           	psect	maintext
  1474  003A                     __pmaintext:	
  1475 ;;
  1476 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1477 ;;
  1478 ;; *************** function _main *****************
  1479 ;; Defined at:
  1480 ;;		line 43 in file "main.c"
  1481 ;; Parameters:    Size  Location     Type
  1482 ;;		None
  1483 ;; Auto vars:     Size  Location     Type
  1484 ;;  r_data         30    0[BANK2 ] unsigned char [30]
  1485 ;;  send_data      15   53[BANK2 ] unsigned char [15]
  1486 ;;  temp_buf_c      5   69[BANK2 ] unsigned char [5]
  1487 ;;  volt            3   75[BANK2 ] unsigned char [5]
  1488 ;;  light6          3   48[BANK2 ] unsigned char [5]
  1489 ;;  light5          3   45[BANK2 ] unsigned char [5]
  1490 ;;  light4          3   42[BANK2 ] unsigned char [5]
  1491 ;;  light3          3   39[BANK2 ] unsigned char [5]
  1492 ;;  light2          3   36[BANK2 ] unsigned char [5]
  1493 ;;  light1          3   33[BANK2 ] unsigned char [5]
  1494 ;;  temp            3   30[BANK2 ] unsigned char [5]
  1495 ;;  t_average       3    0        unsigned char [5]
  1496 ;;  temp_d          3    0        unsigned char [5]
  1497 ;;  temp_buf        2    0        unsigned int 
  1498 ;;  temp_c          1   79[BANK2 ] unsigned char 
  1499 ;;  adcon_shift     1   78[BANK2 ] unsigned char 
  1500 ;;  i               1   74[BANK2 ] unsigned char 
  1501 ;;  counter         1   68[BANK2 ] unsigned char 
  1502 ;;  r_data_len      1   52[BANK2 ] unsigned char 
  1503 ;;  r_data_type     1   51[BANK2 ] unsigned char 
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  2   50[None  ] int 
  1506 ;; Registers used:
  1507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1508 ;; Tracked objects:
  1509 ;;		On entry : B00/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1513 ;;      Params:         0       0       0       0       0
  1514 ;;      Locals:         0       0       0       0      80
  1515 ;;      Temps:          0       0       0       4       0
  1516 ;;      Totals:         0       0       0       4      80
  1517 ;;Total ram usage:       84 bytes
  1518 ;; Hardware stack levels required when called:    7
  1519 ;; This function calls:
  1520 ;;		___ftmul
  1521 ;;		___fttol
  1522 ;;		_extract_receive_packet
  1523 ;;		_get_adcon
  1524 ;;		_get_pt
  1525 ;;		_number_to_string_char
  1526 ;;		_pic_port_init
  1527 ;;		_put_char
  1528 ;;		_put_string
  1529 ;;		_send_data_slave
  1530 ;;		_sent_data_set
  1531 ;;		_spi_slave_start
  1532 ;;		_uart_init
  1533 ;; This function is called by:
  1534 ;;		Startup code after reset
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           
  1539                           ;psect for function _main
  1540  003A                     _main:	
  1541                           
  1542                           ;main.c: 45: uint8_t i;
  1543                           ;main.c: 46: uint8_t r_data_type;
  1544                           ;main.c: 47: uint8_t r_data[30];
  1545                           ;main.c: 48: uint8_t r_data_len;
  1546                           ;main.c: 51: uint8_t send_data[15] = {'a', 'b', 'c', 'd', 'e','f','g','h','i','j','k','l
      +                          ','m'};
  1547                           
  1548                           ;incstack = 0
  1549                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1550  003A  3045               	movlw	main@send_data& (0+255)
  1551  003B  0084               	movwf	4
  1552  003C  3090               	movlw	low main@F1179
  1553  003D  1683               	bsf	3,5	;RP0=1, select bank3
  1554  003E  1703               	bsf	3,6	;RP1=1, select bank3
  1555  003F  00A5               	movwf	??_main^(0+384)
  1556  0040  0804               	movf	4,w
  1557  0041  00A6               	movwf	(??_main^(0+384)+1)
  1558  0042  300F               	movlw	15
  1559  0043  00A7               	movwf	(??_main^(0+384)+2)
  1560  0044                     u3300:	
  1561  0044  0825               	movf	??_main^(0+384),w
  1562  0045  0084               	movwf	4
  1563  0046  1783               	bsf	3,7	;select IRP bank3
  1564  0047  0800               	movf	0,w
  1565  0048  00A8               	movwf	(??_main^(0+384)+3)
  1566  0049  0AA5               	incf	??_main^(0+384),f
  1567  004A  0826               	movf	(??_main^(0+384)+1),w
  1568  004B  0084               	movwf	4
  1569  004C  0828               	movf	(??_main^(0+384)+3),w
  1570  004D  0080               	movwf	0
  1571  004E  0AA6               	incf	(??_main^(0+384)+1),f
  1572  004F  0BA7               	decfsz	(??_main^(0+384)+2),f
  1573  0050  2844               	goto	u3300
  1574                           
  1575                           ;main.c: 53: uint16_t temp_buf;
  1576                           ;main.c: 54: double temp_d;
  1577                           ;main.c: 55: uint8_t adcon_shift;
  1578                           ;main.c: 56: char temp_c;
  1579                           ;main.c: 57: char temp_buf_c[5];
  1580                           ;main.c: 58: uint8_t counter;
  1581                           ;main.c: 59: double temp, volt;
  1582                           ;main.c: 60: double t_average;
  1583                           ;main.c: 61: double light1, light2, light3, light4, light5, light6;
  1584                           ;main.c: 63: counter = 0;
  1585  0051  1283               	bcf	3,5	;RP0=0, select bank2
  1586  0052  1703               	bsf	3,6	;RP1=1, select bank2
  1587  0053  01D4               	clrf	main@counter^(0+256)
  1588  0054                     l3029:	
  1589                           ;main.c: 65: while(1)
  1590                           
  1591                           
  1592                           ;main.c: 66: {
  1593                           ;main.c: 67: for(i = 0; i<15;i++)
  1594  0054  1283               	bcf	3,5	;RP0=0, select bank2
  1595  0055  1703               	bsf	3,6	;RP1=1, select bank2
  1596  0056  01DA               	clrf	main@i^(0+256)
  1597  0057  300F               	movlw	15
  1598  0058  025A               	subwf	main@i^(0+256),w
  1599  0059  1803               	btfsc	3,0
  1600  005A  286C               	goto	l3041
  1601  005B                     l3035:	
  1602                           
  1603                           ;main.c: 68: {
  1604                           ;main.c: 69: send_data[i] = 0;
  1605  005B  085A               	movf	main@i^(0+256),w
  1606  005C  3E45               	addlw	(low (main@send_data| (0+256)))& (0+255)
  1607  005D  0084               	movwf	4
  1608  005E  1783               	bsf	3,7	;select IRP bank2
  1609  005F  0180               	clrf	0
  1610  0060  3001               	movlw	1
  1611  0061  1683               	bsf	3,5	;RP0=1, select bank3
  1612  0062  1703               	bsf	3,6	;RP1=1, select bank3
  1613  0063  00A5               	movwf	??_main^(0+384)
  1614  0064  0825               	movf	??_main^(0+384),w
  1615  0065  1283               	bcf	3,5	;RP0=0, select bank2
  1616  0066  1703               	bsf	3,6	;RP1=1, select bank2
  1617  0067  07DA               	addwf	main@i^(0+256),f
  1618  0068  300F               	movlw	15
  1619  0069  025A               	subwf	main@i^(0+256),w
  1620  006A  1C03               	skipc
  1621  006B  285B               	goto	l3035
  1622  006C                     l3041:	
  1623                           
  1624                           ;main.c: 70: }
  1625                           ;main.c: 71: pic_port_init();
  1626  006C  120A  158A  2162  120A  118A  	fcall	_pic_port_init
  1627                           
  1628                           ;main.c: 73: TRISA = 0b00001111;
  1629  0071  300F               	movlw	15
  1630  0072  1683               	bsf	3,5	;RP0=1, select bank1
  1631  0073  1303               	bcf	3,6	;RP1=0, select bank1
  1632  0074  0085               	movwf	5	;volatile
  1633                           
  1634                           ;main.c: 74: TRISE = 0b00000111;
  1635  0075  3007               	movlw	7
  1636  0076  0089               	movwf	9	;volatile
  1637                           
  1638                           ;main.c: 77: RB7 = 1;
  1639  0077  1283               	bcf	3,5	;RP0=0, select bank0
  1640  0078  1303               	bcf	3,6	;RP1=0, select bank0
  1641  0079  1786               	bsf	6,7	;volatile
  1642                           
  1643                           ;main.c: 78: _delay((unsigned long)((500)*(20000000/4000.0)));
  1644  007A  300D               	movlw	13
  1645  007B  1683               	bsf	3,5	;RP0=1, select bank3
  1646  007C  1703               	bsf	3,6	;RP1=1, select bank3
  1647  007D  00A7               	movwf	(??_main^(0+384)+2)
  1648  007E  30AF               	movlw	175
  1649  007F  00A6               	movwf	(??_main^(0+384)+1)
  1650  0080  30C1               	movlw	193
  1651  0081  00A5               	movwf	??_main^(0+384)
  1652  0082                     u3397:	
  1653  0082  0BA5               	decfsz	??_main^(0+384),f
  1654  0083  2882               	goto	u3397
  1655  0084  0BA6               	decfsz	(??_main^(0+384)+1),f
  1656  0085  2882               	goto	u3397
  1657  0086  0BA7               	decfsz	(??_main^(0+384)+2),f
  1658  0087  2882               	goto	u3397
  1659  0088  0000               	nop
  1660                           
  1661                           ;main.c: 79: RB7 = 0;
  1662  0089  1283               	bcf	3,5	;RP0=0, select bank0
  1663  008A  1303               	bcf	3,6	;RP1=0, select bank0
  1664  008B  1386               	bcf	6,7	;volatile
  1665                           
  1666                           ;main.c: 80: _delay((unsigned long)((500)*(20000000/4000.0)));
  1667  008C  300D               	movlw	13
  1668  008D  1683               	bsf	3,5	;RP0=1, select bank3
  1669  008E  1703               	bsf	3,6	;RP1=1, select bank3
  1670  008F  00A7               	movwf	(??_main^(0+384)+2)
  1671  0090  30AF               	movlw	175
  1672  0091  00A6               	movwf	(??_main^(0+384)+1)
  1673  0092  30C1               	movlw	193
  1674  0093  00A5               	movwf	??_main^(0+384)
  1675  0094                     u3407:	
  1676  0094  0BA5               	decfsz	??_main^(0+384),f
  1677  0095  2894               	goto	u3407
  1678  0096  0BA6               	decfsz	(??_main^(0+384)+1),f
  1679  0097  2894               	goto	u3407
  1680  0098  0BA7               	decfsz	(??_main^(0+384)+2),f
  1681  0099  2894               	goto	u3407
  1682  009A  0000               	nop
  1683                           
  1684                           ;main.c: 83: uart_init();
  1685  009B  120A  158A  2147  120A  118A  	fcall	_uart_init
  1686                           
  1687                           ;main.c: 84: spi_slave_start(SPI_ISR_ENABLE);
  1688  00A0  3000               	movlw	0
  1689  00A1  120A  158A  22C1  120A  118A  	fcall	_spi_slave_start
  1690                           
  1691                           ;main.c: 86: switch(counter)
  1692  00A6  2C93               	goto	l3143
  1693  00A7                     l3059:	
  1694                           ;main.c: 87: {
  1695                           ;main.c: 89: case 0:
  1696                           
  1697                           
  1698                           ;main.c: 92: send_data[0] = 'L';
  1699  00A7  304C               	movlw	76
  1700  00A8  1683               	bsf	3,5	;RP0=1, select bank3
  1701  00A9  1703               	bsf	3,6	;RP1=1, select bank3
  1702  00AA  00A5               	movwf	??_main^(0+384)
  1703  00AB  0825               	movf	??_main^(0+384),w
  1704  00AC  1283               	bcf	3,5	;RP0=0, select bank2
  1705  00AD  1703               	bsf	3,6	;RP1=1, select bank2
  1706  00AE  00C5               	movwf	main@send_data^(0+256)
  1707                           
  1708                           ;main.c: 95: adcon_shift = 0b10000000;
  1709  00AF  3080               	movlw	128
  1710  00B0  1683               	bsf	3,5	;RP0=1, select bank3
  1711  00B1  1703               	bsf	3,6	;RP1=1, select bank3
  1712  00B2  00A5               	movwf	??_main^(0+384)
  1713  00B3  0825               	movf	??_main^(0+384),w
  1714  00B4  1283               	bcf	3,5	;RP0=0, select bank2
  1715  00B5  1703               	bsf	3,6	;RP1=1, select bank2
  1716  00B6  00DE               	movwf	main@adcon_shift^(0+256)
  1717                           
  1718                           ;main.c: 96: volt = get_adcon(adcon_shift);
  1719  00B7  085E               	movf	main@adcon_shift^(0+256),w
  1720  00B8  120A  158A  261F  120A  118A  	fcall	_get_adcon
  1721  00BD  1683               	bsf	3,5	;RP0=1, select bank1
  1722  00BE  1303               	bcf	3,6	;RP1=0, select bank1
  1723  00BF  083C               	movf	?_get_adcon^(0+128),w
  1724  00C0  1283               	bcf	3,5	;RP0=0, select bank2
  1725  00C1  1703               	bsf	3,6	;RP1=1, select bank2
  1726  00C2  00DB               	movwf	main@volt^(0+256)
  1727  00C3  1683               	bsf	3,5	;RP0=1, select bank1
  1728  00C4  1303               	bcf	3,6	;RP1=0, select bank1
  1729  00C5  083D               	movf	(?_get_adcon+1)^(0+128),w
  1730  00C6  1283               	bcf	3,5	;RP0=0, select bank2
  1731  00C7  1703               	bsf	3,6	;RP1=1, select bank2
  1732  00C8  00DC               	movwf	(main@volt+1)^(0+256)
  1733  00C9  1683               	bsf	3,5	;RP0=1, select bank1
  1734  00CA  1303               	bcf	3,6	;RP1=0, select bank1
  1735  00CB  083E               	movf	(?_get_adcon+2)^(0+128),w
  1736  00CC  1283               	bcf	3,5	;RP0=0, select bank2
  1737  00CD  1703               	bsf	3,6	;RP1=1, select bank2
  1738  00CE  00DD               	movwf	(main@volt+2)^(0+256)
  1739                           
  1740                           ;main.c: 97: light1 = get_pt(volt);
  1741  00CF  085B               	movf	main@volt^(0+256),w
  1742  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  1743  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  1744  00D2  00CC               	movwf	get_pt@volt^(0+128)
  1745  00D3  1283               	bcf	3,5	;RP0=0, select bank2
  1746  00D4  1703               	bsf	3,6	;RP1=1, select bank2
  1747  00D5  085C               	movf	(main@volt+1)^(0+256),w
  1748  00D6  1683               	bsf	3,5	;RP0=1, select bank1
  1749  00D7  1303               	bcf	3,6	;RP1=0, select bank1
  1750  00D8  00CD               	movwf	(get_pt@volt+1)^(0+128)
  1751  00D9  1283               	bcf	3,5	;RP0=0, select bank2
  1752  00DA  1703               	bsf	3,6	;RP1=1, select bank2
  1753  00DB  085D               	movf	(main@volt+2)^(0+256),w
  1754  00DC  1683               	bsf	3,5	;RP0=1, select bank1
  1755  00DD  1303               	bcf	3,6	;RP1=0, select bank1
  1756  00DE  00CE               	movwf	(get_pt@volt+2)^(0+128)
  1757  00DF  120A  118A  2760  120A  118A  	fcall	_get_pt
  1758  00E4  1683               	bsf	3,5	;RP0=1, select bank1
  1759  00E5  1303               	bcf	3,6	;RP1=0, select bank1
  1760  00E6  084C               	movf	?_get_pt^(0+128),w
  1761  00E7  1283               	bcf	3,5	;RP0=0, select bank2
  1762  00E8  1703               	bsf	3,6	;RP1=1, select bank2
  1763  00E9  00B1               	movwf	main@light1^(0+256)
  1764  00EA  1683               	bsf	3,5	;RP0=1, select bank1
  1765  00EB  1303               	bcf	3,6	;RP1=0, select bank1
  1766  00EC  084D               	movf	(?_get_pt+1)^(0+128),w
  1767  00ED  1283               	bcf	3,5	;RP0=0, select bank2
  1768  00EE  1703               	bsf	3,6	;RP1=1, select bank2
  1769  00EF  00B2               	movwf	(main@light1+1)^(0+256)
  1770  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  1771  00F1  1303               	bcf	3,6	;RP1=0, select bank1
  1772  00F2  084E               	movf	(?_get_pt+2)^(0+128),w
  1773  00F3  1283               	bcf	3,5	;RP0=0, select bank2
  1774  00F4  1703               	bsf	3,6	;RP1=1, select bank2
  1775  00F5  00B3               	movwf	(main@light1+2)^(0+256)
  1776                           
  1777                           ;main.c: 98: temp_c = (char)light1;
  1778  00F6  0831               	movf	main@light1^(0+256),w
  1779  00F7  1683               	bsf	3,5	;RP0=1, select bank1
  1780  00F8  1303               	bcf	3,6	;RP1=0, select bank1
  1781  00F9  00A0               	movwf	___fttol@f1^(0+128)
  1782  00FA  1283               	bcf	3,5	;RP0=0, select bank2
  1783  00FB  1703               	bsf	3,6	;RP1=1, select bank2
  1784  00FC  0832               	movf	(main@light1+1)^(0+256),w
  1785  00FD  1683               	bsf	3,5	;RP0=1, select bank1
  1786  00FE  1303               	bcf	3,6	;RP1=0, select bank1
  1787  00FF  00A1               	movwf	(___fttol@f1+1)^(0+128)
  1788  0100  1283               	bcf	3,5	;RP0=0, select bank2
  1789  0101  1703               	bsf	3,6	;RP1=1, select bank2
  1790  0102  0833               	movf	(main@light1+2)^(0+256),w
  1791  0103  1683               	bsf	3,5	;RP0=1, select bank1
  1792  0104  1303               	bcf	3,6	;RP1=0, select bank1
  1793  0105  00A2               	movwf	(___fttol@f1+2)^(0+128)
  1794  0106  120A  118A  26D2  120A  118A  	fcall	___fttol
  1795  010B  1683               	bsf	3,5	;RP0=1, select bank1
  1796  010C  1303               	bcf	3,6	;RP1=0, select bank1
  1797  010D  0820               	movf	?___fttol^(0+128),w
  1798  010E  1683               	bsf	3,5	;RP0=1, select bank3
  1799  010F  1703               	bsf	3,6	;RP1=1, select bank3
  1800  0110  00A5               	movwf	??_main^(0+384)
  1801  0111  0825               	movf	??_main^(0+384),w
  1802  0112  1283               	bcf	3,5	;RP0=0, select bank2
  1803  0113  1703               	bsf	3,6	;RP1=1, select bank2
  1804  0114  00DF               	movwf	main@temp_c^(0+256)
  1805                           
  1806                           ;main.c: 99: number_to_string_char(temp_buf_c, temp_c);
  1807  0115  085F               	movf	main@temp_c^(0+256),w
  1808  0116  1683               	bsf	3,5	;RP0=1, select bank3
  1809  0117  1703               	bsf	3,6	;RP1=1, select bank3
  1810  0118  00A5               	movwf	??_main^(0+384)
  1811  0119  0825               	movf	??_main^(0+384),w
  1812  011A  1683               	bsf	3,5	;RP0=1, select bank1
  1813  011B  1303               	bcf	3,6	;RP1=0, select bank1
  1814  011C  00BA               	movwf	number_to_string_char@num^(0+128)
  1815  011D  3055               	movlw	(low (main@temp_buf_c| (0+256)))& (0+255)
  1816  011E  120A  158A  24F1  120A  118A  	fcall	_number_to_string_char
  1817                           
  1818                           ;main.c: 101: for(i=0; i<5; i++){
  1819  0123  1283               	bcf	3,5	;RP0=0, select bank2
  1820  0124  1703               	bsf	3,6	;RP1=1, select bank2
  1821  0125  01DA               	clrf	main@i^(0+256)
  1822  0126  3005               	movlw	5
  1823  0127  025A               	subwf	main@i^(0+256),w
  1824  0128  1803               	btfsc	3,0
  1825  0129  2949               	goto	l3085
  1826  012A                     l3075:	
  1827                           
  1828                           ;main.c: 102: put_char(temp_buf_c[i]);
  1829  012A  085A               	movf	main@i^(0+256),w
  1830  012B  3E55               	addlw	(low (main@temp_buf_c| (0+256)))& (0+255)
  1831  012C  0084               	movwf	4
  1832  012D  1783               	bsf	3,7	;select IRP bank2
  1833  012E  0800               	movf	0,w
  1834  012F  120A  158A  213A  120A  118A  	fcall	_put_char
  1835                           
  1836                           ;main.c: 103: if(temp_buf_c[i]=='\0'){
  1837  0134  1283               	bcf	3,5	;RP0=0, select bank2
  1838  0135  1703               	bsf	3,6	;RP1=1, select bank2
  1839  0136  085A               	movf	main@i^(0+256),w
  1840  0137  3E55               	addlw	(low (main@temp_buf_c| (0+256)))& (0+255)
  1841  0138  0084               	movwf	4
  1842  0139  1783               	bsf	3,7	;select IRP bank2
  1843  013A  0800               	movf	0,w
  1844  013B  1903               	btfsc	3,2
  1845  013C  2949               	goto	l3085
  1846                           
  1847                           ;main.c: 104: break;
  1848  013D  3001               	movlw	1
  1849  013E  1683               	bsf	3,5	;RP0=1, select bank3
  1850  013F  1703               	bsf	3,6	;RP1=1, select bank3
  1851  0140  00A5               	movwf	??_main^(0+384)
  1852  0141  0825               	movf	??_main^(0+384),w
  1853  0142  1283               	bcf	3,5	;RP0=0, select bank2
  1854  0143  1703               	bsf	3,6	;RP1=1, select bank2
  1855  0144  07DA               	addwf	main@i^(0+256),f
  1856  0145  3005               	movlw	5
  1857  0146  025A               	subwf	main@i^(0+256),w
  1858  0147  1C03               	skipc
  1859  0148  292A               	goto	l3075
  1860  0149                     l3085:	
  1861                           
  1862                           ;main.c: 105: }
  1863                           ;main.c: 106: }
  1864                           ;main.c: 108: send_data[1] = temp_buf_c[0];
  1865  0149  0855               	movf	main@temp_buf_c^(0+256),w
  1866  014A  1683               	bsf	3,5	;RP0=1, select bank3
  1867  014B  1703               	bsf	3,6	;RP1=1, select bank3
  1868  014C  00A5               	movwf	??_main^(0+384)
  1869  014D  0825               	movf	??_main^(0+384),w
  1870  014E  1283               	bcf	3,5	;RP0=0, select bank2
  1871  014F  1703               	bsf	3,6	;RP1=1, select bank2
  1872  0150  00C6               	movwf	(main@send_data^(0+256)+1)
  1873                           
  1874                           ;main.c: 109: send_data[2] = temp_buf_c[1];
  1875  0151  0856               	movf	(main@temp_buf_c^(0+256)+1),w
  1876  0152  1683               	bsf	3,5	;RP0=1, select bank3
  1877  0153  1703               	bsf	3,6	;RP1=1, select bank3
  1878  0154  00A5               	movwf	??_main^(0+384)
  1879  0155  0825               	movf	??_main^(0+384),w
  1880  0156  1283               	bcf	3,5	;RP0=0, select bank2
  1881  0157  1703               	bsf	3,6	;RP1=1, select bank2
  1882  0158  00C7               	movwf	(main@send_data^(0+256)+2)
  1883                           
  1884                           ;main.c: 113: adcon_shift = 0b10001000;
  1885  0159  3088               	movlw	136
  1886  015A  1683               	bsf	3,5	;RP0=1, select bank3
  1887  015B  1703               	bsf	3,6	;RP1=1, select bank3
  1888  015C  00A5               	movwf	??_main^(0+384)
  1889  015D  0825               	movf	??_main^(0+384),w
  1890  015E  1283               	bcf	3,5	;RP0=0, select bank2
  1891  015F  1703               	bsf	3,6	;RP1=1, select bank2
  1892  0160  00DE               	movwf	main@adcon_shift^(0+256)
  1893                           
  1894                           ;main.c: 114: volt = get_adcon(adcon_shift);
  1895  0161  085E               	movf	main@adcon_shift^(0+256),w
  1896  0162  120A  158A  261F  120A  118A  	fcall	_get_adcon
  1897  0167  1683               	bsf	3,5	;RP0=1, select bank1
  1898  0168  1303               	bcf	3,6	;RP1=0, select bank1
  1899  0169  083C               	movf	?_get_adcon^(0+128),w
  1900  016A  1283               	bcf	3,5	;RP0=0, select bank2
  1901  016B  1703               	bsf	3,6	;RP1=1, select bank2
  1902  016C  00DB               	movwf	main@volt^(0+256)
  1903  016D  1683               	bsf	3,5	;RP0=1, select bank1
  1904  016E  1303               	bcf	3,6	;RP1=0, select bank1
  1905  016F  083D               	movf	(?_get_adcon+1)^(0+128),w
  1906  0170  1283               	bcf	3,5	;RP0=0, select bank2
  1907  0171  1703               	bsf	3,6	;RP1=1, select bank2
  1908  0172  00DC               	movwf	(main@volt+1)^(0+256)
  1909  0173  1683               	bsf	3,5	;RP0=1, select bank1
  1910  0174  1303               	bcf	3,6	;RP1=0, select bank1
  1911  0175  083E               	movf	(?_get_adcon+2)^(0+128),w
  1912  0176  1283               	bcf	3,5	;RP0=0, select bank2
  1913  0177  1703               	bsf	3,6	;RP1=1, select bank2
  1914  0178  00DD               	movwf	(main@volt+2)^(0+256)
  1915                           
  1916                           ;main.c: 115: light2 = get_pt(volt);
  1917  0179  085B               	movf	main@volt^(0+256),w
  1918  017A  1683               	bsf	3,5	;RP0=1, select bank1
  1919  017B  1303               	bcf	3,6	;RP1=0, select bank1
  1920  017C  00CC               	movwf	get_pt@volt^(0+128)
  1921  017D  1283               	bcf	3,5	;RP0=0, select bank2
  1922  017E  1703               	bsf	3,6	;RP1=1, select bank2
  1923  017F  085C               	movf	(main@volt+1)^(0+256),w
  1924  0180  1683               	bsf	3,5	;RP0=1, select bank1
  1925  0181  1303               	bcf	3,6	;RP1=0, select bank1
  1926  0182  00CD               	movwf	(get_pt@volt+1)^(0+128)
  1927  0183  1283               	bcf	3,5	;RP0=0, select bank2
  1928  0184  1703               	bsf	3,6	;RP1=1, select bank2
  1929  0185  085D               	movf	(main@volt+2)^(0+256),w
  1930  0186  1683               	bsf	3,5	;RP0=1, select bank1
  1931  0187  1303               	bcf	3,6	;RP1=0, select bank1
  1932  0188  00CE               	movwf	(get_pt@volt+2)^(0+128)
  1933  0189  120A  118A  2760  120A  118A  	fcall	_get_pt
  1934  018E  1683               	bsf	3,5	;RP0=1, select bank1
  1935  018F  1303               	bcf	3,6	;RP1=0, select bank1
  1936  0190  084C               	movf	?_get_pt^(0+128),w
  1937  0191  1283               	bcf	3,5	;RP0=0, select bank2
  1938  0192  1703               	bsf	3,6	;RP1=1, select bank2
  1939  0193  00B4               	movwf	main@light2^(0+256)
  1940  0194  1683               	bsf	3,5	;RP0=1, select bank1
  1941  0195  1303               	bcf	3,6	;RP1=0, select bank1
  1942  0196  084D               	movf	(?_get_pt+1)^(0+128),w
  1943  0197  1283               	bcf	3,5	;RP0=0, select bank2
  1944  0198  1703               	bsf	3,6	;RP1=1, select bank2
  1945  0199  00B5               	movwf	(main@light2+1)^(0+256)
  1946  019A  1683               	bsf	3,5	;RP0=1, select bank1
  1947  019B  1303               	bcf	3,6	;RP1=0, select bank1
  1948  019C  084E               	movf	(?_get_pt+2)^(0+128),w
  1949  019D  1283               	bcf	3,5	;RP0=0, select bank2
  1950  019E  1703               	bsf	3,6	;RP1=1, select bank2
  1951  019F  00B6               	movwf	(main@light2+2)^(0+256)
  1952                           
  1953                           ;main.c: 116: temp_c = (char)light2;
  1954  01A0  0834               	movf	main@light2^(0+256),w
  1955  01A1  1683               	bsf	3,5	;RP0=1, select bank1
  1956  01A2  1303               	bcf	3,6	;RP1=0, select bank1
  1957  01A3  00A0               	movwf	___fttol@f1^(0+128)
  1958  01A4  1283               	bcf	3,5	;RP0=0, select bank2
  1959  01A5  1703               	bsf	3,6	;RP1=1, select bank2
  1960  01A6  0835               	movf	(main@light2+1)^(0+256),w
  1961  01A7  1683               	bsf	3,5	;RP0=1, select bank1
  1962  01A8  1303               	bcf	3,6	;RP1=0, select bank1
  1963  01A9  00A1               	movwf	(___fttol@f1+1)^(0+128)
  1964  01AA  1283               	bcf	3,5	;RP0=0, select bank2
  1965  01AB  1703               	bsf	3,6	;RP1=1, select bank2
  1966  01AC  0836               	movf	(main@light2+2)^(0+256),w
  1967  01AD  1683               	bsf	3,5	;RP0=1, select bank1
  1968  01AE  1303               	bcf	3,6	;RP1=0, select bank1
  1969  01AF  00A2               	movwf	(___fttol@f1+2)^(0+128)
  1970  01B0  120A  118A  26D2  120A  118A  	fcall	___fttol
  1971  01B5  1683               	bsf	3,5	;RP0=1, select bank1
  1972  01B6  1303               	bcf	3,6	;RP1=0, select bank1
  1973  01B7  0820               	movf	?___fttol^(0+128),w
  1974  01B8  1683               	bsf	3,5	;RP0=1, select bank3
  1975  01B9  1703               	bsf	3,6	;RP1=1, select bank3
  1976  01BA  00A5               	movwf	??_main^(0+384)
  1977  01BB  0825               	movf	??_main^(0+384),w
  1978  01BC  1283               	bcf	3,5	;RP0=0, select bank2
  1979  01BD  1703               	bsf	3,6	;RP1=1, select bank2
  1980  01BE  00DF               	movwf	main@temp_c^(0+256)
  1981                           
  1982                           ;main.c: 117: number_to_string_char(temp_buf_c, temp_c);
  1983  01BF  085F               	movf	main@temp_c^(0+256),w
  1984  01C0  1683               	bsf	3,5	;RP0=1, select bank3
  1985  01C1  1703               	bsf	3,6	;RP1=1, select bank3
  1986  01C2  00A5               	movwf	??_main^(0+384)
  1987  01C3  0825               	movf	??_main^(0+384),w
  1988  01C4  1683               	bsf	3,5	;RP0=1, select bank1
  1989  01C5  1303               	bcf	3,6	;RP1=0, select bank1
  1990  01C6  00BA               	movwf	number_to_string_char@num^(0+128)
  1991  01C7  3055               	movlw	(low (main@temp_buf_c| (0+256)))& (0+255)
  1992  01C8  120A  158A  24F1  120A  118A  	fcall	_number_to_string_char
  1993                           
  1994                           ;main.c: 120: send_data[3] = temp_buf_c[0];
  1995  01CD  1283               	bcf	3,5	;RP0=0, select bank2
  1996  01CE  1703               	bsf	3,6	;RP1=1, select bank2
  1997  01CF  0855               	movf	main@temp_buf_c^(0+256),w
  1998  01D0  1683               	bsf	3,5	;RP0=1, select bank3
  1999  01D1  1703               	bsf	3,6	;RP1=1, select bank3
  2000  01D2  00A5               	movwf	??_main^(0+384)
  2001  01D3  0825               	movf	??_main^(0+384),w
  2002  01D4  1283               	bcf	3,5	;RP0=0, select bank2
  2003  01D5  1703               	bsf	3,6	;RP1=1, select bank2
  2004  01D6  00C8               	movwf	(main@send_data^(0+256)+3)
  2005                           
  2006                           ;main.c: 121: send_data[4] = temp_buf_c[1];
  2007  01D7  0856               	movf	(main@temp_buf_c^(0+256)+1),w
  2008  01D8  1683               	bsf	3,5	;RP0=1, select bank3
  2009  01D9  1703               	bsf	3,6	;RP1=1, select bank3
  2010  01DA  00A5               	movwf	??_main^(0+384)
  2011  01DB  0825               	movf	??_main^(0+384),w
  2012  01DC  1283               	bcf	3,5	;RP0=0, select bank2
  2013  01DD  1703               	bsf	3,6	;RP1=1, select bank2
  2014  01DE  00C9               	movwf	(main@send_data^(0+256)+4)
  2015                           
  2016                           ;main.c: 125: adcon_shift = 0b10010000;
  2017  01DF  3090               	movlw	144
  2018  01E0  1683               	bsf	3,5	;RP0=1, select bank3
  2019  01E1  1703               	bsf	3,6	;RP1=1, select bank3
  2020  01E2  00A5               	movwf	??_main^(0+384)
  2021  01E3  0825               	movf	??_main^(0+384),w
  2022  01E4  1283               	bcf	3,5	;RP0=0, select bank2
  2023  01E5  1703               	bsf	3,6	;RP1=1, select bank2
  2024  01E6  00DE               	movwf	main@adcon_shift^(0+256)
  2025                           
  2026                           ;main.c: 126: volt = get_adcon(adcon_shift);
  2027  01E7  085E               	movf	main@adcon_shift^(0+256),w
  2028  01E8  120A  158A  261F  120A  118A  	fcall	_get_adcon
  2029  01ED  1683               	bsf	3,5	;RP0=1, select bank1
  2030  01EE  1303               	bcf	3,6	;RP1=0, select bank1
  2031  01EF  083C               	movf	?_get_adcon^(0+128),w
  2032  01F0  1283               	bcf	3,5	;RP0=0, select bank2
  2033  01F1  1703               	bsf	3,6	;RP1=1, select bank2
  2034  01F2  00DB               	movwf	main@volt^(0+256)
  2035  01F3  1683               	bsf	3,5	;RP0=1, select bank1
  2036  01F4  1303               	bcf	3,6	;RP1=0, select bank1
  2037  01F5  083D               	movf	(?_get_adcon+1)^(0+128),w
  2038  01F6  1283               	bcf	3,5	;RP0=0, select bank2
  2039  01F7  1703               	bsf	3,6	;RP1=1, select bank2
  2040  01F8  00DC               	movwf	(main@volt+1)^(0+256)
  2041  01F9  1683               	bsf	3,5	;RP0=1, select bank1
  2042  01FA  1303               	bcf	3,6	;RP1=0, select bank1
  2043  01FB  083E               	movf	(?_get_adcon+2)^(0+128),w
  2044  01FC  1283               	bcf	3,5	;RP0=0, select bank2
  2045  01FD  1703               	bsf	3,6	;RP1=1, select bank2
  2046  01FE  00DD               	movwf	(main@volt+2)^(0+256)
  2047                           
  2048                           ;main.c: 127: light3 = get_pt(volt);
  2049  01FF  085B               	movf	main@volt^(0+256),w
  2050  0200  1683               	bsf	3,5	;RP0=1, select bank1
  2051  0201  1303               	bcf	3,6	;RP1=0, select bank1
  2052  0202  00CC               	movwf	get_pt@volt^(0+128)
  2053  0203  1283               	bcf	3,5	;RP0=0, select bank2
  2054  0204  1703               	bsf	3,6	;RP1=1, select bank2
  2055  0205  085C               	movf	(main@volt+1)^(0+256),w
  2056  0206  1683               	bsf	3,5	;RP0=1, select bank1
  2057  0207  1303               	bcf	3,6	;RP1=0, select bank1
  2058  0208  00CD               	movwf	(get_pt@volt+1)^(0+128)
  2059  0209  1283               	bcf	3,5	;RP0=0, select bank2
  2060  020A  1703               	bsf	3,6	;RP1=1, select bank2
  2061  020B  085D               	movf	(main@volt+2)^(0+256),w
  2062  020C  1683               	bsf	3,5	;RP0=1, select bank1
  2063  020D  1303               	bcf	3,6	;RP1=0, select bank1
  2064  020E  00CE               	movwf	(get_pt@volt+2)^(0+128)
  2065  020F  120A  118A  2760  120A  118A  	fcall	_get_pt
  2066  0214  1683               	bsf	3,5	;RP0=1, select bank1
  2067  0215  1303               	bcf	3,6	;RP1=0, select bank1
  2068  0216  084C               	movf	?_get_pt^(0+128),w
  2069  0217  1283               	bcf	3,5	;RP0=0, select bank2
  2070  0218  1703               	bsf	3,6	;RP1=1, select bank2
  2071  0219  00B7               	movwf	main@light3^(0+256)
  2072  021A  1683               	bsf	3,5	;RP0=1, select bank1
  2073  021B  1303               	bcf	3,6	;RP1=0, select bank1
  2074  021C  084D               	movf	(?_get_pt+1)^(0+128),w
  2075  021D  1283               	bcf	3,5	;RP0=0, select bank2
  2076  021E  1703               	bsf	3,6	;RP1=1, select bank2
  2077  021F  00B8               	movwf	(main@light3+1)^(0+256)
  2078  0220  1683               	bsf	3,5	;RP0=1, select bank1
  2079  0221  1303               	bcf	3,6	;RP1=0, select bank1
  2080  0222  084E               	movf	(?_get_pt+2)^(0+128),w
  2081  0223  1283               	bcf	3,5	;RP0=0, select bank2
  2082  0224  1703               	bsf	3,6	;RP1=1, select bank2
  2083  0225  00B9               	movwf	(main@light3+2)^(0+256)
  2084                           
  2085                           ;main.c: 128: temp_c = (char)light3;
  2086  0226  0837               	movf	main@light3^(0+256),w
  2087  0227  1683               	bsf	3,5	;RP0=1, select bank1
  2088  0228  1303               	bcf	3,6	;RP1=0, select bank1
  2089  0229  00A0               	movwf	___fttol@f1^(0+128)
  2090  022A  1283               	bcf	3,5	;RP0=0, select bank2
  2091  022B  1703               	bsf	3,6	;RP1=1, select bank2
  2092  022C  0838               	movf	(main@light3+1)^(0+256),w
  2093  022D  1683               	bsf	3,5	;RP0=1, select bank1
  2094  022E  1303               	bcf	3,6	;RP1=0, select bank1
  2095  022F  00A1               	movwf	(___fttol@f1+1)^(0+128)
  2096  0230  1283               	bcf	3,5	;RP0=0, select bank2
  2097  0231  1703               	bsf	3,6	;RP1=1, select bank2
  2098  0232  0839               	movf	(main@light3+2)^(0+256),w
  2099  0233  1683               	bsf	3,5	;RP0=1, select bank1
  2100  0234  1303               	bcf	3,6	;RP1=0, select bank1
  2101  0235  00A2               	movwf	(___fttol@f1+2)^(0+128)
  2102  0236  120A  118A  26D2  120A  118A  	fcall	___fttol
  2103  023B  1683               	bsf	3,5	;RP0=1, select bank1
  2104  023C  1303               	bcf	3,6	;RP1=0, select bank1
  2105  023D  0820               	movf	?___fttol^(0+128),w
  2106  023E  1683               	bsf	3,5	;RP0=1, select bank3
  2107  023F  1703               	bsf	3,6	;RP1=1, select bank3
  2108  0240  00A5               	movwf	??_main^(0+384)
  2109  0241  0825               	movf	??_main^(0+384),w
  2110  0242  1283               	bcf	3,5	;RP0=0, select bank2
  2111  0243  1703               	bsf	3,6	;RP1=1, select bank2
  2112  0244  00DF               	movwf	main@temp_c^(0+256)
  2113                           
  2114                           ;main.c: 129: number_to_string_char(temp_buf_c, temp_c);
  2115  0245  085F               	movf	main@temp_c^(0+256),w
  2116  0246  1683               	bsf	3,5	;RP0=1, select bank3
  2117  0247  1703               	bsf	3,6	;RP1=1, select bank3
  2118  0248  00A5               	movwf	??_main^(0+384)
  2119  0249  0825               	movf	??_main^(0+384),w
  2120  024A  1683               	bsf	3,5	;RP0=1, select bank1
  2121  024B  1303               	bcf	3,6	;RP1=0, select bank1
  2122  024C  00BA               	movwf	number_to_string_char@num^(0+128)
  2123  024D  3055               	movlw	(low (main@temp_buf_c| (0+256)))& (0+255)
  2124  024E  120A  158A  24F1  120A  118A  	fcall	_number_to_string_char
  2125                           
  2126                           ;main.c: 131: send_data[5] = temp_buf_c[0];
  2127  0253  1283               	bcf	3,5	;RP0=0, select bank2
  2128  0254  1703               	bsf	3,6	;RP1=1, select bank2
  2129  0255  0855               	movf	main@temp_buf_c^(0+256),w
  2130  0256  1683               	bsf	3,5	;RP0=1, select bank3
  2131  0257  1703               	bsf	3,6	;RP1=1, select bank3
  2132  0258  00A5               	movwf	??_main^(0+384)
  2133  0259  0825               	movf	??_main^(0+384),w
  2134  025A  1283               	bcf	3,5	;RP0=0, select bank2
  2135  025B  1703               	bsf	3,6	;RP1=1, select bank2
  2136  025C  00CA               	movwf	(main@send_data^(0+256)+5)
  2137                           
  2138                           ;main.c: 132: send_data[6] = temp_buf_c[1];
  2139  025D  0856               	movf	(main@temp_buf_c^(0+256)+1),w
  2140  025E  1683               	bsf	3,5	;RP0=1, select bank3
  2141  025F  1703               	bsf	3,6	;RP1=1, select bank3
  2142  0260  00A5               	movwf	??_main^(0+384)
  2143  0261  0825               	movf	??_main^(0+384),w
  2144  0262  1283               	bcf	3,5	;RP0=0, select bank2
  2145  0263  1703               	bsf	3,6	;RP1=1, select bank2
  2146  0264  00CB               	movwf	(main@send_data^(0+256)+6)
  2147                           
  2148                           ;main.c: 136: adcon_shift = 0b10011000;
  2149  0265  3098               	movlw	152
  2150  0266  1683               	bsf	3,5	;RP0=1, select bank3
  2151  0267  1703               	bsf	3,6	;RP1=1, select bank3
  2152  0268  00A5               	movwf	??_main^(0+384)
  2153  0269  0825               	movf	??_main^(0+384),w
  2154  026A  1283               	bcf	3,5	;RP0=0, select bank2
  2155  026B  1703               	bsf	3,6	;RP1=1, select bank2
  2156  026C  00DE               	movwf	main@adcon_shift^(0+256)
  2157                           
  2158                           ;main.c: 137: volt = get_adcon(adcon_shift);
  2159  026D  085E               	movf	main@adcon_shift^(0+256),w
  2160  026E  120A  158A  261F  120A  118A  	fcall	_get_adcon
  2161  0273  1683               	bsf	3,5	;RP0=1, select bank1
  2162  0274  1303               	bcf	3,6	;RP1=0, select bank1
  2163  0275  083C               	movf	?_get_adcon^(0+128),w
  2164  0276  1283               	bcf	3,5	;RP0=0, select bank2
  2165  0277  1703               	bsf	3,6	;RP1=1, select bank2
  2166  0278  00DB               	movwf	main@volt^(0+256)
  2167  0279  1683               	bsf	3,5	;RP0=1, select bank1
  2168  027A  1303               	bcf	3,6	;RP1=0, select bank1
  2169  027B  083D               	movf	(?_get_adcon+1)^(0+128),w
  2170  027C  1283               	bcf	3,5	;RP0=0, select bank2
  2171  027D  1703               	bsf	3,6	;RP1=1, select bank2
  2172  027E  00DC               	movwf	(main@volt+1)^(0+256)
  2173  027F  1683               	bsf	3,5	;RP0=1, select bank1
  2174  0280  1303               	bcf	3,6	;RP1=0, select bank1
  2175  0281  083E               	movf	(?_get_adcon+2)^(0+128),w
  2176  0282  1283               	bcf	3,5	;RP0=0, select bank2
  2177  0283  1703               	bsf	3,6	;RP1=1, select bank2
  2178  0284  00DD               	movwf	(main@volt+2)^(0+256)
  2179                           
  2180                           ;main.c: 138: light4 = get_pt(volt);
  2181  0285  085B               	movf	main@volt^(0+256),w
  2182  0286  1683               	bsf	3,5	;RP0=1, select bank1
  2183  0287  1303               	bcf	3,6	;RP1=0, select bank1
  2184  0288  00CC               	movwf	get_pt@volt^(0+128)
  2185  0289  1283               	bcf	3,5	;RP0=0, select bank2
  2186  028A  1703               	bsf	3,6	;RP1=1, select bank2
  2187  028B  085C               	movf	(main@volt+1)^(0+256),w
  2188  028C  1683               	bsf	3,5	;RP0=1, select bank1
  2189  028D  1303               	bcf	3,6	;RP1=0, select bank1
  2190  028E  00CD               	movwf	(get_pt@volt+1)^(0+128)
  2191  028F  1283               	bcf	3,5	;RP0=0, select bank2
  2192  0290  1703               	bsf	3,6	;RP1=1, select bank2
  2193  0291  085D               	movf	(main@volt+2)^(0+256),w
  2194  0292  1683               	bsf	3,5	;RP0=1, select bank1
  2195  0293  1303               	bcf	3,6	;RP1=0, select bank1
  2196  0294  00CE               	movwf	(get_pt@volt+2)^(0+128)
  2197  0295  120A  118A  2760  120A  118A  	fcall	_get_pt
  2198  029A  1683               	bsf	3,5	;RP0=1, select bank1
  2199  029B  1303               	bcf	3,6	;RP1=0, select bank1
  2200  029C  084C               	movf	?_get_pt^(0+128),w
  2201  029D  1283               	bcf	3,5	;RP0=0, select bank2
  2202  029E  1703               	bsf	3,6	;RP1=1, select bank2
  2203  029F  00BA               	movwf	main@light4^(0+256)
  2204  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  2205  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  2206  02A2  084D               	movf	(?_get_pt+1)^(0+128),w
  2207  02A3  1283               	bcf	3,5	;RP0=0, select bank2
  2208  02A4  1703               	bsf	3,6	;RP1=1, select bank2
  2209  02A5  00BB               	movwf	(main@light4+1)^(0+256)
  2210  02A6  1683               	bsf	3,5	;RP0=1, select bank1
  2211  02A7  1303               	bcf	3,6	;RP1=0, select bank1
  2212  02A8  084E               	movf	(?_get_pt+2)^(0+128),w
  2213  02A9  1283               	bcf	3,5	;RP0=0, select bank2
  2214  02AA  1703               	bsf	3,6	;RP1=1, select bank2
  2215  02AB  00BC               	movwf	(main@light4+2)^(0+256)
  2216                           
  2217                           ;main.c: 139: temp_c = (char)light4;
  2218  02AC  083A               	movf	main@light4^(0+256),w
  2219  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  2220  02AE  1303               	bcf	3,6	;RP1=0, select bank1
  2221  02AF  00A0               	movwf	___fttol@f1^(0+128)
  2222  02B0  1283               	bcf	3,5	;RP0=0, select bank2
  2223  02B1  1703               	bsf	3,6	;RP1=1, select bank2
  2224  02B2  083B               	movf	(main@light4+1)^(0+256),w
  2225  02B3  1683               	bsf	3,5	;RP0=1, select bank1
  2226  02B4  1303               	bcf	3,6	;RP1=0, select bank1
  2227  02B5  00A1               	movwf	(___fttol@f1+1)^(0+128)
  2228  02B6  1283               	bcf	3,5	;RP0=0, select bank2
  2229  02B7  1703               	bsf	3,6	;RP1=1, select bank2
  2230  02B8  083C               	movf	(main@light4+2)^(0+256),w
  2231  02B9  1683               	bsf	3,5	;RP0=1, select bank1
  2232  02BA  1303               	bcf	3,6	;RP1=0, select bank1
  2233  02BB  00A2               	movwf	(___fttol@f1+2)^(0+128)
  2234  02BC  120A  118A  26D2  120A  118A  	fcall	___fttol
  2235  02C1  1683               	bsf	3,5	;RP0=1, select bank1
  2236  02C2  1303               	bcf	3,6	;RP1=0, select bank1
  2237  02C3  0820               	movf	?___fttol^(0+128),w
  2238  02C4  1683               	bsf	3,5	;RP0=1, select bank3
  2239  02C5  1703               	bsf	3,6	;RP1=1, select bank3
  2240  02C6  00A5               	movwf	??_main^(0+384)
  2241  02C7  0825               	movf	??_main^(0+384),w
  2242  02C8  1283               	bcf	3,5	;RP0=0, select bank2
  2243  02C9  1703               	bsf	3,6	;RP1=1, select bank2
  2244  02CA  00DF               	movwf	main@temp_c^(0+256)
  2245                           
  2246                           ;main.c: 140: number_to_string_char(temp_buf_c, temp_c);
  2247  02CB  085F               	movf	main@temp_c^(0+256),w
  2248  02CC  1683               	bsf	3,5	;RP0=1, select bank3
  2249  02CD  1703               	bsf	3,6	;RP1=1, select bank3
  2250  02CE  00A5               	movwf	??_main^(0+384)
  2251  02CF  0825               	movf	??_main^(0+384),w
  2252  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  2253  02D1  1303               	bcf	3,6	;RP1=0, select bank1
  2254  02D2  00BA               	movwf	number_to_string_char@num^(0+128)
  2255  02D3  3055               	movlw	(low (main@temp_buf_c| (0+256)))& (0+255)
  2256  02D4  120A  158A  24F1  120A  118A  	fcall	_number_to_string_char
  2257                           
  2258                           ;main.c: 143: send_data[7] = temp_buf_c[0];
  2259  02D9  1283               	bcf	3,5	;RP0=0, select bank2
  2260  02DA  1703               	bsf	3,6	;RP1=1, select bank2
  2261  02DB  0855               	movf	main@temp_buf_c^(0+256),w
  2262  02DC  1683               	bsf	3,5	;RP0=1, select bank3
  2263  02DD  1703               	bsf	3,6	;RP1=1, select bank3
  2264  02DE  00A5               	movwf	??_main^(0+384)
  2265  02DF  0825               	movf	??_main^(0+384),w
  2266  02E0  1283               	bcf	3,5	;RP0=0, select bank2
  2267  02E1  1703               	bsf	3,6	;RP1=1, select bank2
  2268  02E2  00CC               	movwf	(main@send_data^(0+256)+7)
  2269                           
  2270                           ;main.c: 144: send_data[8] = temp_buf_c[1];
  2271  02E3  0856               	movf	(main@temp_buf_c^(0+256)+1),w
  2272  02E4  1683               	bsf	3,5	;RP0=1, select bank3
  2273  02E5  1703               	bsf	3,6	;RP1=1, select bank3
  2274  02E6  00A5               	movwf	??_main^(0+384)
  2275  02E7  0825               	movf	??_main^(0+384),w
  2276  02E8  1283               	bcf	3,5	;RP0=0, select bank2
  2277  02E9  1703               	bsf	3,6	;RP1=1, select bank2
  2278  02EA  00CD               	movwf	(main@send_data^(0+256)+8)
  2279                           
  2280                           ;main.c: 148: adcon_shift = 0b10101000;
  2281  02EB  30A8               	movlw	168
  2282  02EC  1683               	bsf	3,5	;RP0=1, select bank3
  2283  02ED  1703               	bsf	3,6	;RP1=1, select bank3
  2284  02EE  00A5               	movwf	??_main^(0+384)
  2285  02EF  0825               	movf	??_main^(0+384),w
  2286  02F0  1283               	bcf	3,5	;RP0=0, select bank2
  2287  02F1  1703               	bsf	3,6	;RP1=1, select bank2
  2288  02F2  00DE               	movwf	main@adcon_shift^(0+256)
  2289                           
  2290                           ;main.c: 149: volt = get_adcon(adcon_shift);
  2291  02F3  085E               	movf	main@adcon_shift^(0+256),w
  2292  02F4  120A  158A  261F  120A  118A  	fcall	_get_adcon
  2293  02F9  1683               	bsf	3,5	;RP0=1, select bank1
  2294  02FA  1303               	bcf	3,6	;RP1=0, select bank1
  2295  02FB  083C               	movf	?_get_adcon^(0+128),w
  2296  02FC  1283               	bcf	3,5	;RP0=0, select bank2
  2297  02FD  1703               	bsf	3,6	;RP1=1, select bank2
  2298  02FE  00DB               	movwf	main@volt^(0+256)
  2299  02FF  1683               	bsf	3,5	;RP0=1, select bank1
  2300  0300  1303               	bcf	3,6	;RP1=0, select bank1
  2301  0301  083D               	movf	(?_get_adcon+1)^(0+128),w
  2302  0302  1283               	bcf	3,5	;RP0=0, select bank2
  2303  0303  1703               	bsf	3,6	;RP1=1, select bank2
  2304  0304  00DC               	movwf	(main@volt+1)^(0+256)
  2305  0305  1683               	bsf	3,5	;RP0=1, select bank1
  2306  0306  1303               	bcf	3,6	;RP1=0, select bank1
  2307  0307  083E               	movf	(?_get_adcon+2)^(0+128),w
  2308  0308  1283               	bcf	3,5	;RP0=0, select bank2
  2309  0309  1703               	bsf	3,6	;RP1=1, select bank2
  2310  030A  00DD               	movwf	(main@volt+2)^(0+256)
  2311                           
  2312                           ;main.c: 150: light5 = get_pt(volt);
  2313  030B  085B               	movf	main@volt^(0+256),w
  2314  030C  1683               	bsf	3,5	;RP0=1, select bank1
  2315  030D  1303               	bcf	3,6	;RP1=0, select bank1
  2316  030E  00CC               	movwf	get_pt@volt^(0+128)
  2317  030F  1283               	bcf	3,5	;RP0=0, select bank2
  2318  0310  1703               	bsf	3,6	;RP1=1, select bank2
  2319  0311  085C               	movf	(main@volt+1)^(0+256),w
  2320  0312  1683               	bsf	3,5	;RP0=1, select bank1
  2321  0313  1303               	bcf	3,6	;RP1=0, select bank1
  2322  0314  00CD               	movwf	(get_pt@volt+1)^(0+128)
  2323  0315  1283               	bcf	3,5	;RP0=0, select bank2
  2324  0316  1703               	bsf	3,6	;RP1=1, select bank2
  2325  0317  085D               	movf	(main@volt+2)^(0+256),w
  2326  0318  1683               	bsf	3,5	;RP0=1, select bank1
  2327  0319  1303               	bcf	3,6	;RP1=0, select bank1
  2328  031A  00CE               	movwf	(get_pt@volt+2)^(0+128)
  2329  031B  120A  118A  2760  120A  118A  	fcall	_get_pt
  2330  0320  1683               	bsf	3,5	;RP0=1, select bank1
  2331  0321  1303               	bcf	3,6	;RP1=0, select bank1
  2332  0322  084C               	movf	?_get_pt^(0+128),w
  2333  0323  1283               	bcf	3,5	;RP0=0, select bank2
  2334  0324  1703               	bsf	3,6	;RP1=1, select bank2
  2335  0325  00BD               	movwf	main@light5^(0+256)
  2336  0326  1683               	bsf	3,5	;RP0=1, select bank1
  2337  0327  1303               	bcf	3,6	;RP1=0, select bank1
  2338  0328  084D               	movf	(?_get_pt+1)^(0+128),w
  2339  0329  1283               	bcf	3,5	;RP0=0, select bank2
  2340  032A  1703               	bsf	3,6	;RP1=1, select bank2
  2341  032B  00BE               	movwf	(main@light5+1)^(0+256)
  2342  032C  1683               	bsf	3,5	;RP0=1, select bank1
  2343  032D  1303               	bcf	3,6	;RP1=0, select bank1
  2344  032E  084E               	movf	(?_get_pt+2)^(0+128),w
  2345  032F  1283               	bcf	3,5	;RP0=0, select bank2
  2346  0330  1703               	bsf	3,6	;RP1=1, select bank2
  2347  0331  00BF               	movwf	(main@light5+2)^(0+256)
  2348                           
  2349                           ;main.c: 151: temp_c = (char)light5;
  2350  0332  083D               	movf	main@light5^(0+256),w
  2351  0333  1683               	bsf	3,5	;RP0=1, select bank1
  2352  0334  1303               	bcf	3,6	;RP1=0, select bank1
  2353  0335  00A0               	movwf	___fttol@f1^(0+128)
  2354  0336  1283               	bcf	3,5	;RP0=0, select bank2
  2355  0337  1703               	bsf	3,6	;RP1=1, select bank2
  2356  0338  083E               	movf	(main@light5+1)^(0+256),w
  2357  0339  1683               	bsf	3,5	;RP0=1, select bank1
  2358  033A  1303               	bcf	3,6	;RP1=0, select bank1
  2359  033B  00A1               	movwf	(___fttol@f1+1)^(0+128)
  2360  033C  1283               	bcf	3,5	;RP0=0, select bank2
  2361  033D  1703               	bsf	3,6	;RP1=1, select bank2
  2362  033E  083F               	movf	(main@light5+2)^(0+256),w
  2363  033F  1683               	bsf	3,5	;RP0=1, select bank1
  2364  0340  1303               	bcf	3,6	;RP1=0, select bank1
  2365  0341  00A2               	movwf	(___fttol@f1+2)^(0+128)
  2366  0342  120A  118A  26D2  120A  118A  	fcall	___fttol
  2367  0347  1683               	bsf	3,5	;RP0=1, select bank1
  2368  0348  1303               	bcf	3,6	;RP1=0, select bank1
  2369  0349  0820               	movf	?___fttol^(0+128),w
  2370  034A  1683               	bsf	3,5	;RP0=1, select bank3
  2371  034B  1703               	bsf	3,6	;RP1=1, select bank3
  2372  034C  00A5               	movwf	??_main^(0+384)
  2373  034D  0825               	movf	??_main^(0+384),w
  2374  034E  1283               	bcf	3,5	;RP0=0, select bank2
  2375  034F  1703               	bsf	3,6	;RP1=1, select bank2
  2376  0350  00DF               	movwf	main@temp_c^(0+256)
  2377                           
  2378                           ;main.c: 152: number_to_string_char(temp_buf_c, temp_c);
  2379  0351  085F               	movf	main@temp_c^(0+256),w
  2380  0352  1683               	bsf	3,5	;RP0=1, select bank3
  2381  0353  1703               	bsf	3,6	;RP1=1, select bank3
  2382  0354  00A5               	movwf	??_main^(0+384)
  2383  0355  0825               	movf	??_main^(0+384),w
  2384  0356  1683               	bsf	3,5	;RP0=1, select bank1
  2385  0357  1303               	bcf	3,6	;RP1=0, select bank1
  2386  0358  00BA               	movwf	number_to_string_char@num^(0+128)
  2387  0359  3055               	movlw	(low (main@temp_buf_c| (0+256)))& (0+255)
  2388  035A  120A  158A  24F1  120A  118A  	fcall	_number_to_string_char
  2389                           
  2390                           ;main.c: 155: send_data[9] = temp_buf_c[0];
  2391  035F  1283               	bcf	3,5	;RP0=0, select bank2
  2392  0360  1703               	bsf	3,6	;RP1=1, select bank2
  2393  0361  0855               	movf	main@temp_buf_c^(0+256),w
  2394  0362  1683               	bsf	3,5	;RP0=1, select bank3
  2395  0363  1703               	bsf	3,6	;RP1=1, select bank3
  2396  0364  00A5               	movwf	??_main^(0+384)
  2397  0365  0825               	movf	??_main^(0+384),w
  2398  0366  1283               	bcf	3,5	;RP0=0, select bank2
  2399  0367  1703               	bsf	3,6	;RP1=1, select bank2
  2400  0368  00CE               	movwf	(main@send_data^(0+256)+9)
  2401                           
  2402                           ;main.c: 156: send_data[10] = temp_buf_c[1];
  2403  0369  0856               	movf	(main@temp_buf_c^(0+256)+1),w
  2404  036A  1683               	bsf	3,5	;RP0=1, select bank3
  2405  036B  1703               	bsf	3,6	;RP1=1, select bank3
  2406  036C  00A5               	movwf	??_main^(0+384)
  2407  036D  0825               	movf	??_main^(0+384),w
  2408  036E  1283               	bcf	3,5	;RP0=0, select bank2
  2409  036F  1703               	bsf	3,6	;RP1=1, select bank2
  2410  0370  00CF               	movwf	(main@send_data^(0+256)+10)
  2411                           
  2412                           ;main.c: 160: adcon_shift = 0b10110000;
  2413  0371  30B0               	movlw	176
  2414  0372  1683               	bsf	3,5	;RP0=1, select bank3
  2415  0373  1703               	bsf	3,6	;RP1=1, select bank3
  2416  0374  00A5               	movwf	??_main^(0+384)
  2417  0375  0825               	movf	??_main^(0+384),w
  2418  0376  1283               	bcf	3,5	;RP0=0, select bank2
  2419  0377  1703               	bsf	3,6	;RP1=1, select bank2
  2420  0378  00DE               	movwf	main@adcon_shift^(0+256)
  2421                           
  2422                           ;main.c: 161: volt = get_adcon(adcon_shift);
  2423  0379  085E               	movf	main@adcon_shift^(0+256),w
  2424  037A  120A  158A  261F  120A  118A  	fcall	_get_adcon
  2425  037F  1683               	bsf	3,5	;RP0=1, select bank1
  2426  0380  1303               	bcf	3,6	;RP1=0, select bank1
  2427  0381  083C               	movf	?_get_adcon^(0+128),w
  2428  0382  1283               	bcf	3,5	;RP0=0, select bank2
  2429  0383  1703               	bsf	3,6	;RP1=1, select bank2
  2430  0384  00DB               	movwf	main@volt^(0+256)
  2431  0385  1683               	bsf	3,5	;RP0=1, select bank1
  2432  0386  1303               	bcf	3,6	;RP1=0, select bank1
  2433  0387  083D               	movf	(?_get_adcon+1)^(0+128),w
  2434  0388  1283               	bcf	3,5	;RP0=0, select bank2
  2435  0389  1703               	bsf	3,6	;RP1=1, select bank2
  2436  038A  00DC               	movwf	(main@volt+1)^(0+256)
  2437  038B  1683               	bsf	3,5	;RP0=1, select bank1
  2438  038C  1303               	bcf	3,6	;RP1=0, select bank1
  2439  038D  083E               	movf	(?_get_adcon+2)^(0+128),w
  2440  038E  1283               	bcf	3,5	;RP0=0, select bank2
  2441  038F  1703               	bsf	3,6	;RP1=1, select bank2
  2442  0390  00DD               	movwf	(main@volt+2)^(0+256)
  2443                           
  2444                           ;main.c: 162: light6 = get_pt(volt);
  2445  0391  085B               	movf	main@volt^(0+256),w
  2446  0392  1683               	bsf	3,5	;RP0=1, select bank1
  2447  0393  1303               	bcf	3,6	;RP1=0, select bank1
  2448  0394  00CC               	movwf	get_pt@volt^(0+128)
  2449  0395  1283               	bcf	3,5	;RP0=0, select bank2
  2450  0396  1703               	bsf	3,6	;RP1=1, select bank2
  2451  0397  085C               	movf	(main@volt+1)^(0+256),w
  2452  0398  1683               	bsf	3,5	;RP0=1, select bank1
  2453  0399  1303               	bcf	3,6	;RP1=0, select bank1
  2454  039A  00CD               	movwf	(get_pt@volt+1)^(0+128)
  2455  039B  1283               	bcf	3,5	;RP0=0, select bank2
  2456  039C  1703               	bsf	3,6	;RP1=1, select bank2
  2457  039D  085D               	movf	(main@volt+2)^(0+256),w
  2458  039E  1683               	bsf	3,5	;RP0=1, select bank1
  2459  039F  1303               	bcf	3,6	;RP1=0, select bank1
  2460  03A0  00CE               	movwf	(get_pt@volt+2)^(0+128)
  2461  03A1  120A  118A  2760  120A  118A  	fcall	_get_pt
  2462  03A6  1683               	bsf	3,5	;RP0=1, select bank1
  2463  03A7  1303               	bcf	3,6	;RP1=0, select bank1
  2464  03A8  084C               	movf	?_get_pt^(0+128),w
  2465  03A9  1283               	bcf	3,5	;RP0=0, select bank2
  2466  03AA  1703               	bsf	3,6	;RP1=1, select bank2
  2467  03AB  00C0               	movwf	main@light6^(0+256)
  2468  03AC  1683               	bsf	3,5	;RP0=1, select bank1
  2469  03AD  1303               	bcf	3,6	;RP1=0, select bank1
  2470  03AE  084D               	movf	(?_get_pt+1)^(0+128),w
  2471  03AF  1283               	bcf	3,5	;RP0=0, select bank2
  2472  03B0  1703               	bsf	3,6	;RP1=1, select bank2
  2473  03B1  00C1               	movwf	(main@light6+1)^(0+256)
  2474  03B2  1683               	bsf	3,5	;RP0=1, select bank1
  2475  03B3  1303               	bcf	3,6	;RP1=0, select bank1
  2476  03B4  084E               	movf	(?_get_pt+2)^(0+128),w
  2477  03B5  1283               	bcf	3,5	;RP0=0, select bank2
  2478  03B6  1703               	bsf	3,6	;RP1=1, select bank2
  2479  03B7  00C2               	movwf	(main@light6+2)^(0+256)
  2480                           
  2481                           ;main.c: 163: temp_c = (char)light6;
  2482  03B8  0840               	movf	main@light6^(0+256),w
  2483  03B9  1683               	bsf	3,5	;RP0=1, select bank1
  2484  03BA  1303               	bcf	3,6	;RP1=0, select bank1
  2485  03BB  00A0               	movwf	___fttol@f1^(0+128)
  2486  03BC  1283               	bcf	3,5	;RP0=0, select bank2
  2487  03BD  1703               	bsf	3,6	;RP1=1, select bank2
  2488  03BE  0841               	movf	(main@light6+1)^(0+256),w
  2489  03BF  1683               	bsf	3,5	;RP0=1, select bank1
  2490  03C0  1303               	bcf	3,6	;RP1=0, select bank1
  2491  03C1  00A1               	movwf	(___fttol@f1+1)^(0+128)
  2492  03C2  1283               	bcf	3,5	;RP0=0, select bank2
  2493  03C3  1703               	bsf	3,6	;RP1=1, select bank2
  2494  03C4  0842               	movf	(main@light6+2)^(0+256),w
  2495  03C5  1683               	bsf	3,5	;RP0=1, select bank1
  2496  03C6  1303               	bcf	3,6	;RP1=0, select bank1
  2497  03C7  00A2               	movwf	(___fttol@f1+2)^(0+128)
  2498  03C8  120A  118A  26D2  120A  118A  	fcall	___fttol
  2499  03CD  1683               	bsf	3,5	;RP0=1, select bank1
  2500  03CE  1303               	bcf	3,6	;RP1=0, select bank1
  2501  03CF  0820               	movf	?___fttol^(0+128),w
  2502  03D0  1683               	bsf	3,5	;RP0=1, select bank3
  2503  03D1  1703               	bsf	3,6	;RP1=1, select bank3
  2504  03D2  00A5               	movwf	??_main^(0+384)
  2505  03D3  0825               	movf	??_main^(0+384),w
  2506  03D4  1283               	bcf	3,5	;RP0=0, select bank2
  2507  03D5  1703               	bsf	3,6	;RP1=1, select bank2
  2508  03D6  00DF               	movwf	main@temp_c^(0+256)
  2509                           
  2510                           ;main.c: 164: number_to_string_char(temp_buf_c, temp_c);
  2511  03D7  085F               	movf	main@temp_c^(0+256),w
  2512  03D8  1683               	bsf	3,5	;RP0=1, select bank3
  2513  03D9  1703               	bsf	3,6	;RP1=1, select bank3
  2514  03DA  00A5               	movwf	??_main^(0+384)
  2515  03DB  0825               	movf	??_main^(0+384),w
  2516  03DC  1683               	bsf	3,5	;RP0=1, select bank1
  2517  03DD  1303               	bcf	3,6	;RP1=0, select bank1
  2518  03DE  00BA               	movwf	number_to_string_char@num^(0+128)
  2519  03DF  3055               	movlw	(low (main@temp_buf_c| (0+256)))& (0+255)
  2520  03E0  120A  158A  24F1  120A  118A  	fcall	_number_to_string_char
  2521                           
  2522                           ;main.c: 167: send_data[11] = temp_buf_c[0];
  2523  03E5  1283               	bcf	3,5	;RP0=0, select bank2
  2524  03E6  1703               	bsf	3,6	;RP1=1, select bank2
  2525  03E7  0855               	movf	main@temp_buf_c^(0+256),w
  2526  03E8  1683               	bsf	3,5	;RP0=1, select bank3
  2527  03E9  1703               	bsf	3,6	;RP1=1, select bank3
  2528  03EA  00A5               	movwf	??_main^(0+384)
  2529  03EB  0825               	movf	??_main^(0+384),w
  2530  03EC  1283               	bcf	3,5	;RP0=0, select bank2
  2531  03ED  1703               	bsf	3,6	;RP1=1, select bank2
  2532  03EE  00D0               	movwf	(main@send_data^(0+256)+11)
  2533                           
  2534                           ;main.c: 168: send_data[12] = temp_buf_c[1];
  2535  03EF  0856               	movf	(main@temp_buf_c^(0+256)+1),w
  2536  03F0  1683               	bsf	3,5	;RP0=1, select bank3
  2537  03F1  1703               	bsf	3,6	;RP1=1, select bank3
  2538  03F2  00A5               	movwf	??_main^(0+384)
  2539  03F3  0825               	movf	??_main^(0+384),w
  2540  03F4  1283               	bcf	3,5	;RP0=0, select bank2
  2541  03F5  1703               	bsf	3,6	;RP1=1, select bank2
  2542  03F6  00D1               	movwf	(main@send_data^(0+256)+12)
  2543                           
  2544                           ;main.c: 171: send_data[13] = '\0';
  2545  03F7  01D2               	clrf	(main@send_data^(0+256)+13)
  2546                           
  2547                           ;main.c: 172: break;
  2548  03F8  2C9D               	goto	l3145
  2549  03F9                     l3129:	
  2550                           ;main.c: 175: case 1:
  2551                           
  2552                           
  2553                           ;main.c: 179: send_data[0] = 'V';
  2554  03F9  3056               	movlw	86
  2555  03FA  1683               	bsf	3,5	;RP0=1, select bank3
  2556  03FB  1703               	bsf	3,6	;RP1=1, select bank3
  2557  03FC  00A5               	movwf	??_main^(0+384)
  2558  03FD  0825               	movf	??_main^(0+384),w
  2559  03FE  1283               	bcf	3,5	;RP0=0, select bank2
  2560  03FF  1703               	bsf	3,6	;RP1=1, select bank2
  2561  0400  00C5               	movwf	main@send_data^(0+256)
  2562                           
  2563                           ;main.c: 180: adcon_shift = 0b10111001;
  2564  0401  30B9               	movlw	185
  2565  0402  1683               	bsf	3,5	;RP0=1, select bank3
  2566  0403  1703               	bsf	3,6	;RP1=1, select bank3
  2567  0404  00A5               	movwf	??_main^(0+384)
  2568  0405  0825               	movf	??_main^(0+384),w
  2569  0406  1283               	bcf	3,5	;RP0=0, select bank2
  2570  0407  1703               	bsf	3,6	;RP1=1, select bank2
  2571  0408  00DE               	movwf	main@adcon_shift^(0+256)
  2572                           
  2573                           ;main.c: 192: volt = get_adcon(adcon_shift);
  2574  0409  085E               	movf	main@adcon_shift^(0+256),w
  2575  040A  120A  158A  261F  120A  118A  	fcall	_get_adcon
  2576  040F  1683               	bsf	3,5	;RP0=1, select bank1
  2577  0410  1303               	bcf	3,6	;RP1=0, select bank1
  2578  0411  083C               	movf	?_get_adcon^(0+128),w
  2579  0412  1283               	bcf	3,5	;RP0=0, select bank2
  2580  0413  1703               	bsf	3,6	;RP1=1, select bank2
  2581  0414  00DB               	movwf	main@volt^(0+256)
  2582  0415  1683               	bsf	3,5	;RP0=1, select bank1
  2583  0416  1303               	bcf	3,6	;RP1=0, select bank1
  2584  0417  083D               	movf	(?_get_adcon+1)^(0+128),w
  2585  0418  1283               	bcf	3,5	;RP0=0, select bank2
  2586  0419  1703               	bsf	3,6	;RP1=1, select bank2
  2587  041A  00DC               	movwf	(main@volt+1)^(0+256)
  2588  041B  1683               	bsf	3,5	;RP0=1, select bank1
  2589  041C  1303               	bcf	3,6	;RP1=0, select bank1
  2590  041D  083E               	movf	(?_get_adcon+2)^(0+128),w
  2591  041E  1283               	bcf	3,5	;RP0=0, select bank2
  2592  041F  1703               	bsf	3,6	;RP1=1, select bank2
  2593  0420  00DD               	movwf	(main@volt+2)^(0+256)
  2594                           
  2595                           ;main.c: 193: temp = volt * 10.0;
  2596  0421  3000               	movlw	0
  2597  0422  1683               	bsf	3,5	;RP0=1, select bank1
  2598  0423  1303               	bcf	3,6	;RP1=0, select bank1
  2599  0424  00AC               	movwf	___ftmul@f1^(0+128)
  2600  0425  3020               	movlw	32
  2601  0426  00AD               	movwf	(___ftmul@f1+1)^(0+128)
  2602  0427  3041               	movlw	65
  2603  0428  00AE               	movwf	(___ftmul@f1+2)^(0+128)
  2604  0429  1283               	bcf	3,5	;RP0=0, select bank2
  2605  042A  1703               	bsf	3,6	;RP1=1, select bank2
  2606  042B  085B               	movf	main@volt^(0+256),w
  2607  042C  1683               	bsf	3,5	;RP0=1, select bank1
  2608  042D  1303               	bcf	3,6	;RP1=0, select bank1
  2609  042E  00AF               	movwf	___ftmul@f2^(0+128)
  2610  042F  1283               	bcf	3,5	;RP0=0, select bank2
  2611  0430  1703               	bsf	3,6	;RP1=1, select bank2
  2612  0431  085C               	movf	(main@volt+1)^(0+256),w
  2613  0432  1683               	bsf	3,5	;RP0=1, select bank1
  2614  0433  1303               	bcf	3,6	;RP1=0, select bank1
  2615  0434  00B0               	movwf	(___ftmul@f2+1)^(0+128)
  2616  0435  1283               	bcf	3,5	;RP0=0, select bank2
  2617  0436  1703               	bsf	3,6	;RP1=1, select bank2
  2618  0437  085D               	movf	(main@volt+2)^(0+256),w
  2619  0438  1683               	bsf	3,5	;RP0=1, select bank1
  2620  0439  1303               	bcf	3,6	;RP1=0, select bank1
  2621  043A  00B1               	movwf	(___ftmul@f2+2)^(0+128)
  2622  043B  120A  118A  2547  120A  118A  	fcall	___ftmul
  2623  0440  1683               	bsf	3,5	;RP0=1, select bank1
  2624  0441  1303               	bcf	3,6	;RP1=0, select bank1
  2625  0442  082C               	movf	?___ftmul^(0+128),w
  2626  0443  1283               	bcf	3,5	;RP0=0, select bank2
  2627  0444  1703               	bsf	3,6	;RP1=1, select bank2
  2628  0445  00AE               	movwf	main@temp^(0+256)
  2629  0446  1683               	bsf	3,5	;RP0=1, select bank1
  2630  0447  1303               	bcf	3,6	;RP1=0, select bank1
  2631  0448  082D               	movf	(?___ftmul+1)^(0+128),w
  2632  0449  1283               	bcf	3,5	;RP0=0, select bank2
  2633  044A  1703               	bsf	3,6	;RP1=1, select bank2
  2634  044B  00AF               	movwf	(main@temp+1)^(0+256)
  2635  044C  1683               	bsf	3,5	;RP0=1, select bank1
  2636  044D  1303               	bcf	3,6	;RP1=0, select bank1
  2637  044E  082E               	movf	(?___ftmul+2)^(0+128),w
  2638  044F  1283               	bcf	3,5	;RP0=0, select bank2
  2639  0450  1703               	bsf	3,6	;RP1=1, select bank2
  2640  0451  00B0               	movwf	(main@temp+2)^(0+256)
  2641                           
  2642                           ;main.c: 194: temp_c = (char)temp;
  2643  0452  082E               	movf	main@temp^(0+256),w
  2644  0453  1683               	bsf	3,5	;RP0=1, select bank1
  2645  0454  1303               	bcf	3,6	;RP1=0, select bank1
  2646  0455  00A0               	movwf	___fttol@f1^(0+128)
  2647  0456  1283               	bcf	3,5	;RP0=0, select bank2
  2648  0457  1703               	bsf	3,6	;RP1=1, select bank2
  2649  0458  082F               	movf	(main@temp+1)^(0+256),w
  2650  0459  1683               	bsf	3,5	;RP0=1, select bank1
  2651  045A  1303               	bcf	3,6	;RP1=0, select bank1
  2652  045B  00A1               	movwf	(___fttol@f1+1)^(0+128)
  2653  045C  1283               	bcf	3,5	;RP0=0, select bank2
  2654  045D  1703               	bsf	3,6	;RP1=1, select bank2
  2655  045E  0830               	movf	(main@temp+2)^(0+256),w
  2656  045F  1683               	bsf	3,5	;RP0=1, select bank1
  2657  0460  1303               	bcf	3,6	;RP1=0, select bank1
  2658  0461  00A2               	movwf	(___fttol@f1+2)^(0+128)
  2659  0462  120A  118A  26D2  120A  118A  	fcall	___fttol
  2660  0467  1683               	bsf	3,5	;RP0=1, select bank1
  2661  0468  1303               	bcf	3,6	;RP1=0, select bank1
  2662  0469  0820               	movf	?___fttol^(0+128),w
  2663  046A  1683               	bsf	3,5	;RP0=1, select bank3
  2664  046B  1703               	bsf	3,6	;RP1=1, select bank3
  2665  046C  00A5               	movwf	??_main^(0+384)
  2666  046D  0825               	movf	??_main^(0+384),w
  2667  046E  1283               	bcf	3,5	;RP0=0, select bank2
  2668  046F  1703               	bsf	3,6	;RP1=1, select bank2
  2669  0470  00DF               	movwf	main@temp_c^(0+256)
  2670                           
  2671                           ;main.c: 195: number_to_string_char(temp_buf_c, temp_c);
  2672  0471  085F               	movf	main@temp_c^(0+256),w
  2673  0472  1683               	bsf	3,5	;RP0=1, select bank3
  2674  0473  1703               	bsf	3,6	;RP1=1, select bank3
  2675  0474  00A5               	movwf	??_main^(0+384)
  2676  0475  0825               	movf	??_main^(0+384),w
  2677  0476  1683               	bsf	3,5	;RP0=1, select bank1
  2678  0477  1303               	bcf	3,6	;RP1=0, select bank1
  2679  0478  00BA               	movwf	number_to_string_char@num^(0+128)
  2680  0479  3055               	movlw	(low (main@temp_buf_c| (0+256)))& (0+255)
  2681  047A  120A  158A  24F1  120A  118A  	fcall	_number_to_string_char
  2682                           
  2683                           ;main.c: 198: send_data[1] = temp_buf_c[0];
  2684  047F  1283               	bcf	3,5	;RP0=0, select bank2
  2685  0480  1703               	bsf	3,6	;RP1=1, select bank2
  2686  0481  0855               	movf	main@temp_buf_c^(0+256),w
  2687  0482  1683               	bsf	3,5	;RP0=1, select bank3
  2688  0483  1703               	bsf	3,6	;RP1=1, select bank3
  2689  0484  00A5               	movwf	??_main^(0+384)
  2690  0485  0825               	movf	??_main^(0+384),w
  2691  0486  1283               	bcf	3,5	;RP0=0, select bank2
  2692  0487  1703               	bsf	3,6	;RP1=1, select bank2
  2693  0488  00C6               	movwf	(main@send_data^(0+256)+1)
  2694                           
  2695                           ;main.c: 199: send_data[2] = temp_buf_c[1];
  2696  0489  0856               	movf	(main@temp_buf_c^(0+256)+1),w
  2697  048A  1683               	bsf	3,5	;RP0=1, select bank3
  2698  048B  1703               	bsf	3,6	;RP1=1, select bank3
  2699  048C  00A5               	movwf	??_main^(0+384)
  2700  048D  0825               	movf	??_main^(0+384),w
  2701  048E  1283               	bcf	3,5	;RP0=0, select bank2
  2702  048F  1703               	bsf	3,6	;RP1=1, select bank2
  2703  0490  00C7               	movwf	(main@send_data^(0+256)+2)
  2704                           
  2705                           ;main.c: 203: send_data[3] = '\0';
  2706  0491  01C8               	clrf	(main@send_data^(0+256)+3)
  2707                           
  2708                           ;main.c: 207: }
  2709                           
  2710                           ;main.c: 204: break;
  2711  0492  2C9D               	goto	l3145
  2712  0493                     l3143:	
  2713  0493  1283               	bcf	3,5	;RP0=0, select bank2
  2714  0494  1703               	bsf	3,6	;RP1=1, select bank2
  2715  0495  0854               	movf	main@counter^(0+256),w
  2716                           
  2717                           ; Switch size 1, requested type "space"
  2718                           ; Number of cases is 2, Range of values is 0 to 1
  2719                           ; switch strategies available:
  2720                           ; Name         Instructions Cycles
  2721                           ; simple_byte            7     4 (average)
  2722                           ; direct_byte           14     8 (fixed)
  2723                           ; jumptable            260     6 (fixed)
  2724                           ;	Chosen strategy is simple_byte
  2725  0496  3A00               	xorlw	0	; case 0
  2726  0497  1903               	skipnz
  2727  0498  28A7               	goto	l3059
  2728  0499  3A01               	xorlw	1	; case 1
  2729  049A  1903               	skipnz
  2730  049B  2BF9               	goto	l3129
  2731  049C  2C9D               	goto	l3145
  2732  049D                     l3145:	
  2733                           
  2734                           ;main.c: 210: if(counter == 0){
  2735  049D  0854               	movf	main@counter^(0+256),w
  2736  049E  1D03               	btfss	3,2
  2737  049F  2CA3               	goto	l3149
  2738                           
  2739                           ;main.c: 211: counter = 1;
  2740  04A0  01D4               	clrf	main@counter^(0+256)
  2741  04A1  0AD4               	incf	main@counter^(0+256),f
  2742                           
  2743                           ;main.c: 212: }
  2744  04A2  2CA4               	goto	l3151
  2745  04A3                     l3149:	
  2746                           
  2747                           ;main.c: 213: else{
  2748                           ;main.c: 214: counter = 0;
  2749  04A3  01D4               	clrf	main@counter^(0+256)
  2750  04A4                     l3151:	
  2751                           
  2752                           ;main.c: 215: }
  2753                           ;main.c: 216: put_string(send_data);
  2754  04A4  3045               	movlw	(low (main@send_data| (0+256)))& (0+255)
  2755  04A5  1683               	bsf	3,5	;RP0=1, select bank1
  2756  04A6  1303               	bcf	3,6	;RP1=0, select bank1
  2757  04A7  00A1               	movwf	put_string@str^(0+128)
  2758  04A8  3001               	movlw	1
  2759  04A9  00A2               	movwf	(put_string@str+1)^(0+128)
  2760  04AA  120A  158A  2393  120A  118A  	fcall	_put_string
  2761                           
  2762                           ;main.c: 217: put_char('\r');
  2763  04AF  300D               	movlw	13
  2764  04B0  120A  158A  213A  120A  118A  	fcall	_put_char
  2765                           
  2766                           ;main.c: 218: put_char('\n');
  2767  04B5  300A               	movlw	10
  2768  04B6  120A  158A  213A  120A  118A  	fcall	_put_char
  2769                           
  2770                           ;main.c: 222: put_string("Slave Program Start!\r\n");
  2771  04BB  3004               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2772  04BC  1683               	bsf	3,5	;RP0=1, select bank1
  2773  04BD  1303               	bcf	3,6	;RP1=0, select bank1
  2774  04BE  00A1               	movwf	put_string@str^(0+128)
  2775  04BF  3080               	movlw	128
  2776  04C0  00A2               	movwf	(put_string@str+1)^(0+128)
  2777  04C1  120A  158A  2393  120A  118A  	fcall	_put_string
  2778                           
  2779                           ;main.c: 225: RB7 = 1;
  2780  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  2781  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  2782  04C8  1786               	bsf	6,7	;volatile
  2783                           
  2784                           ;main.c: 226: _delay((unsigned long)((100)*(20000000/4000.0)));
  2785  04C9  3003               	movlw	3
  2786  04CA  1683               	bsf	3,5	;RP0=1, select bank3
  2787  04CB  1703               	bsf	3,6	;RP1=1, select bank3
  2788  04CC  00A7               	movwf	(??_main^(0+384)+2)
  2789  04CD  308A               	movlw	138
  2790  04CE  00A6               	movwf	(??_main^(0+384)+1)
  2791  04CF  3056               	movlw	86
  2792  04D0  00A5               	movwf	??_main^(0+384)
  2793  04D1                     u3417:	
  2794  04D1  0BA5               	decfsz	??_main^(0+384),f
  2795  04D2  2CD1               	goto	u3417
  2796  04D3  0BA6               	decfsz	(??_main^(0+384)+1),f
  2797  04D4  2CD1               	goto	u3417
  2798  04D5  0BA7               	decfsz	(??_main^(0+384)+2),f
  2799  04D6  2CD1               	goto	u3417
  2800  04D7  2CD8               	nop2
  2801                           
  2802                           ;main.c: 227: RB7 = 0;
  2803  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  2804  04D9  1303               	bcf	3,6	;RP1=0, select bank0
  2805  04DA  1386               	bcf	6,7	;volatile
  2806                           
  2807                           ;main.c: 228: _delay((unsigned long)((100)*(20000000/4000.0)));
  2808  04DB  3003               	movlw	3
  2809  04DC  1683               	bsf	3,5	;RP0=1, select bank3
  2810  04DD  1703               	bsf	3,6	;RP1=1, select bank3
  2811  04DE  00A7               	movwf	(??_main^(0+384)+2)
  2812  04DF  308A               	movlw	138
  2813  04E0  00A6               	movwf	(??_main^(0+384)+1)
  2814  04E1  3056               	movlw	86
  2815  04E2  00A5               	movwf	??_main^(0+384)
  2816  04E3                     u3427:	
  2817  04E3  0BA5               	decfsz	??_main^(0+384),f
  2818  04E4  2CE3               	goto	u3427
  2819  04E5  0BA6               	decfsz	(??_main^(0+384)+1),f
  2820  04E6  2CE3               	goto	u3427
  2821  04E7  0BA7               	decfsz	(??_main^(0+384)+2),f
  2822  04E8  2CE3               	goto	u3427
  2823  04E9  2CEA               	nop2
  2824  04EA                     l3167:	
  2825                           ;main.c: 230: while(rx_packet_status == FALSE);
  2826                           
  2827  04EA  1683               	bsf	3,5	;RP0=1, select bank3
  2828  04EB  1703               	bsf	3,6	;RP1=1, select bank3
  2829  04EC  0829               	movf	_rx_packet_status^(0+384),w
  2830  04ED  1903               	btfsc	3,2
  2831  04EE  2CEA               	goto	l3167
  2832                           
  2833                           ;main.c: 232: extract_receive_packet(&r_data_type, r_data, &r_data_len);
  2834  04EF  3010               	movlw	(low (main@r_data| (0+256)))& (0+255)
  2835  04F0  00A5               	movwf	??_main^(0+384)
  2836  04F1  0825               	movf	??_main^(0+384),w
  2837  04F2  1683               	bsf	3,5	;RP0=1, select bank1
  2838  04F3  1303               	bcf	3,6	;RP1=0, select bank1
  2839  04F4  00A2               	movwf	extract_receive_packet@p_data_buf^(0+128)
  2840  04F5  3044               	movlw	(low (main@r_data_len| (0+256)))& (0+255)
  2841  04F6  1683               	bsf	3,5	;RP0=1, select bank3
  2842  04F7  1703               	bsf	3,6	;RP1=1, select bank3
  2843  04F8  00A6               	movwf	(??_main+1)^(0+384)
  2844  04F9  0826               	movf	(??_main+1)^(0+384),w
  2845  04FA  1683               	bsf	3,5	;RP0=1, select bank1
  2846  04FB  1303               	bcf	3,6	;RP1=0, select bank1
  2847  04FC  00A3               	movwf	extract_receive_packet@p_data_len_buf^(0+128)
  2848  04FD  3043               	movlw	(low (main@r_data_type| (0+256)))& (0+255)
  2849  04FE  120A  158A  2476  120A  118A  	fcall	_extract_receive_packet
  2850                           
  2851                           ;main.c: 233: put_char(r_data[0]);
  2852  0503  1283               	bcf	3,5	;RP0=0, select bank2
  2853  0504  1703               	bsf	3,6	;RP1=1, select bank2
  2854  0505  0810               	movf	main@r_data^(0+256),w
  2855  0506  120A  158A  213A  120A  118A  	fcall	_put_char
  2856                           
  2857                           ;main.c: 234: put_char(r_data[1]);
  2858  050B  1283               	bcf	3,5	;RP0=0, select bank2
  2859  050C  1703               	bsf	3,6	;RP1=1, select bank2
  2860  050D  0811               	movf	(main@r_data^(0+256)+1),w
  2861  050E  120A  158A  213A  120A  118A  	fcall	_put_char
  2862                           
  2863                           ;main.c: 236: if(r_data[1] == 0x02)
  2864  0513  3002               	movlw	2
  2865  0514  1283               	bcf	3,5	;RP0=0, select bank2
  2866  0515  1703               	bsf	3,6	;RP1=1, select bank2
  2867  0516  0611               	xorwf	(main@r_data^(0+256)+1),w
  2868  0517  1D03               	btfss	3,2
  2869  0518  2854               	goto	l3029
  2870                           
  2871                           ;main.c: 237: {
  2872                           ;main.c: 238: _delay((unsigned long)((500)*(20000000/4000.0)));
  2873  0519  300D               	movlw	13
  2874  051A  1683               	bsf	3,5	;RP0=1, select bank3
  2875  051B  1703               	bsf	3,6	;RP1=1, select bank3
  2876  051C  00A7               	movwf	(??_main^(0+384)+2)
  2877  051D  30AF               	movlw	175
  2878  051E  00A6               	movwf	(??_main^(0+384)+1)
  2879  051F  30C1               	movlw	193
  2880  0520  00A5               	movwf	??_main^(0+384)
  2881  0521                     u3437:	
  2882  0521  0BA5               	decfsz	??_main^(0+384),f
  2883  0522  2D21               	goto	u3437
  2884  0523  0BA6               	decfsz	(??_main^(0+384)+1),f
  2885  0524  2D21               	goto	u3437
  2886  0525  0BA7               	decfsz	(??_main^(0+384)+2),f
  2887  0526  2D21               	goto	u3437
  2888  0527  0000               	nop
  2889                           
  2890                           ;main.c: 242: sent_data_set(send_data, sizeof(send_data), sizeof(uint8_t));
  2891  0528  300F               	movlw	15
  2892  0529  1683               	bsf	3,5	;RP0=1, select bank3
  2893  052A  1703               	bsf	3,6	;RP1=1, select bank3
  2894  052B  00A5               	movwf	??_main^(0+384)
  2895  052C  0825               	movf	??_main^(0+384),w
  2896  052D  1683               	bsf	3,5	;RP0=1, select bank1
  2897  052E  1303               	bcf	3,6	;RP1=0, select bank1
  2898  052F  00B2               	movwf	sent_data_set@data_len^(0+128)
  2899  0530  01B3               	clrf	sent_data_set@byte_of_type^(0+128)
  2900  0531  0AB3               	incf	sent_data_set@byte_of_type^(0+128),f
  2901  0532  3045               	movlw	(low (main@send_data| (0+256)))& (0+255)
  2902  0533  120A  158A  26D5  120A  118A  	fcall	_sent_data_set
  2903                           
  2904                           ;main.c: 243: send_data_slave(DATA, DATA_END);
  2905  0538  3010               	movlw	16
  2906  0539  1683               	bsf	3,5	;RP0=1, select bank3
  2907  053A  1703               	bsf	3,6	;RP1=1, select bank3
  2908  053B  00A5               	movwf	??_main^(0+384)
  2909  053C  0825               	movf	??_main^(0+384),w
  2910  053D  1683               	bsf	3,5	;RP0=1, select bank1
  2911  053E  1303               	bcf	3,6	;RP1=0, select bank1
  2912  053F  00A0               	movwf	send_data_slave@data_end_command^(0+128)
  2913  0540  3002               	movlw	2
  2914  0541  120A  158A  2154  120A  118A  	fcall	_send_data_slave
  2915  0546  2854               	goto	l3029
  2916  0547                     __end_of_main:	
  2917                           ;main.c: 245: }
  2918                           ;main.c: 246: }
  2919                           ;main.c: 248: return 0;
  2920                           ;	Return value of _main is never used
  2921                           
  2922                           
  2923                           	psect	text1
  2924  0947                     __ptext1:	
  2925 ;; *************** function _uart_init *****************
  2926 ;; Defined at:
  2927 ;;		line 38 in file "uart.c"
  2928 ;; Parameters:    Size  Location     Type
  2929 ;;		None
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;		None
  2932 ;; Return value:  Size  Location     Type
  2933 ;;		None               void
  2934 ;; Registers used:
  2935 ;;		wreg
  2936 ;; Tracked objects:
  2937 ;;		On entry : 0/0
  2938 ;;		On exit  : 0/0
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2941 ;;      Params:         0       0       0       0       0
  2942 ;;      Locals:         0       0       0       0       0
  2943 ;;      Temps:          0       0       0       0       0
  2944 ;;      Totals:         0       0       0       0       0
  2945 ;;Total ram usage:        0 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; Hardware stack levels required when called:    3
  2948 ;; This function calls:
  2949 ;;		Nothing
  2950 ;; This function is called by:
  2951 ;;		_main
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           
  2956                           ;psect for function _uart_init
  2957  0947                     _uart_init:	
  2958                           
  2959                           ;uart.c: 41: TRISC6 = 0;
  2960                           
  2961                           ;incstack = 0
  2962                           ; Regs used in _uart_init: [wreg]
  2963  0947  1683               	bsf	3,5	;RP0=1, select bank1
  2964  0948  1303               	bcf	3,6	;RP1=0, select bank1
  2965  0949  1307               	bcf	7,6	;volatile
  2966                           
  2967                           ;uart.c: 42: TRISC7 = 1;
  2968  094A  1787               	bsf	7,7	;volatile
  2969                           
  2970                           ;uart.c: 45: SPBRG = ((unsigned char)((20000000 / (9600) / 16) - 1));
  2971  094B  3081               	movlw	129
  2972  094C  0099               	movwf	25	;volatile
  2973                           
  2974                           ;uart.c: 46: TXSTA = ((1 << 5) | (1 << 2));
  2975  094D  3024               	movlw	36
  2976  094E  0098               	movwf	24	;volatile
  2977                           
  2978                           ;uart.c: 47: RCSTA = ((1 << 7) | (1 << 4));
  2979  094F  3090               	movlw	144
  2980  0950  1283               	bcf	3,5	;RP0=0, select bank0
  2981  0951  1303               	bcf	3,6	;RP1=0, select bank0
  2982  0952  0098               	movwf	24	;volatile
  2983  0953  0008               	return
  2984  0954                     __end_of_uart_init:	
  2985                           
  2986                           	psect	text2
  2987  0AC1                     __ptext2:	
  2988 ;; *************** function _spi_slave_start *****************
  2989 ;; Defined at:
  2990 ;;		line 39 in file "spi_slave.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  spi_isr         1    wreg     enum E1101
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;  spi_isr         1    0[BANK1 ] enum E1101
  2995 ;; Return value:  Size  Location     Type
  2996 ;;		None               void
  2997 ;; Registers used:
  2998 ;;		wreg, status,2, status,0
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3004 ;;      Params:         0       0       0       0       0
  3005 ;;      Locals:         0       0       1       0       0
  3006 ;;      Temps:          0       0       0       0       0
  3007 ;;      Totals:         0       0       1       0       0
  3008 ;;Total ram usage:        1 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:    3
  3011 ;; This function calls:
  3012 ;;		Nothing
  3013 ;; This function is called by:
  3014 ;;		_main
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018                           
  3019                           ;psect for function _spi_slave_start
  3020  0AC1                     _spi_slave_start:	
  3021                           
  3022                           ;incstack = 0
  3023                           ; Regs used in _spi_slave_start: [wreg+status,2+status,0]
  3024                           ;spi_slave_start@spi_isr stored from wreg
  3025  0AC1  1683               	bsf	3,5	;RP0=1, select bank1
  3026  0AC2  1303               	bcf	3,6	;RP1=0, select bank1
  3027  0AC3  00A0               	movwf	spi_slave_start@spi_isr^(0+128)
  3028                           
  3029                           ;spi_slave.c: 42: TRISC3 = 1;
  3030  0AC4  1587               	bsf	7,3	;volatile
  3031                           
  3032                           ;spi_slave.c: 43: TRISC4 = 1;
  3033  0AC5  1607               	bsf	7,4	;volatile
  3034                           
  3035                           ;spi_slave.c: 44: TRISC5 = 0;
  3036  0AC6  1287               	bcf	7,5	;volatile
  3037                           
  3038                           ;spi_slave.c: 45: TRISA5 = 1;
  3039  0AC7  1685               	bsf	5,5	;volatile
  3040                           
  3041                           ;spi_slave.c: 46: ADCON0bits.ADON = 0;
  3042  0AC8  1283               	bcf	3,5	;RP0=0, select bank0
  3043  0AC9  1303               	bcf	3,6	;RP1=0, select bank0
  3044  0ACA  101F               	bcf	31,0	;volatile
  3045                           
  3046                           ;spi_slave.c: 47: ADCON1bits.PCFG3 = 0;
  3047  0ACB  1683               	bsf	3,5	;RP0=1, select bank1
  3048  0ACC  1303               	bcf	3,6	;RP1=0, select bank1
  3049  0ACD  119F               	bcf	31,3	;volatile
  3050                           
  3051                           ;spi_slave.c: 48: ADCON1bits.PCFG2 = 1;
  3052  0ACE  151F               	bsf	31,2	;volatile
  3053                           
  3054                           ;spi_slave.c: 49: ADCON1bits.PCFG1 = 1;
  3055  0ACF  149F               	bsf	31,1	;volatile
  3056                           
  3057                           ;spi_slave.c: 52: SSPCONbits.SSPEN = 0;
  3058  0AD0  1283               	bcf	3,5	;RP0=0, select bank0
  3059  0AD1  1303               	bcf	3,6	;RP1=0, select bank0
  3060  0AD2  1294               	bcf	20,5	;volatile
  3061                           
  3062                           ;spi_slave.c: 55: SSPSTATbits.SMP = 0;
  3063  0AD3  1683               	bsf	3,5	;RP0=1, select bank1
  3064  0AD4  1303               	bcf	3,6	;RP1=0, select bank1
  3065  0AD5  1394               	bcf	20,7	;volatile
  3066                           
  3067                           ;spi_slave.c: 56: SSPCONbits.CKP = 0;
  3068  0AD6  1283               	bcf	3,5	;RP0=0, select bank0
  3069  0AD7  1303               	bcf	3,6	;RP1=0, select bank0
  3070  0AD8  1214               	bcf	20,4	;volatile
  3071                           
  3072                           ;spi_slave.c: 57: SSPSTATbits.CKE = 0;
  3073  0AD9  1683               	bsf	3,5	;RP0=1, select bank1
  3074  0ADA  1303               	bcf	3,6	;RP1=0, select bank1
  3075  0ADB  1314               	bcf	20,6	;volatile
  3076                           
  3077                           ;spi_slave.c: 60: SSPCONbits.SSPM3 = 0;
  3078  0ADC  1283               	bcf	3,5	;RP0=0, select bank0
  3079  0ADD  1303               	bcf	3,6	;RP1=0, select bank0
  3080  0ADE  1194               	bcf	20,3	;volatile
  3081                           
  3082                           ;spi_slave.c: 61: SSPCONbits.SSPM2 = 1;
  3083  0ADF  1514               	bsf	20,2	;volatile
  3084                           
  3085                           ;spi_slave.c: 62: SSPCONbits.SSPM1 = 0;
  3086  0AE0  1094               	bcf	20,1	;volatile
  3087                           
  3088                           ;spi_slave.c: 63: SSPCONbits.SSPM0 = 0;
  3089  0AE1  1014               	bcf	20,0	;volatile
  3090                           
  3091                           ;spi_slave.c: 66: if(spi_isr == SPI_ISR_ENABLE)
  3092  0AE2  1683               	bsf	3,5	;RP0=1, select bank1
  3093  0AE3  1303               	bcf	3,6	;RP1=0, select bank1
  3094  0AE4  0820               	movf	spi_slave_start@spi_isr^(0+128),w
  3095  0AE5  1D03               	btfss	3,2
  3096  0AE6  2AEF               	goto	l213
  3097                           
  3098                           ;spi_slave.c: 67: {
  3099                           ;spi_slave.c: 68: PIR1bits.SSPIF = 0;
  3100  0AE7  1283               	bcf	3,5	;RP0=0, select bank0
  3101  0AE8  1303               	bcf	3,6	;RP1=0, select bank0
  3102  0AE9  118C               	bcf	12,3	;volatile
  3103                           
  3104                           ;spi_slave.c: 69: PIE1bits.SSPIE = 1;
  3105  0AEA  1683               	bsf	3,5	;RP0=1, select bank1
  3106  0AEB  1303               	bcf	3,6	;RP1=0, select bank1
  3107  0AEC  158C               	bsf	12,3	;volatile
  3108                           
  3109                           ;spi_slave.c: 70: INTCONbits.PEIE = 1;
  3110  0AED  170B               	bsf	11,6	;volatile
  3111                           
  3112                           ;spi_slave.c: 71: INTCONbits.GIE = 1;
  3113  0AEE  178B               	bsf	11,7	;volatile
  3114  0AEF                     l213:	
  3115                           
  3116                           ;spi_slave.c: 72: }
  3117                           ;spi_slave.c: 75: SSPCONbits.SSPEN = 1;
  3118  0AEF  1283               	bcf	3,5	;RP0=0, select bank0
  3119  0AF0  1303               	bcf	3,6	;RP1=0, select bank0
  3120  0AF1  1694               	bsf	20,5	;volatile
  3121  0AF2  0008               	return
  3122  0AF3                     __end_of_spi_slave_start:	
  3123                           
  3124                           	psect	text3
  3125  0ED5                     __ptext3:	
  3126 ;; *************** function _sent_data_set *****************
  3127 ;; Defined at:
  3128 ;;		line 100 in file "protocol.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;  p_data          1    wreg     PTR void 
  3131 ;;		 -> main@send_data(15), 
  3132 ;;  data_len        1   18[BANK1 ] unsigned char 
  3133 ;;  byte_of_type    1   19[BANK1 ] unsigned char 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  p_data          1   25[BANK1 ] PTR void 
  3136 ;;		 -> main@send_data(15), 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  1    wreg      unsigned char 
  3139 ;; Registers used:
  3140 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3146 ;;      Params:         0       0       2       0       0
  3147 ;;      Locals:         0       0       1       0       0
  3148 ;;      Temps:          0       0       5       0       0
  3149 ;;      Totals:         0       0       8       0       0
  3150 ;;Total ram usage:        8 bytes
  3151 ;; Hardware stack levels used:    1
  3152 ;; Hardware stack levels required when called:    5
  3153 ;; This function calls:
  3154 ;;		___wmul
  3155 ;;		_double_data_set
  3156 ;;		_uint16_data_set
  3157 ;;		_uint8_data_set
  3158 ;; This function is called by:
  3159 ;;		_main
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           
  3164                           ;psect for function _sent_data_set
  3165  0ED5                     _sent_data_set:	
  3166                           
  3167                           ;incstack = 0
  3168                           ; Regs used in _sent_data_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3169                           ;sent_data_set@p_data stored from wreg
  3170  0ED5  1683               	bsf	3,5	;RP0=1, select bank1
  3171  0ED6  1303               	bcf	3,6	;RP1=0, select bank1
  3172  0ED7  00B9               	movwf	sent_data_set@p_data^(0+128)
  3173                           
  3174                           ;protocol.c: 103: if((30 - tx_packet.payload_len) - (data_len * (byte_of_type + 1)) < 0)
  3175  0ED8  0833               	movf	sent_data_set@byte_of_type^(0+128),w
  3176  0ED9  3E01               	addlw	1
  3177  0EDA  00A0               	movwf	___wmul@multiplier^(0+128)
  3178  0EDB  3000               	movlw	0
  3179  0EDC  1803               	skipnc
  3180  0EDD  3001               	movlw	1
  3181  0EDE  00A1               	movwf	(___wmul@multiplier^(0+128)+1)
  3182  0EDF  0832               	movf	sent_data_set@data_len^(0+128),w
  3183  0EE0  00B4               	movwf	??_sent_data_set^(0+128)
  3184  0EE1  01B5               	clrf	(??_sent_data_set^(0+128)+1)
  3185  0EE2  0834               	movf	??_sent_data_set^(0+128),w
  3186  0EE3  00A2               	movwf	___wmul@multiplicand^(0+128)
  3187  0EE4  0835               	movf	(??_sent_data_set+1)^(0+128),w
  3188  0EE5  00A3               	movwf	(___wmul@multiplicand+1)^(0+128)
  3189  0EE6  120A  158A  2215  120A  158A  	fcall	___wmul
  3190  0EEB  1683               	bsf	3,5	;RP0=1, select bank1
  3191  0EEC  1303               	bcf	3,6	;RP1=0, select bank1
  3192  0EED  0850               	movf	(_tx_packet^(0+128)+1),w
  3193  0EEE  0720               	addwf	?___wmul^(0+128),w
  3194  0EEF  00B6               	movwf	(??_sent_data_set+2)^(0+128)
  3195  0EF0  0821               	movf	(?___wmul+1)^(0+128),w
  3196  0EF1  1803               	skipnc
  3197  0EF2  0A21               	incf	(?___wmul+1)^(0+128),w
  3198  0EF3  00B7               	movwf	((??_sent_data_set+2)^(0+128)+1)
  3199  0EF4  09B6               	comf	(??_sent_data_set+2)^(0+128),f
  3200  0EF5  09B7               	comf	((??_sent_data_set+2)^(0+128)+1),f
  3201  0EF6  0AB6               	incf	(??_sent_data_set+2)^(0+128),f
  3202  0EF7  1903               	skipnz
  3203  0EF8  0AB7               	incf	((??_sent_data_set+2)^(0+128)+1),f
  3204  0EF9  301E               	movlw	30
  3205  0EFA  0736               	addwf	(??_sent_data_set+2)^(0+128),w
  3206  0EFB  0837               	movf	(??_sent_data_set+3)^(0+128),w
  3207  0EFC  1803               	skipnc
  3208  0EFD  0A37               	incf	(??_sent_data_set+3)^(0+128),w
  3209  0EFE  3E00               	addlw	0
  3210  0EFF  00B8               	movwf	(??_sent_data_set+4)^(0+128)
  3211  0F00  1BB8               	btfsc	(??_sent_data_set+4)^(0+128),7
  3212  0F01  0008               	return
  3213  0F02  2F22               	goto	l2977
  3214  0F03                     l2969:	
  3215                           ;protocol.c: 110: {
  3216                           ;protocol.c: 111: case 1:
  3217                           
  3218                           ;protocol.c: 106: }
  3219                           ;protocol.c: 109: switch(byte_of_type)
  3220                           
  3221                           ;protocol.c: 104: {
  3222                           ;protocol.c: 105: return 0xff;
  3223                           ;	Return value of _sent_data_set is never used
  3224                           
  3225                           
  3226                           ;protocol.c: 112: uint8_data_set((uint8_t *)p_data, data_len);
  3227  0F03  0832               	movf	sent_data_set@data_len^(0+128),w
  3228  0F04  00B4               	movwf	??_sent_data_set^(0+128)
  3229  0F05  0834               	movf	??_sent_data_set^(0+128),w
  3230  0F06  00A0               	movwf	uint8_data_set@data_len^(0+128)
  3231  0F07  0839               	movf	sent_data_set@p_data^(0+128),w
  3232  0F08  120A  118A  27D8   	fcall	_uint8_data_set
  3233                           
  3234                           ;protocol.c: 113: break;
  3235  0F0B  0008               	return
  3236  0F0C                     l2971:	
  3237                           ;protocol.c: 114: case 2:
  3238                           
  3239                           
  3240                           ;protocol.c: 115: uint16_data_set((uint16_t *)p_data, data_len);
  3241  0F0C  1683               	bsf	3,5	;RP0=1, select bank1
  3242  0F0D  1303               	bcf	3,6	;RP1=0, select bank1
  3243  0F0E  0832               	movf	sent_data_set@data_len^(0+128),w
  3244  0F0F  00B4               	movwf	??_sent_data_set^(0+128)
  3245  0F10  0834               	movf	??_sent_data_set^(0+128),w
  3246  0F11  00A5               	movwf	uint16_data_set@data_len^(0+128)
  3247  0F12  0839               	movf	sent_data_set@p_data^(0+128),w
  3248  0F13  120A  158A  2328   	fcall	_uint16_data_set
  3249                           
  3250                           ;protocol.c: 116: break;
  3251  0F16  0008               	return
  3252  0F17                     l2973:	
  3253                           ;protocol.c: 117: case 4:
  3254                           
  3255                           
  3256                           ;protocol.c: 118: double_data_set((double *)p_data, data_len);
  3257  0F17  1683               	bsf	3,5	;RP0=1, select bank1
  3258  0F18  1303               	bcf	3,6	;RP1=0, select bank1
  3259  0F19  0832               	movf	sent_data_set@data_len^(0+128),w
  3260  0F1A  00B4               	movwf	??_sent_data_set^(0+128)
  3261  0F1B  0834               	movf	??_sent_data_set^(0+128),w
  3262  0F1C  00A9               	movwf	double_data_set@data_len^(0+128)
  3263  0F1D  0839               	movf	sent_data_set@p_data^(0+128),w
  3264  0F1E  120A  158A  22F3   	fcall	_double_data_set
  3265                           
  3266                           ;protocol.c: 122: }
  3267                           
  3268                           ;protocol.c: 121: return 0xff;
  3269                           ;	Return value of _sent_data_set is never used
  3270                           
  3271                           ;protocol.c: 120: default:
  3272                           
  3273                           ;protocol.c: 119: break;
  3274  0F21  0008               	return
  3275  0F22                     l2977:	
  3276  0F22  1683               	bsf	3,5	;RP0=1, select bank1
  3277  0F23  1303               	bcf	3,6	;RP1=0, select bank1
  3278  0F24  0833               	movf	sent_data_set@byte_of_type^(0+128),w
  3279                           
  3280                           ; Switch size 1, requested type "space"
  3281                           ; Number of cases is 3, Range of values is 1 to 4
  3282                           ; switch strategies available:
  3283                           ; Name         Instructions Cycles
  3284                           ; simple_byte           10     6 (average)
  3285                           ; direct_byte           23    11 (fixed)
  3286                           ; jumptable            263     9 (fixed)
  3287                           ;	Chosen strategy is simple_byte
  3288  0F25  3A01               	xorlw	1	; case 1
  3289  0F26  1903               	skipnz
  3290  0F27  2F03               	goto	l2969
  3291  0F28  3A03               	xorlw	3	; case 2
  3292  0F29  1903               	skipnz
  3293  0F2A  2F0C               	goto	l2971
  3294  0F2B  3A06               	xorlw	6	; case 4
  3295  0F2C  1903               	skipnz
  3296  0F2D  2F17               	goto	l2973
  3297  0F2E  2F2F               	goto	l104
  3298  0F2F                     l104:	
  3299                           ;protocol.c: 125: return (uint8_t)(30 - tx_packet.payload_len);
  3300                           ;	Return value of _sent_data_set is never used
  3301                           
  3302  0F2F  0008               	return
  3303  0F30                     __end_of_sent_data_set:	
  3304                           
  3305                           	psect	text4
  3306  07D8                     __ptext4:	
  3307 ;; *************** function _uint8_data_set *****************
  3308 ;; Defined at:
  3309 ;;		line 370 in file "protocol.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;  p_data          1    wreg     PTR unsigned char 
  3312 ;;		 -> main@send_data(15), 
  3313 ;;  data_len        1    0[BANK1 ] unsigned char 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;  p_data          1    2[BANK1 ] PTR unsigned char 
  3316 ;;		 -> main@send_data(15), 
  3317 ;; Return value:  Size  Location     Type
  3318 ;;		None               void
  3319 ;; Registers used:
  3320 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3326 ;;      Params:         0       0       1       0       0
  3327 ;;      Locals:         0       0       1       0       0
  3328 ;;      Temps:          0       0       1       0       0
  3329 ;;      Totals:         0       0       3       0       0
  3330 ;;Total ram usage:        3 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    3
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_sent_data_set
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           
  3341                           ;psect for function _uint8_data_set
  3342  07D8                     _uint8_data_set:	
  3343                           
  3344                           ;incstack = 0
  3345                           ; Regs used in _uint8_data_set: [wreg-fsr0h+status,2+status,0]
  3346                           ;uint8_data_set@p_data stored from wreg
  3347  07D8  1683               	bsf	3,5	;RP0=1, select bank1
  3348  07D9  1303               	bcf	3,6	;RP1=0, select bank1
  3349  07DA  00A2               	movwf	uint8_data_set@p_data^(0+128)
  3350  07DB                     l151:	
  3351                           ;protocol.c: 372: while(data_len)
  3352                           
  3353  07DB  0820               	movf	uint8_data_set@data_len^(0+128),w
  3354  07DC  1903               	btfsc	3,2
  3355  07DD  0008               	return
  3356                           
  3357                           ;protocol.c: 373: {
  3358                           ;protocol.c: 374: tx_packet.payload[tx_packet.payload_len++] = 1;
  3359  07DE  0850               	movf	(_tx_packet^(0+128)+1),w
  3360  07DF  3ED1               	addlw	(low ((_tx_packet| 0+2)))& (0+255)
  3361  07E0  0084               	movwf	4
  3362  07E1  1383               	bcf	3,7	;select IRP bank1
  3363  07E2  0180               	clrf	0
  3364  07E3  0A80               	incf	0,f
  3365  07E4  3001               	movlw	1
  3366  07E5  00A1               	movwf	??_uint8_data_set^(0+128)
  3367  07E6  0821               	movf	??_uint8_data_set^(0+128),w
  3368  07E7  07D0               	addwf	(_tx_packet^(0+128)+1),f
  3369                           
  3370                           ;protocol.c: 375: tx_packet.payload[tx_packet.payload_len++] = *p_data++;
  3371  07E8  0822               	movf	uint8_data_set@p_data^(0+128),w
  3372  07E9  0084               	movwf	4
  3373  07EA  1783               	bsf	3,7	;select IRP bank2
  3374  07EB  0800               	movf	0,w
  3375  07EC  00A1               	movwf	??_uint8_data_set^(0+128)
  3376  07ED  0850               	movf	(_tx_packet^(0+128)+1),w
  3377  07EE  3ED1               	addlw	(low ((_tx_packet| 0+2)))& (0+255)
  3378  07EF  0084               	movwf	4
  3379  07F0  0821               	movf	??_uint8_data_set^(0+128),w
  3380  07F1  1383               	bcf	3,7	;select IRP bank1
  3381  07F2  0080               	movwf	0
  3382  07F3  3001               	movlw	1
  3383  07F4  00A1               	movwf	??_uint8_data_set^(0+128)
  3384  07F5  0821               	movf	??_uint8_data_set^(0+128),w
  3385  07F6  07A2               	addwf	uint8_data_set@p_data^(0+128),f
  3386  07F7  3001               	movlw	1
  3387  07F8  00A1               	movwf	??_uint8_data_set^(0+128)
  3388  07F9  0821               	movf	??_uint8_data_set^(0+128),w
  3389  07FA  07D0               	addwf	(_tx_packet^(0+128)+1),f
  3390                           
  3391                           ;protocol.c: 376: data_len--;
  3392  07FB  3001               	movlw	1
  3393  07FC  02A0               	subwf	uint8_data_set@data_len^(0+128),f
  3394  07FD  2FDB               	goto	l151
  3395  07FE                     __end_of_uint8_data_set:	
  3396                           
  3397                           	psect	text5
  3398  0B28                     __ptext5:	
  3399 ;; *************** function _uint16_data_set *****************
  3400 ;; Defined at:
  3401 ;;		line 392 in file "protocol.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;  p_data          1    wreg     PTR unsigned int 
  3404 ;;		 -> main@send_data(15), 
  3405 ;;  data_len        1    5[BANK1 ] unsigned char 
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;  p_data          1   10[BANK1 ] PTR unsigned int 
  3408 ;;		 -> main@send_data(15), 
  3409 ;;  buf             3    7[BANK1 ] unsigned char [3]
  3410 ;;  i               1   11[BANK1 ] unsigned char 
  3411 ;; Return value:  Size  Location     Type
  3412 ;;		None               void
  3413 ;; Registers used:
  3414 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3415 ;; Tracked objects:
  3416 ;;		On entry : 0/0
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3420 ;;      Params:         0       0       1       0       0
  3421 ;;      Locals:         0       0       5       0       0
  3422 ;;      Temps:          0       0       1       0       0
  3423 ;;      Totals:         0       0       7       0       0
  3424 ;;Total ram usage:        7 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    4
  3427 ;; This function calls:
  3428 ;;		_uint16_to_byte_array
  3429 ;; This function is called by:
  3430 ;;		_sent_data_set
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           
  3435                           ;psect for function _uint16_data_set
  3436  0B28                     _uint16_data_set:	
  3437                           
  3438                           ;incstack = 0
  3439                           ; Regs used in _uint16_data_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3440                           ;uint16_data_set@p_data stored from wreg
  3441  0B28  1683               	bsf	3,5	;RP0=1, select bank1
  3442  0B29  1303               	bcf	3,6	;RP1=0, select bank1
  3443  0B2A  00AA               	movwf	uint16_data_set@p_data^(0+128)
  3444  0B2B                     l157:	
  3445                           ;protocol.c: 394: uint8_t buf[3];
  3446                           ;protocol.c: 395: uint8_t i;
  3447                           ;protocol.c: 397: while(data_len)
  3448                           
  3449  0B2B  0825               	movf	uint16_data_set@data_len^(0+128),w
  3450  0B2C  1903               	btfsc	3,2
  3451  0B2D  0008               	return
  3452                           
  3453                           ;protocol.c: 398: {
  3454                           ;protocol.c: 399: uint16_to_byte_array(p_data++, buf);
  3455  0B2E  30A7               	movlw	(low (uint16_data_set@buf| 0))& (0+255)
  3456  0B2F  00A6               	movwf	??_uint16_data_set^(0+128)
  3457  0B30  0826               	movf	??_uint16_data_set^(0+128),w
  3458  0B31  00A0               	movwf	uint16_to_byte_array@p_data_array^(0+128)
  3459  0B32  082A               	movf	uint16_data_set@p_data^(0+128),w
  3460  0B33  120A  158A  2264  120A  158A  	fcall	_uint16_to_byte_array
  3461  0B38  3002               	movlw	2
  3462  0B39  1683               	bsf	3,5	;RP0=1, select bank1
  3463  0B3A  1303               	bcf	3,6	;RP1=0, select bank1
  3464  0B3B  00A6               	movwf	??_uint16_data_set^(0+128)
  3465  0B3C  0826               	movf	??_uint16_data_set^(0+128),w
  3466  0B3D  07AA               	addwf	uint16_data_set@p_data^(0+128),f
  3467                           
  3468                           ;protocol.c: 401: for(i = 0; i < 3; i++)
  3469  0B3E  01AB               	clrf	uint16_data_set@i^(0+128)
  3470  0B3F  3003               	movlw	3
  3471  0B40  022B               	subwf	uint16_data_set@i^(0+128),w
  3472  0B41  1803               	btfsc	3,0
  3473  0B42  2B5A               	goto	l2673
  3474  0B43                     l2665:	
  3475                           
  3476                           ;protocol.c: 402: {
  3477                           ;protocol.c: 403: tx_packet.payload[tx_packet.payload_len++] = buf[i];
  3478  0B43  082B               	movf	uint16_data_set@i^(0+128),w
  3479  0B44  3EA7               	addlw	(low (uint16_data_set@buf| 0))& (0+255)
  3480  0B45  0084               	movwf	4
  3481  0B46  1383               	bcf	3,7	;select IRP bank1
  3482  0B47  0800               	movf	0,w
  3483  0B48  00A6               	movwf	??_uint16_data_set^(0+128)
  3484  0B49  0850               	movf	(_tx_packet^(0+128)+1),w
  3485  0B4A  3ED1               	addlw	(low ((_tx_packet| 0+2)))& (0+255)
  3486  0B4B  0084               	movwf	4
  3487  0B4C  0826               	movf	??_uint16_data_set^(0+128),w
  3488  0B4D  0080               	movwf	0
  3489  0B4E  3001               	movlw	1
  3490  0B4F  00A6               	movwf	??_uint16_data_set^(0+128)
  3491  0B50  0826               	movf	??_uint16_data_set^(0+128),w
  3492  0B51  07D0               	addwf	(_tx_packet^(0+128)+1),f
  3493  0B52  3001               	movlw	1
  3494  0B53  00A6               	movwf	??_uint16_data_set^(0+128)
  3495  0B54  0826               	movf	??_uint16_data_set^(0+128),w
  3496  0B55  07AB               	addwf	uint16_data_set@i^(0+128),f
  3497  0B56  3003               	movlw	3
  3498  0B57  022B               	subwf	uint16_data_set@i^(0+128),w
  3499  0B58  1C03               	skipc
  3500  0B59  2B43               	goto	l2665
  3501  0B5A                     l2673:	
  3502                           
  3503                           ;protocol.c: 404: }
  3504                           ;protocol.c: 405: data_len--;
  3505  0B5A  3001               	movlw	1
  3506  0B5B  02A5               	subwf	uint16_data_set@data_len^(0+128),f
  3507  0B5C  2B2B               	goto	l157
  3508  0B5D                     __end_of_uint16_data_set:	
  3509                           
  3510                           	psect	text6
  3511  0A64                     __ptext6:	
  3512 ;; *************** function _uint16_to_byte_array *****************
  3513 ;; Defined at:
  3514 ;;		line 450 in file "protocol.c"
  3515 ;; Parameters:    Size  Location     Type
  3516 ;;  p_data          1    wreg     PTR unsigned int 
  3517 ;;		 -> main@send_data(15), 
  3518 ;;  p_data_array    1    0[BANK1 ] PTR unsigned char 
  3519 ;;		 -> uint16_data_set@buf(3), 
  3520 ;; Auto vars:     Size  Location     Type
  3521 ;;  p_data          1    4[BANK1 ] PTR unsigned int 
  3522 ;;		 -> main@send_data(15), 
  3523 ;; Return value:  Size  Location     Type
  3524 ;;		None               void
  3525 ;; Registers used:
  3526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3532 ;;      Params:         0       0       1       0       0
  3533 ;;      Locals:         0       0       1       0       0
  3534 ;;      Temps:          0       0       3       0       0
  3535 ;;      Totals:         0       0       5       0       0
  3536 ;;Total ram usage:        5 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    3
  3539 ;; This function calls:
  3540 ;;		Nothing
  3541 ;; This function is called by:
  3542 ;;		_uint16_data_set
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           
  3547                           ;psect for function _uint16_to_byte_array
  3548  0A64                     _uint16_to_byte_array:	
  3549                           
  3550                           ;incstack = 0
  3551                           ; Regs used in _uint16_to_byte_array: [wreg-fsr0h+status,2+status,0+pclath]
  3552                           ;uint16_to_byte_array@p_data stored from wreg
  3553  0A64  1683               	bsf	3,5	;RP0=1, select bank1
  3554  0A65  1303               	bcf	3,6	;RP1=0, select bank1
  3555  0A66  00A4               	movwf	uint16_to_byte_array@p_data^(0+128)
  3556                           
  3557                           ;protocol.c: 452: const uint16_t bit_mask = 0b0000000011111111;
  3558                           ;protocol.c: 455: p_data_array[0] = 2;
  3559  0A67  3002               	movlw	2
  3560  0A68  00A1               	movwf	??_uint16_to_byte_array^(0+128)
  3561  0A69  0820               	movf	uint16_to_byte_array@p_data_array^(0+128),w
  3562  0A6A  0084               	movwf	4
  3563  0A6B  0821               	movf	??_uint16_to_byte_array^(0+128),w
  3564  0A6C  1383               	bcf	3,7	;select IRP bank0
  3565  0A6D  0080               	movwf	0
  3566                           
  3567                           ;protocol.c: 456: p_data_array[1] = (uint8_t)(*p_data >> 8);
  3568  0A6E  0824               	movf	uint16_to_byte_array@p_data^(0+128),w
  3569  0A6F  0084               	movwf	4
  3570  0A70  1783               	bsf	3,7	;select IRP bank2
  3571  0A71  0800               	movf	0,w
  3572  0A72  00A1               	movwf	??_uint16_to_byte_array^(0+128)
  3573  0A73  0A84               	incf	4,f
  3574  0A74  0800               	movf	0,w
  3575  0A75  00A2               	movwf	(??_uint16_to_byte_array^(0+128)+1)
  3576  0A76  0822               	movf	(??_uint16_to_byte_array+1)^(0+128),w
  3577  0A77  00A3               	movwf	(??_uint16_to_byte_array+2)^(0+128)
  3578  0A78  0A20               	incf	uint16_to_byte_array@p_data_array^(0+128),w
  3579  0A79  0084               	movwf	4
  3580  0A7A  0823               	movf	(??_uint16_to_byte_array+2)^(0+128),w
  3581  0A7B  1383               	bcf	3,7	;select IRP bank0
  3582  0A7C  0080               	movwf	0
  3583                           
  3584                           ;protocol.c: 457: p_data_array[2] = (uint8_t)(*p_data & bit_mask);
  3585  0A7D  3001               	movlw	low (uint16_to_byte_array@bit_mask-__stringbase)
  3586  0A7E  0084               	movwf	4
  3587  0A7F  120A  158A  200A   	fcall	stringdir
  3588  0A82  00A1               	movwf	??_uint16_to_byte_array^(0+128)
  3589  0A83  0824               	movf	uint16_to_byte_array@p_data^(0+128),w
  3590  0A84  0084               	movwf	4
  3591  0A85  1783               	bsf	3,7	;select IRP bank2
  3592  0A86  0800               	movf	0,w
  3593  0A87  0521               	andwf	??_uint16_to_byte_array^(0+128),w
  3594  0A88  00A2               	movwf	(??_uint16_to_byte_array+1)^(0+128)
  3595  0A89  0820               	movf	uint16_to_byte_array@p_data_array^(0+128),w
  3596  0A8A  3E02               	addlw	2
  3597  0A8B  0084               	movwf	4
  3598  0A8C  0822               	movf	(??_uint16_to_byte_array+1)^(0+128),w
  3599  0A8D  1383               	bcf	3,7	;select IRP bank0
  3600  0A8E  0080               	movwf	0
  3601  0A8F  0008               	return
  3602  0A90                     __end_of_uint16_to_byte_array:	
  3603                           
  3604                           	psect	text7
  3605  0AF3                     __ptext7:	
  3606 ;; *************** function _double_data_set *****************
  3607 ;; Defined at:
  3608 ;;		line 421 in file "protocol.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;  p_data          1    wreg     PTR 
  3611 ;;		 -> main@send_data(15), 
  3612 ;;  data_len        1    9[BANK1 ] unsigned char 
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;  p_data          1   16[BANK1 ] PTR 
  3615 ;;		 -> main@send_data(15), 
  3616 ;;  buf             5   11[BANK1 ] unsigned char [5]
  3617 ;;  i               1   17[BANK1 ] unsigned char 
  3618 ;; Return value:  Size  Location     Type
  3619 ;;		None               void
  3620 ;; Registers used:
  3621 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3627 ;;      Params:         0       0       1       0       0
  3628 ;;      Locals:         0       0       7       0       0
  3629 ;;      Temps:          0       0       1       0       0
  3630 ;;      Totals:         0       0       9       0       0
  3631 ;;Total ram usage:        9 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:    4
  3634 ;; This function calls:
  3635 ;;		_double_to_byte_array
  3636 ;; This function is called by:
  3637 ;;		_sent_data_set
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           
  3642                           ;psect for function _double_data_set
  3643  0AF3                     _double_data_set:	
  3644                           
  3645                           ;incstack = 0
  3646                           ; Regs used in _double_data_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3647                           ;double_data_set@p_data stored from wreg
  3648  0AF3  1683               	bsf	3,5	;RP0=1, select bank1
  3649  0AF4  1303               	bcf	3,6	;RP1=0, select bank1
  3650  0AF5  00B0               	movwf	double_data_set@p_data^(0+128)
  3651  0AF6                     l165:	
  3652                           ;protocol.c: 423: uint8_t buf[5];
  3653                           ;protocol.c: 424: uint8_t i;
  3654                           ;protocol.c: 426: while(data_len)
  3655                           
  3656  0AF6  0829               	movf	double_data_set@data_len^(0+128),w
  3657  0AF7  1903               	btfsc	3,2
  3658  0AF8  0008               	return
  3659                           
  3660                           ;protocol.c: 427: {
  3661                           ;protocol.c: 428: double_to_byte_array(p_data++, buf);
  3662  0AF9  30AB               	movlw	(low (double_data_set@buf| 0))& (0+255)
  3663  0AFA  00AA               	movwf	??_double_data_set^(0+128)
  3664  0AFB  082A               	movf	??_double_data_set^(0+128),w
  3665  0AFC  00A0               	movwf	double_to_byte_array@p_data_array^(0+128)
  3666  0AFD  0830               	movf	double_data_set@p_data^(0+128),w
  3667  0AFE  120A  158A  2238  120A  158A  	fcall	_double_to_byte_array
  3668  0B03  3003               	movlw	3
  3669  0B04  1683               	bsf	3,5	;RP0=1, select bank1
  3670  0B05  1303               	bcf	3,6	;RP1=0, select bank1
  3671  0B06  00AA               	movwf	??_double_data_set^(0+128)
  3672  0B07  082A               	movf	??_double_data_set^(0+128),w
  3673  0B08  07B0               	addwf	double_data_set@p_data^(0+128),f
  3674                           
  3675                           ;protocol.c: 430: for(i = 0; i < 5; i++)
  3676  0B09  01B1               	clrf	double_data_set@i^(0+128)
  3677  0B0A  3005               	movlw	5
  3678  0B0B  0231               	subwf	double_data_set@i^(0+128),w
  3679  0B0C  1803               	btfsc	3,0
  3680  0B0D  2B25               	goto	l2695
  3681  0B0E                     l2687:	
  3682                           
  3683                           ;protocol.c: 431: {
  3684                           ;protocol.c: 432: tx_packet.payload[tx_packet.payload_len++] = buf[i];
  3685  0B0E  0831               	movf	double_data_set@i^(0+128),w
  3686  0B0F  3EAB               	addlw	(low (double_data_set@buf| 0))& (0+255)
  3687  0B10  0084               	movwf	4
  3688  0B11  1383               	bcf	3,7	;select IRP bank1
  3689  0B12  0800               	movf	0,w
  3690  0B13  00AA               	movwf	??_double_data_set^(0+128)
  3691  0B14  0850               	movf	(_tx_packet^(0+128)+1),w
  3692  0B15  3ED1               	addlw	(low ((_tx_packet| 0+2)))& (0+255)
  3693  0B16  0084               	movwf	4
  3694  0B17  082A               	movf	??_double_data_set^(0+128),w
  3695  0B18  0080               	movwf	0
  3696  0B19  3001               	movlw	1
  3697  0B1A  00AA               	movwf	??_double_data_set^(0+128)
  3698  0B1B  082A               	movf	??_double_data_set^(0+128),w
  3699  0B1C  07D0               	addwf	(_tx_packet^(0+128)+1),f
  3700  0B1D  3001               	movlw	1
  3701  0B1E  00AA               	movwf	??_double_data_set^(0+128)
  3702  0B1F  082A               	movf	??_double_data_set^(0+128),w
  3703  0B20  07B1               	addwf	double_data_set@i^(0+128),f
  3704  0B21  3005               	movlw	5
  3705  0B22  0231               	subwf	double_data_set@i^(0+128),w
  3706  0B23  1C03               	skipc
  3707  0B24  2B0E               	goto	l2687
  3708  0B25                     l2695:	
  3709                           
  3710                           ;protocol.c: 433: }
  3711                           ;protocol.c: 434: data_len--;
  3712  0B25  3001               	movlw	1
  3713  0B26  02A9               	subwf	double_data_set@data_len^(0+128),f
  3714  0B27  2AF6               	goto	l165
  3715  0B28                     __end_of_double_data_set:	
  3716                           
  3717                           	psect	text8
  3718  0A38                     __ptext8:	
  3719 ;; *************** function _double_to_byte_array *****************
  3720 ;; Defined at:
  3721 ;;		line 472 in file "protocol.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;  p_data          1    wreg     PTR 
  3724 ;;		 -> main@send_data(15), 
  3725 ;;  p_data_array    1    0[BANK1 ] PTR unsigned char 
  3726 ;;		 -> double_data_set@buf(5), 
  3727 ;; Auto vars:     Size  Location     Type
  3728 ;;  p_data          1    7[BANK1 ] PTR 
  3729 ;;		 -> main@send_data(15), 
  3730 ;;  converter       4    3[BANK1 ] struct .
  3731 ;;  i               1    8[BANK1 ] unsigned char 
  3732 ;; Return value:  Size  Location     Type
  3733 ;;		None               void
  3734 ;; Registers used:
  3735 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3736 ;; Tracked objects:
  3737 ;;		On entry : 0/0
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3741 ;;      Params:         0       0       1       0       0
  3742 ;;      Locals:         0       0       6       0       0
  3743 ;;      Temps:          0       0       2       0       0
  3744 ;;      Totals:         0       0       9       0       0
  3745 ;;Total ram usage:        9 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; Hardware stack levels required when called:    3
  3748 ;; This function calls:
  3749 ;;		Nothing
  3750 ;; This function is called by:
  3751 ;;		_double_data_set
  3752 ;; This function uses a non-reentrant model
  3753 ;;
  3754                           
  3755                           
  3756                           ;psect for function _double_to_byte_array
  3757  0A38                     _double_to_byte_array:	
  3758                           
  3759                           ;incstack = 0
  3760                           ; Regs used in _double_to_byte_array: [wreg-fsr0h+status,2+status,0]
  3761                           ;double_to_byte_array@p_data stored from wreg
  3762  0A38  1683               	bsf	3,5	;RP0=1, select bank1
  3763  0A39  1303               	bcf	3,6	;RP1=0, select bank1
  3764  0A3A  00A7               	movwf	double_to_byte_array@p_data^(0+128)
  3765                           
  3766                           ;protocol.c: 474: uint8_t i;
  3767                           ;protocol.c: 475: union
  3768                           ;protocol.c: 476: {
  3769                           ;protocol.c: 477: double data;
  3770                           ;protocol.c: 478: uint8_t array[4];
  3771                           ;protocol.c: 479: } converter;
  3772                           ;protocol.c: 482: converter.data = *p_data;
  3773  0A3B  0827               	movf	double_to_byte_array@p_data^(0+128),w
  3774  0A3C  0084               	movwf	4
  3775  0A3D  1783               	bsf	3,7	;select IRP bank2
  3776  0A3E  0800               	movf	0,w
  3777  0A3F  00A3               	movwf	double_to_byte_array@converter^(0+128)
  3778  0A40  0A84               	incf	4,f
  3779  0A41  0800               	movf	0,w
  3780  0A42  00A4               	movwf	(double_to_byte_array@converter+1)^(0+128)
  3781  0A43  0A84               	incf	4,f
  3782  0A44  0800               	movf	0,w
  3783  0A45  00A5               	movwf	(double_to_byte_array@converter+2)^(0+128)
  3784                           
  3785                           ;protocol.c: 485: p_data_array[0] = 4;
  3786  0A46  3004               	movlw	4
  3787  0A47  00A1               	movwf	??_double_to_byte_array^(0+128)
  3788  0A48  0820               	movf	double_to_byte_array@p_data_array^(0+128),w
  3789  0A49  0084               	movwf	4
  3790  0A4A  0821               	movf	??_double_to_byte_array^(0+128),w
  3791  0A4B  1383               	bcf	3,7	;select IRP bank0
  3792  0A4C  0080               	movwf	0
  3793                           
  3794                           ;protocol.c: 488: for(i = 0; i < 4; i++)
  3795  0A4D  01A8               	clrf	double_to_byte_array@i^(0+128)
  3796  0A4E                     L1:	
  3797  0A4E  3004               	movlw	4
  3798  0A4F  0228               	subwf	double_to_byte_array@i^(0+128),w
  3799  0A50  1803               	btfsc	3,0
  3800  0A51  0008               	return
  3801                           
  3802                           ;protocol.c: 489: {
  3803                           ;protocol.c: 490: p_data_array[i + 1] = converter.array[i];
  3804  0A52  0828               	movf	double_to_byte_array@i^(0+128),w
  3805  0A53  3EA3               	addlw	(low (double_to_byte_array@converter| 0))& (0+255)
  3806  0A54  0084               	movwf	4
  3807  0A55  0800               	movf	0,w
  3808  0A56  00A1               	movwf	??_double_to_byte_array^(0+128)
  3809  0A57  0828               	movf	double_to_byte_array@i^(0+128),w
  3810  0A58  3E01               	addlw	1
  3811  0A59  0720               	addwf	double_to_byte_array@p_data_array^(0+128),w
  3812  0A5A  00A2               	movwf	(??_double_to_byte_array+1)^(0+128)
  3813  0A5B  0822               	movf	(??_double_to_byte_array+1)^(0+128),w
  3814  0A5C  0084               	movwf	4
  3815  0A5D  0821               	movf	??_double_to_byte_array^(0+128),w
  3816  0A5E  0080               	movwf	0
  3817  0A5F  3001               	movlw	1
  3818  0A60  00A1               	movwf	??_double_to_byte_array^(0+128)
  3819  0A61  0821               	movf	??_double_to_byte_array^(0+128),w
  3820  0A62  07A8               	addwf	double_to_byte_array@i^(0+128),f
  3821  0A63  2A4E               	goto	L1
  3822  0A64                     __end_of_double_to_byte_array:	
  3823                           
  3824                           	psect	text9
  3825  0A15                     __ptext9:	
  3826 ;; *************** function ___wmul *****************
  3827 ;; Defined at:
  3828 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;  multiplier      2    0[BANK1 ] unsigned int 
  3831 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  3832 ;; Auto vars:     Size  Location     Type
  3833 ;;  product         2    4[BANK1 ] unsigned int 
  3834 ;; Return value:  Size  Location     Type
  3835 ;;                  2    0[BANK1 ] unsigned int 
  3836 ;; Registers used:
  3837 ;;		wreg, status,2, status,0
  3838 ;; Tracked objects:
  3839 ;;		On entry : 0/0
  3840 ;;		On exit  : 0/0
  3841 ;;		Unchanged: 0/0
  3842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3843 ;;      Params:         0       0       4       0       0
  3844 ;;      Locals:         0       0       2       0       0
  3845 ;;      Temps:          0       0       0       0       0
  3846 ;;      Totals:         0       0       6       0       0
  3847 ;;Total ram usage:        6 bytes
  3848 ;; Hardware stack levels used:    1
  3849 ;; Hardware stack levels required when called:    3
  3850 ;; This function calls:
  3851 ;;		Nothing
  3852 ;; This function is called by:
  3853 ;;		_sent_data_set
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           
  3858                           ;psect for function ___wmul
  3859  0A15                     ___wmul:	
  3860                           
  3861                           ;incstack = 0
  3862                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3863  0A15  1683               	bsf	3,5	;RP0=1, select bank1
  3864  0A16  1303               	bcf	3,6	;RP1=0, select bank1
  3865  0A17  01A4               	clrf	___wmul@product^(0+128)
  3866  0A18  01A5               	clrf	(___wmul@product+1)^(0+128)
  3867  0A19                     l2741:	
  3868  0A19  1C20               	btfss	___wmul@multiplier^(0+128),0
  3869  0A1A  2A21               	goto	l447
  3870  0A1B  0822               	movf	___wmul@multiplicand^(0+128),w
  3871  0A1C  07A4               	addwf	___wmul@product^(0+128),f
  3872  0A1D  1803               	skipnc
  3873  0A1E  0AA5               	incf	(___wmul@product+1)^(0+128),f
  3874  0A1F  0823               	movf	(___wmul@multiplicand+1)^(0+128),w
  3875  0A20  07A5               	addwf	(___wmul@product+1)^(0+128),f
  3876  0A21                     l447:	
  3877  0A21  3001               	movlw	1
  3878  0A22                     u2835:	
  3879  0A22  1003               	clrc
  3880  0A23  0DA2               	rlf	___wmul@multiplicand^(0+128),f
  3881  0A24  0DA3               	rlf	(___wmul@multiplicand+1)^(0+128),f
  3882  0A25  3EFF               	addlw	-1
  3883  0A26  1D03               	skipz
  3884  0A27  2A22               	goto	u2835
  3885  0A28  3001               	movlw	1
  3886  0A29                     u2845:	
  3887  0A29  1003               	clrc
  3888  0A2A  0CA1               	rrf	(___wmul@multiplier+1)^(0+128),f
  3889  0A2B  0CA0               	rrf	___wmul@multiplier^(0+128),f
  3890  0A2C  3EFF               	addlw	-1
  3891  0A2D  1D03               	skipz
  3892  0A2E  2A29               	goto	u2845
  3893  0A2F  0820               	movf	___wmul@multiplier^(0+128),w
  3894  0A30  0421               	iorwf	(___wmul@multiplier+1)^(0+128),w
  3895  0A31  1D03               	btfss	3,2
  3896  0A32  2A19               	goto	l2741
  3897  0A33  0825               	movf	(___wmul@product+1)^(0+128),w
  3898  0A34  00A1               	movwf	(?___wmul+1)^(0+128)
  3899  0A35  0824               	movf	___wmul@product^(0+128),w
  3900  0A36  00A0               	movwf	?___wmul^(0+128)
  3901  0A37  0008               	return
  3902  0A38                     __end_of___wmul:	
  3903                           
  3904                           	psect	text10
  3905  0954                     __ptext10:	
  3906 ;; *************** function _send_data_slave *****************
  3907 ;; Defined at:
  3908 ;;		line 141 in file "protocol.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;  data_type       1    wreg     enum E1107
  3911 ;;  data_end_com    1    0[BANK1 ] enum E1112
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  data_type       1    2[BANK1 ] enum E1107
  3914 ;; Return value:  Size  Location     Type
  3915 ;;		None               void
  3916 ;; Registers used:
  3917 ;;		wreg
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3923 ;;      Params:         0       0       1       0       0
  3924 ;;      Locals:         0       0       1       0       0
  3925 ;;      Temps:          0       0       1       0       0
  3926 ;;      Totals:         0       0       3       0       0
  3927 ;;Total ram usage:        3 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    3
  3930 ;; This function calls:
  3931 ;;		Nothing
  3932 ;; This function is called by:
  3933 ;;		_main
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           
  3938                           ;psect for function _send_data_slave
  3939  0954                     _send_data_slave:	
  3940                           
  3941                           ;incstack = 0
  3942                           ; Regs used in _send_data_slave: [wreg]
  3943                           ;send_data_slave@data_type stored from wreg
  3944  0954  1683               	bsf	3,5	;RP0=1, select bank1
  3945  0955  1303               	bcf	3,6	;RP1=0, select bank1
  3946  0956  00A2               	movwf	send_data_slave@data_type^(0+128)
  3947                           
  3948                           ;protocol.c: 144: tx_packet.data_type = (uint8_t)data_type;
  3949  0957  0822               	movf	send_data_slave@data_type^(0+128),w
  3950  0958  00A1               	movwf	??_send_data_slave^(0+128)
  3951  0959  0821               	movf	??_send_data_slave^(0+128),w
  3952  095A  00CF               	movwf	_tx_packet^(0+128)
  3953                           
  3954                           ;protocol.c: 145: tx_packet.data_end_command = (uint8_t)data_end_command;
  3955  095B  0820               	movf	send_data_slave@data_end_command^(0+128),w
  3956  095C  00A1               	movwf	??_send_data_slave^(0+128)
  3957  095D  0821               	movf	??_send_data_slave^(0+128),w
  3958  095E  00EF               	movwf	(_tx_packet^(0+128)+32)
  3959                           
  3960                           ;protocol.c: 148: tx_packet_status = TRUE;
  3961  095F  01FC               	clrf	_tx_packet_status
  3962  0960  0AFC               	incf	_tx_packet_status,f
  3963  0961  0008               	return
  3964  0962                     __end_of_send_data_slave:	
  3965                           
  3966                           	psect	text11
  3967  0B93                     __ptext11:	
  3968 ;; *************** function _put_string *****************
  3969 ;; Defined at:
  3970 ;;		line 77 in file "uart.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;  str             2    1[BANK1 ] PTR unsigned char 
  3973 ;;		 -> STR_1(23), main@send_data(15), 
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;		None
  3976 ;; Return value:  Size  Location     Type
  3977 ;;		None               void
  3978 ;; Registers used:
  3979 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3985 ;;      Params:         0       0       2       0       0
  3986 ;;      Locals:         0       0       0       0       0
  3987 ;;      Temps:          0       0       0       0       0
  3988 ;;      Totals:         0       0       2       0       0
  3989 ;;Total ram usage:        2 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    4
  3992 ;; This function calls:
  3993 ;;		_put_char
  3994 ;; This function is called by:
  3995 ;;		_main
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           
  4000                           ;psect for function _put_string
  4001  0B93                     _put_string:	
  4002  0B93                     l2943:	
  4003                           ;uart.c: 79: while(*str != '\0')
  4004                           
  4005                           ;incstack = 0
  4006                           ; Regs used in _put_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4007                           
  4008  0B93  1683               	bsf	3,5	;RP0=1, select bank1
  4009  0B94  1303               	bcf	3,6	;RP1=0, select bank1
  4010  0B95  0822               	movf	(put_string@str+1)^(0+128),w
  4011  0B96  1283               	bcf	3,5	;RP0=0, select bank0
  4012  0B97  1303               	bcf	3,6	;RP1=0, select bank0
  4013  0B98  00FF               	movwf	127
  4014  0B99  1683               	bsf	3,5	;RP0=1, select bank1
  4015  0B9A  1303               	bcf	3,6	;RP1=0, select bank1
  4016  0B9B  0821               	movf	put_string@str^(0+128),w
  4017  0B9C  0084               	movwf	4
  4018  0B9D  1283               	bcf	3,5	;RP0=0, select bank0
  4019  0B9E  1303               	bcf	3,6	;RP1=0, select bank0
  4020  0B9F  120A  158A  2000  120A  158A  	fcall	stringtab
  4021  0BA4  3A00               	xorlw	0
  4022  0BA5  1903               	btfsc	3,2
  4023  0BA6  2BC4               	goto	l2945
  4024                           
  4025                           ;uart.c: 80: {
  4026                           ;uart.c: 81: put_char(*str);
  4027  0BA7  1683               	bsf	3,5	;RP0=1, select bank1
  4028  0BA8  1303               	bcf	3,6	;RP1=0, select bank1
  4029  0BA9  0822               	movf	(put_string@str+1)^(0+128),w
  4030  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
  4031  0BAB  1303               	bcf	3,6	;RP1=0, select bank0
  4032  0BAC  00FF               	movwf	127
  4033  0BAD  1683               	bsf	3,5	;RP0=1, select bank1
  4034  0BAE  1303               	bcf	3,6	;RP1=0, select bank1
  4035  0BAF  0821               	movf	put_string@str^(0+128),w
  4036  0BB0  0084               	movwf	4
  4037  0BB1  1283               	bcf	3,5	;RP0=0, select bank0
  4038  0BB2  1303               	bcf	3,6	;RP1=0, select bank0
  4039  0BB3  120A  158A  2000  120A  158A  	fcall	stringtab
  4040  0BB8  120A  158A  213A  120A  158A  	fcall	_put_char
  4041                           
  4042                           ;uart.c: 82: str++;
  4043  0BBD  3001               	movlw	1
  4044  0BBE  1683               	bsf	3,5	;RP0=1, select bank1
  4045  0BBF  1303               	bcf	3,6	;RP1=0, select bank1
  4046  0BC0  07A1               	addwf	put_string@str^(0+128),f
  4047  0BC1  1803               	skipnc
  4048  0BC2  0AA2               	incf	(put_string@str+1)^(0+128),f
  4049  0BC3  2B93               	goto	l2943
  4050  0BC4                     l2945:	
  4051                           
  4052                           ;uart.c: 83: }
  4053                           ;uart.c: 85: put_char('\0');
  4054  0BC4  3000               	movlw	0
  4055  0BC5  120A  158A  213A   	fcall	_put_char
  4056  0BC8  0008               	return
  4057  0BC9                     __end_of_put_string:	
  4058                           
  4059                           	psect	text12
  4060  093A                     __ptext12:	
  4061 ;; *************** function _put_char *****************
  4062 ;; Defined at:
  4063 ;;		line 61 in file "uart.c"
  4064 ;; Parameters:    Size  Location     Type
  4065 ;;  byte_data       1    wreg     unsigned char 
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;  byte_data       1    0[BANK1 ] unsigned char 
  4068 ;; Return value:  Size  Location     Type
  4069 ;;		None               void
  4070 ;; Registers used:
  4071 ;;		wreg
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4077 ;;      Params:         0       0       0       0       0
  4078 ;;      Locals:         0       0       1       0       0
  4079 ;;      Temps:          0       0       0       0       0
  4080 ;;      Totals:         0       0       1       0       0
  4081 ;;Total ram usage:        1 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; Hardware stack levels required when called:    3
  4084 ;; This function calls:
  4085 ;;		Nothing
  4086 ;; This function is called by:
  4087 ;;		_main
  4088 ;;		_put_string
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           
  4093                           ;psect for function _put_char
  4094  093A                     _put_char:	
  4095                           
  4096                           ;incstack = 0
  4097                           ; Regs used in _put_char: [wreg]
  4098                           ;put_char@byte_data stored from wreg
  4099  093A  1683               	bsf	3,5	;RP0=1, select bank1
  4100  093B  1303               	bcf	3,6	;RP1=0, select bank1
  4101  093C  00A0               	movwf	put_char@byte_data^(0+128)
  4102  093D                     l250:	
  4103                           ;uart.c: 65: {
  4104                           ;uart.c: 66: ;
  4105                           
  4106                           ;uart.c: 64: while(TXIF == 0)
  4107                           
  4108  093D  1283               	bcf	3,5	;RP0=0, select bank0
  4109  093E  1E0C               	btfss	12,4	;volatile
  4110  093F  293D               	goto	l250
  4111                           
  4112                           ;uart.c: 67: }
  4113                           ;uart.c: 70: TXREG = byte_data;
  4114  0940  1683               	bsf	3,5	;RP0=1, select bank1
  4115  0941  1303               	bcf	3,6	;RP1=0, select bank1
  4116  0942  0820               	movf	put_char@byte_data^(0+128),w
  4117  0943  1283               	bcf	3,5	;RP0=0, select bank0
  4118  0944  1303               	bcf	3,6	;RP1=0, select bank0
  4119  0945  0099               	movwf	25	;volatile
  4120  0946  0008               	return
  4121  0947                     __end_of_put_char:	
  4122                           
  4123                           	psect	text13
  4124  0962                     __ptext13:	
  4125 ;; *************** function _pic_port_init *****************
  4126 ;; Defined at:
  4127 ;;		line 262 in file "main.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;		None
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;		None
  4132 ;; Return value:  Size  Location     Type
  4133 ;;		None               void
  4134 ;; Registers used:
  4135 ;;		status,2
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4141 ;;      Params:         0       0       0       0       0
  4142 ;;      Locals:         0       0       0       0       0
  4143 ;;      Temps:          0       0       0       0       0
  4144 ;;      Totals:         0       0       0       0       0
  4145 ;;Total ram usage:        0 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; Hardware stack levels required when called:    3
  4148 ;; This function calls:
  4149 ;;		Nothing
  4150 ;; This function is called by:
  4151 ;;		_main
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           
  4156                           ;psect for function _pic_port_init
  4157  0962                     _pic_port_init:	
  4158                           
  4159                           ;main.c: 265: TRISA = 0x00;
  4160                           
  4161                           ;incstack = 0
  4162                           ; Regs used in _pic_port_init: [status,2]
  4163  0962  1683               	bsf	3,5	;RP0=1, select bank1
  4164  0963  1303               	bcf	3,6	;RP1=0, select bank1
  4165  0964  0185               	clrf	5	;volatile
  4166                           
  4167                           ;main.c: 266: TRISB = 0x00;
  4168  0965  0186               	clrf	6	;volatile
  4169                           
  4170                           ;main.c: 267: TRISC = 0x00;
  4171  0966  0187               	clrf	7	;volatile
  4172                           
  4173                           ;main.c: 268: TRISD = 0x00;
  4174  0967  0188               	clrf	8	;volatile
  4175                           
  4176                           ;main.c: 269: TRISE = 0x00;
  4177  0968  0189               	clrf	9	;volatile
  4178                           
  4179                           ;main.c: 272: PORTA = 0x00;
  4180  0969  1283               	bcf	3,5	;RP0=0, select bank0
  4181  096A  1303               	bcf	3,6	;RP1=0, select bank0
  4182  096B  0185               	clrf	5	;volatile
  4183                           
  4184                           ;main.c: 273: PORTB = 0x00;
  4185  096C  0186               	clrf	6	;volatile
  4186                           
  4187                           ;main.c: 274: PORTC = 0x00;
  4188  096D  0187               	clrf	7	;volatile
  4189                           
  4190                           ;main.c: 275: PORTD = 0x00;
  4191  096E  0188               	clrf	8	;volatile
  4192                           
  4193                           ;main.c: 276: PORTE = 0x00;
  4194  096F  0189               	clrf	9	;volatile
  4195  0970  0008               	return
  4196  0971                     __end_of_pic_port_init:	
  4197                           
  4198                           	psect	text14
  4199  0CF1                     __ptext14:	
  4200 ;; *************** function _number_to_string_char *****************
  4201 ;; Defined at:
  4202 ;;		line 22 in file "convert.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;  buf             1    wreg     PTR unsigned char 
  4205 ;;		 -> main@temp_buf_c(5), 
  4206 ;;  num             1   26[BANK1 ] unsigned char 
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;  buf             1   30[BANK1 ] PTR unsigned char 
  4209 ;;		 -> main@temp_buf_c(5), 
  4210 ;;  flag            1   29[BANK1 ] unsigned char 
  4211 ;; Return value:  Size  Location     Type
  4212 ;;		None               void
  4213 ;; Registers used:
  4214 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4220 ;;      Params:         0       0       1       0       0
  4221 ;;      Locals:         0       0       2       0       0
  4222 ;;      Temps:          0       0       2       0       0
  4223 ;;      Totals:         0       0       5       0       0
  4224 ;;Total ram usage:        5 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:    6
  4227 ;; This function calls:
  4228 ;;		___bmul
  4229 ;;		_process_10
  4230 ;;		_process_100
  4231 ;;		_process_1_null
  4232 ;; This function is called by:
  4233 ;;		_main
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _number_to_string_char
  4239  0CF1                     _number_to_string_char:	
  4240                           
  4241                           ;incstack = 0
  4242                           ; Regs used in _number_to_string_char: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4243                           ;number_to_string_char@buf stored from wreg
  4244  0CF1  1683               	bsf	3,5	;RP0=1, select bank1
  4245  0CF2  1303               	bcf	3,6	;RP1=0, select bank1
  4246  0CF3  00BE               	movwf	number_to_string_char@buf^(0+128)
  4247                           
  4248                           ;convert.c: 24: uint8_t flag = 0;
  4249  0CF4  01BD               	clrf	number_to_string_char@flag^(0+128)
  4250                           
  4251                           ;convert.c: 44: }
  4252                           ;convert.c: 47: if((100) <= num && num <= (127))
  4253                           
  4254                           ;convert.c: 43: num *= (-1);
  4255                           
  4256                           ;convert.c: 42: flag++;
  4257                           
  4258                           ;convert.c: 40: {
  4259                           ;convert.c: 41: buf[flag] = '-';
  4260                           
  4261                           ;convert.c: 36: }
  4262                           ;convert.c: 39: if(num < 0)
  4263                           
  4264                           ;convert.c: 35: return;
  4265                           
  4266                           ;convert.c: 33: buf[4] = '\0';
  4267                           
  4268                           ;convert.c: 32: buf[3] = '8';
  4269                           
  4270                           ;convert.c: 31: buf[2] = '2';
  4271                           
  4272                           ;convert.c: 30: buf[1] = '1';
  4273                           
  4274                           ;convert.c: 28: {
  4275                           ;convert.c: 29: buf[0] = '-';
  4276                           
  4277                           ;convert.c: 27: if(num == (-128))
  4278  0CF5  3064               	movlw	100
  4279  0CF6  023A               	subwf	number_to_string_char@num^(0+128),w
  4280  0CF7  1C03               	skipc
  4281  0CF8  2D0A               	goto	l2927
  4282  0CF9  3080               	movlw	128
  4283  0CFA  023A               	subwf	number_to_string_char@num^(0+128),w
  4284  0CFB  1803               	skipnc
  4285  0CFC  2D0A               	goto	l2927
  4286                           
  4287                           ;convert.c: 48: {
  4288                           ;convert.c: 49: process_100(num, &flag, buf);
  4289  0CFD  30BD               	movlw	(low (number_to_string_char@flag| 0))& (0+255)
  4290  0CFE  00BB               	movwf	??_number_to_string_char^(0+128)
  4291  0CFF  083B               	movf	??_number_to_string_char^(0+128),w
  4292  0D00  00B3               	movwf	process_100@p_flag^(0+128)
  4293  0D01  083E               	movf	number_to_string_char@buf^(0+128),w
  4294  0D02  00BC               	movwf	(??_number_to_string_char+1)^(0+128)
  4295  0D03  083C               	movf	(??_number_to_string_char+1)^(0+128),w
  4296  0D04  00B4               	movwf	process_100@p_buf^(0+128)
  4297  0D05  083A               	movf	number_to_string_char@num^(0+128),w
  4298  0D06  120A  158A  243C   	fcall	_process_100
  4299                           
  4300                           ;convert.c: 50: }
  4301  0D09  0008               	return
  4302  0D0A                     l2927:	
  4303                           
  4304                           ;convert.c: 51: else if((10) <= num && num <= (99))
  4305  0D0A  300A               	movlw	10
  4306  0D0B  1683               	bsf	3,5	;RP0=1, select bank1
  4307  0D0C  1303               	bcf	3,6	;RP1=0, select bank1
  4308  0D0D  023A               	subwf	number_to_string_char@num^(0+128),w
  4309  0D0E  1C03               	skipc
  4310  0D0F  2D21               	goto	l2933
  4311  0D10  3064               	movlw	100
  4312  0D11  023A               	subwf	number_to_string_char@num^(0+128),w
  4313  0D12  1803               	skipnc
  4314  0D13  2D21               	goto	l2933
  4315                           
  4316                           ;convert.c: 52: {
  4317                           ;convert.c: 53: process_10(num, &flag, buf);
  4318  0D14  30BD               	movlw	(low (number_to_string_char@flag| 0))& (0+255)
  4319  0D15  00BB               	movwf	??_number_to_string_char^(0+128)
  4320  0D16  083B               	movf	??_number_to_string_char^(0+128),w
  4321  0D17  00A9               	movwf	process_10@p_flag^(0+128)
  4322  0D18  083E               	movf	number_to_string_char@buf^(0+128),w
  4323  0D19  00BC               	movwf	(??_number_to_string_char+1)^(0+128)
  4324  0D1A  083C               	movf	(??_number_to_string_char+1)^(0+128),w
  4325  0D1B  00AA               	movwf	process_10@p_buf^(0+128)
  4326  0D1C  083A               	movf	number_to_string_char@num^(0+128),w
  4327  0D1D  120A  158A  2730   	fcall	_process_10
  4328                           
  4329                           ;convert.c: 54: }
  4330  0D20  0008               	return
  4331  0D21                     l2933:	
  4332                           ;convert.c: 55: else if((0) <= num && num <= (9))
  4333                           
  4334  0D21  300A               	movlw	10
  4335  0D22  1683               	bsf	3,5	;RP0=1, select bank1
  4336  0D23  1303               	bcf	3,6	;RP1=0, select bank1
  4337  0D24  023A               	subwf	number_to_string_char@num^(0+128),w
  4338  0D25  1803               	skipnc
  4339  0D26  0008               	return
  4340                           
  4341                           ;convert.c: 56: {
  4342                           ;convert.c: 59: process_1_null(num, &flag, buf);
  4343  0D27  30BD               	movlw	(low (number_to_string_char@flag| 0))& (0+255)
  4344  0D28  00BB               	movwf	??_number_to_string_char^(0+128)
  4345  0D29  083B               	movf	??_number_to_string_char^(0+128),w
  4346  0D2A  00A0               	movwf	process_1_null@p_flag^(0+128)
  4347  0D2B  083E               	movf	number_to_string_char@buf^(0+128),w
  4348  0D2C  00BC               	movwf	(??_number_to_string_char+1)^(0+128)
  4349  0D2D  083C               	movf	(??_number_to_string_char+1)^(0+128),w
  4350  0D2E  00A1               	movwf	process_1_null@p_buf^(0+128)
  4351  0D2F  083A               	movf	number_to_string_char@num^(0+128),w
  4352  0D30  120A  158A  25C6   	fcall	_process_1_null
  4353                           
  4354                           ;convert.c: 61: else
  4355                           ;convert.c: 62: {
  4356                           
  4357                           ;convert.c: 60: }
  4358  0D33  0008               	return
  4359  0D34                     __end_of_number_to_string_char:	
  4360                           
  4361                           	psect	text15
  4362  0DC6                     __ptext15:	
  4363 ;; *************** function _process_1_null *****************
  4364 ;; Defined at:
  4365 ;;		line 126 in file "convert.c"
  4366 ;; Parameters:    Size  Location     Type
  4367 ;;  num             1    wreg     unsigned char 
  4368 ;;  p_flag          1    0[BANK1 ] PTR unsigned char 
  4369 ;;		 -> number_to_string_char@flag(1), 
  4370 ;;  p_buf           1    1[BANK1 ] PTR unsigned char 
  4371 ;;		 -> main@temp_buf_c(5), 
  4372 ;; Auto vars:     Size  Location     Type
  4373 ;;  num             1    4[BANK1 ] unsigned char 
  4374 ;;  i               2    6[BANK1 ] int 
  4375 ;;  val             1    8[BANK1 ] unsigned char 
  4376 ;;  divide_1        1    5[BANK1 ] unsigned char 
  4377 ;; Return value:  Size  Location     Type
  4378 ;;		None               void
  4379 ;; Registers used:
  4380 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4381 ;; Tracked objects:
  4382 ;;		On entry : 0/0
  4383 ;;		On exit  : 0/0
  4384 ;;		Unchanged: 0/0
  4385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4386 ;;      Params:         0       0       2       0       0
  4387 ;;      Locals:         0       0       5       0       0
  4388 ;;      Temps:          0       0       2       0       0
  4389 ;;      Totals:         0       0       9       0       0
  4390 ;;Total ram usage:        9 bytes
  4391 ;; Hardware stack levels used:    1
  4392 ;; Hardware stack levels required when called:    3
  4393 ;; This function calls:
  4394 ;;		Nothing
  4395 ;; This function is called by:
  4396 ;;		_number_to_string_char
  4397 ;; This function uses a non-reentrant model
  4398 ;;
  4399                           
  4400                           
  4401                           ;psect for function _process_1_null
  4402  0DC6                     _process_1_null:	
  4403                           
  4404                           ;incstack = 0
  4405                           ; Regs used in _process_1_null: [wreg-fsr0h+status,2+status,0]
  4406                           ;process_1_null@num stored from wreg
  4407  0DC6  1683               	bsf	3,5	;RP0=1, select bank1
  4408  0DC7  1303               	bcf	3,6	;RP1=0, select bank1
  4409  0DC8  00A4               	movwf	process_1_null@num^(0+128)
  4410                           
  4411                           ;convert.c: 128: uint8_t divide_1 = num;
  4412  0DC9  0824               	movf	process_1_null@num^(0+128),w
  4413  0DCA  00A2               	movwf	??_process_1_null^(0+128)
  4414  0DCB  0822               	movf	??_process_1_null^(0+128),w
  4415  0DCC  00A5               	movwf	process_1_null@divide_1^(0+128)
  4416                           
  4417                           ;convert.c: 129: uint8_t val = (48);
  4418  0DCD  3030               	movlw	48
  4419  0DCE  00A2               	movwf	??_process_1_null^(0+128)
  4420  0DCF  0822               	movf	??_process_1_null^(0+128),w
  4421  0DD0  00A8               	movwf	process_1_null@val^(0+128)
  4422                           
  4423                           ;convert.c: 130: int i;
  4424                           ;convert.c: 132: p_buf[*p_flag] = (48);
  4425  0DD1  3030               	movlw	48
  4426  0DD2  00A2               	movwf	??_process_1_null^(0+128)
  4427  0DD3  0820               	movf	process_1_null@p_flag^(0+128),w
  4428  0DD4  0084               	movwf	4
  4429  0DD5  1383               	bcf	3,7	;select IRP bank0
  4430  0DD6  0800               	movf	0,w
  4431  0DD7  0721               	addwf	process_1_null@p_buf^(0+128),w
  4432  0DD8  00A3               	movwf	(??_process_1_null+1)^(0+128)
  4433  0DD9  0823               	movf	(??_process_1_null+1)^(0+128),w
  4434  0DDA  0084               	movwf	4
  4435  0DDB  0822               	movf	??_process_1_null^(0+128),w
  4436  0DDC  1783               	bsf	3,7	;select IRP bank2
  4437  0DDD  0080               	movwf	0
  4438                           
  4439                           ;convert.c: 133: (*p_flag)++;
  4440  0DDE  3001               	movlw	1
  4441  0DDF  00A2               	movwf	??_process_1_null^(0+128)
  4442  0DE0  0820               	movf	process_1_null@p_flag^(0+128),w
  4443  0DE1  0084               	movwf	4
  4444  0DE2  0822               	movf	??_process_1_null^(0+128),w
  4445  0DE3  1383               	bcf	3,7	;select IRP bank0
  4446  0DE4  0780               	addwf	0,f
  4447                           
  4448                           ;convert.c: 135: for(i = 0; i < divide_1; i++)
  4449  0DE5  01A6               	clrf	process_1_null@i^(0+128)
  4450  0DE6  01A7               	clrf	(process_1_null@i+1)^(0+128)
  4451  0DE7                     l2735:	
  4452  0DE7  0827               	movf	(process_1_null@i+1)^(0+128),w
  4453  0DE8  3A80               	xorlw	128
  4454  0DE9  00A2               	movwf	??_process_1_null^(0+128)
  4455  0DEA  3080               	movlw	128
  4456  0DEB  0222               	subwf	??_process_1_null^(0+128),w
  4457  0DEC  1D03               	skipz
  4458  0DED  2DF0               	goto	u2815
  4459  0DEE  0825               	movf	process_1_null@divide_1^(0+128),w
  4460  0DEF  0226               	subwf	process_1_null@i^(0+128),w
  4461  0DF0                     u2815:	
  4462  0DF0  1803               	btfsc	3,0
  4463  0DF1  2DFF               	goto	l2737
  4464                           
  4465                           ;convert.c: 136: {
  4466                           ;convert.c: 137: val++;
  4467  0DF2  3001               	movlw	1
  4468  0DF3  1683               	bsf	3,5	;RP0=1, select bank1
  4469  0DF4  1303               	bcf	3,6	;RP1=0, select bank1
  4470  0DF5  00A2               	movwf	??_process_1_null^(0+128)
  4471  0DF6  0822               	movf	??_process_1_null^(0+128),w
  4472  0DF7  07A8               	addwf	process_1_null@val^(0+128),f
  4473  0DF8  3001               	movlw	1
  4474  0DF9  07A6               	addwf	process_1_null@i^(0+128),f
  4475  0DFA  1803               	skipnc
  4476  0DFB  0AA7               	incf	(process_1_null@i+1)^(0+128),f
  4477  0DFC  3000               	movlw	0
  4478  0DFD  07A7               	addwf	(process_1_null@i+1)^(0+128),f
  4479  0DFE  2DE7               	goto	l2735
  4480  0DFF                     l2737:	
  4481                           
  4482                           ;convert.c: 138: }
  4483                           ;convert.c: 140: p_buf[*p_flag] = val;
  4484  0DFF  1683               	bsf	3,5	;RP0=1, select bank1
  4485  0E00  1303               	bcf	3,6	;RP1=0, select bank1
  4486  0E01  0828               	movf	process_1_null@val^(0+128),w
  4487  0E02  00A2               	movwf	??_process_1_null^(0+128)
  4488  0E03  0820               	movf	process_1_null@p_flag^(0+128),w
  4489  0E04  0084               	movwf	4
  4490  0E05  1383               	bcf	3,7	;select IRP bank0
  4491  0E06  0800               	movf	0,w
  4492  0E07  0721               	addwf	process_1_null@p_buf^(0+128),w
  4493  0E08  00A3               	movwf	(??_process_1_null+1)^(0+128)
  4494  0E09  0823               	movf	(??_process_1_null+1)^(0+128),w
  4495  0E0A  0084               	movwf	4
  4496  0E0B  0822               	movf	??_process_1_null^(0+128),w
  4497  0E0C  1783               	bsf	3,7	;select IRP bank2
  4498  0E0D  0080               	movwf	0
  4499                           
  4500                           ;convert.c: 141: (*p_flag)++;
  4501  0E0E  3001               	movlw	1
  4502  0E0F  00A2               	movwf	??_process_1_null^(0+128)
  4503  0E10  0820               	movf	process_1_null@p_flag^(0+128),w
  4504  0E11  0084               	movwf	4
  4505  0E12  0822               	movf	??_process_1_null^(0+128),w
  4506  0E13  1383               	bcf	3,7	;select IRP bank0
  4507  0E14  0780               	addwf	0,f
  4508                           
  4509                           ;convert.c: 143: p_buf[*p_flag] = '\0';
  4510  0E15  0820               	movf	process_1_null@p_flag^(0+128),w
  4511  0E16  0084               	movwf	4
  4512  0E17  0800               	movf	0,w
  4513  0E18  0721               	addwf	process_1_null@p_buf^(0+128),w
  4514  0E19  00A2               	movwf	??_process_1_null^(0+128)
  4515  0E1A  0822               	movf	??_process_1_null^(0+128),w
  4516  0E1B  0084               	movwf	4
  4517  0E1C  1783               	bsf	3,7	;select IRP bank2
  4518  0E1D  0180               	clrf	0
  4519  0E1E  0008               	return
  4520  0E1F                     __end_of_process_1_null:	
  4521                           
  4522                           	psect	text16
  4523  0C3C                     __ptext16:	
  4524 ;; *************** function _process_100 *****************
  4525 ;; Defined at:
  4526 ;;		line 71 in file "convert.c"
  4527 ;; Parameters:    Size  Location     Type
  4528 ;;  num             1    wreg     unsigned char 
  4529 ;;  p_flag          1   19[BANK1 ] PTR unsigned char 
  4530 ;;		 -> number_to_string_char@flag(1), 
  4531 ;;  p_buf           1   20[BANK1 ] PTR unsigned char 
  4532 ;;		 -> main@temp_buf_c(5), 
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;  num             1   24[BANK1 ] unsigned char 
  4535 ;;  remainder_10    1   25[BANK1 ] unsigned char 
  4536 ;; Return value:  Size  Location     Type
  4537 ;;		None               void
  4538 ;; Registers used:
  4539 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4545 ;;      Params:         0       0       2       0       0
  4546 ;;      Locals:         0       0       2       0       0
  4547 ;;      Temps:          0       0       3       0       0
  4548 ;;      Totals:         0       0       7       0       0
  4549 ;;Total ram usage:        7 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:    5
  4552 ;; This function calls:
  4553 ;;		___awmod
  4554 ;;		_process_10
  4555 ;; This function is called by:
  4556 ;;		_number_to_string_char
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           
  4561                           ;psect for function _process_100
  4562  0C3C                     _process_100:	
  4563                           
  4564                           ;incstack = 0
  4565                           ; Regs used in _process_100: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4566                           ;process_100@num stored from wreg
  4567  0C3C  1683               	bsf	3,5	;RP0=1, select bank1
  4568  0C3D  1303               	bcf	3,6	;RP1=0, select bank1
  4569  0C3E  00B8               	movwf	process_100@num^(0+128)
  4570                           
  4571                           ;convert.c: 73: uint8_t remainder_100 = num % 100;
  4572  0C3F  3064               	movlw	100
  4573  0C40  00A0               	movwf	___awmod@divisor^(0+128)
  4574  0C41  3000               	movlw	0
  4575  0C42  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  4576  0C43  0838               	movf	process_100@num^(0+128),w
  4577  0C44  00B5               	movwf	??_process_100^(0+128)
  4578  0C45  01B6               	clrf	(??_process_100^(0+128)+1)
  4579  0C46  0835               	movf	??_process_100^(0+128),w
  4580  0C47  00A2               	movwf	___awmod@dividend^(0+128)
  4581  0C48  0836               	movf	(??_process_100+1)^(0+128),w
  4582  0C49  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  4583  0C4A  120A  158A  2579  120A  158A  	fcall	___awmod
  4584  0C4F  1683               	bsf	3,5	;RP0=1, select bank1
  4585  0C50  1303               	bcf	3,6	;RP1=0, select bank1
  4586  0C51  0820               	movf	?___awmod^(0+128),w
  4587  0C52  00B7               	movwf	(??_process_100+2)^(0+128)
  4588  0C53  0837               	movf	(??_process_100+2)^(0+128),w
  4589  0C54  00B9               	movwf	process_100@remainder_100^(0+128)
  4590                           
  4591                           ;convert.c: 75: p_buf[*p_flag] = (48) + 1;
  4592  0C55  3031               	movlw	49
  4593  0C56  00B5               	movwf	??_process_100^(0+128)
  4594  0C57  0833               	movf	process_100@p_flag^(0+128),w
  4595  0C58  0084               	movwf	4
  4596  0C59  1383               	bcf	3,7	;select IRP bank0
  4597  0C5A  0800               	movf	0,w
  4598  0C5B  0734               	addwf	process_100@p_buf^(0+128),w
  4599  0C5C  00B6               	movwf	(??_process_100+1)^(0+128)
  4600  0C5D  0836               	movf	(??_process_100+1)^(0+128),w
  4601  0C5E  0084               	movwf	4
  4602  0C5F  0835               	movf	??_process_100^(0+128),w
  4603  0C60  1783               	bsf	3,7	;select IRP bank2
  4604  0C61  0080               	movwf	0
  4605                           
  4606                           ;convert.c: 76: (*p_flag)++;
  4607  0C62  3001               	movlw	1
  4608  0C63  00B5               	movwf	??_process_100^(0+128)
  4609  0C64  0833               	movf	process_100@p_flag^(0+128),w
  4610  0C65  0084               	movwf	4
  4611  0C66  0835               	movf	??_process_100^(0+128),w
  4612  0C67  1383               	bcf	3,7	;select IRP bank0
  4613  0C68  0780               	addwf	0,f
  4614                           
  4615                           ;convert.c: 78: process_10(remainder_100, p_flag, p_buf);
  4616  0C69  0833               	movf	process_100@p_flag^(0+128),w
  4617  0C6A  00B5               	movwf	??_process_100^(0+128)
  4618  0C6B  0835               	movf	??_process_100^(0+128),w
  4619  0C6C  00A9               	movwf	process_10@p_flag^(0+128)
  4620  0C6D  0834               	movf	process_100@p_buf^(0+128),w
  4621  0C6E  00B6               	movwf	(??_process_100+1)^(0+128)
  4622  0C6F  0836               	movf	(??_process_100+1)^(0+128),w
  4623  0C70  00AA               	movwf	process_10@p_buf^(0+128)
  4624  0C71  0839               	movf	process_100@remainder_100^(0+128),w
  4625  0C72  120A  158A  2730   	fcall	_process_10
  4626  0C75  0008               	return
  4627  0C76                     __end_of_process_100:	
  4628                           
  4629                           	psect	text17
  4630  0F30                     __ptext17:	
  4631 ;; *************** function _process_10 *****************
  4632 ;; Defined at:
  4633 ;;		line 85 in file "convert.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;  num             1    wreg     unsigned char 
  4636 ;;  p_flag          1    9[BANK1 ] PTR unsigned char 
  4637 ;;		 -> number_to_string_char@flag(1), 
  4638 ;;  p_buf           1   10[BANK1 ] PTR unsigned char 
  4639 ;;		 -> main@temp_buf_c(5), 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  num             1   18[BANK1 ] unsigned char 
  4642 ;;  i               1   17[BANK1 ] unsigned char 
  4643 ;;  val             1   16[BANK1 ] unsigned char 
  4644 ;;  remainder_10    1   15[BANK1 ] unsigned char 
  4645 ;;  divide_10       1   14[BANK1 ] unsigned char 
  4646 ;; Return value:  Size  Location     Type
  4647 ;;		None               void
  4648 ;; Registers used:
  4649 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4655 ;;      Params:         0       0       2       0       0
  4656 ;;      Locals:         0       0       5       0       0
  4657 ;;      Temps:          0       0       3       0       0
  4658 ;;      Totals:         0       0      10       0       0
  4659 ;;Total ram usage:       10 bytes
  4660 ;; Hardware stack levels used:    1
  4661 ;; Hardware stack levels required when called:    4
  4662 ;; This function calls:
  4663 ;;		___awdiv
  4664 ;;		___awmod
  4665 ;;		_process_1
  4666 ;; This function is called by:
  4667 ;;		_number_to_string_char
  4668 ;;		_process_100
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           
  4673                           ;psect for function _process_10
  4674  0F30                     _process_10:	
  4675                           
  4676                           ;incstack = 0
  4677                           ; Regs used in _process_10: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4678                           ;process_10@num stored from wreg
  4679  0F30  1683               	bsf	3,5	;RP0=1, select bank1
  4680  0F31  1303               	bcf	3,6	;RP1=0, select bank1
  4681  0F32  00B2               	movwf	process_10@num^(0+128)
  4682                           
  4683                           ;convert.c: 87: uint8_t divide_10 = num / 10;
  4684  0F33  300A               	movlw	10
  4685  0F34  00A0               	movwf	___awdiv@divisor^(0+128)
  4686  0F35  3000               	movlw	0
  4687  0F36  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  4688  0F37  0832               	movf	process_10@num^(0+128),w
  4689  0F38  00AB               	movwf	??_process_10^(0+128)
  4690  0F39  01AC               	clrf	(??_process_10^(0+128)+1)
  4691  0F3A  082B               	movf	??_process_10^(0+128),w
  4692  0F3B  00A2               	movwf	___awdiv@dividend^(0+128)
  4693  0F3C  082C               	movf	(??_process_10+1)^(0+128),w
  4694  0F3D  00A3               	movwf	(___awdiv@dividend+1)^(0+128)
  4695  0F3E  120A  158A  267A  120A  158A  	fcall	___awdiv
  4696  0F43  1683               	bsf	3,5	;RP0=1, select bank1
  4697  0F44  1303               	bcf	3,6	;RP1=0, select bank1
  4698  0F45  0820               	movf	?___awdiv^(0+128),w
  4699  0F46  00AD               	movwf	(??_process_10+2)^(0+128)
  4700  0F47  082D               	movf	(??_process_10+2)^(0+128),w
  4701  0F48  00AE               	movwf	process_10@divide_10^(0+128)
  4702                           
  4703                           ;convert.c: 88: uint8_t remainder_10 = num % 10;
  4704  0F49  300A               	movlw	10
  4705  0F4A  00A0               	movwf	___awmod@divisor^(0+128)
  4706  0F4B  3000               	movlw	0
  4707  0F4C  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  4708  0F4D  0832               	movf	process_10@num^(0+128),w
  4709  0F4E  00AB               	movwf	??_process_10^(0+128)
  4710  0F4F  01AC               	clrf	(??_process_10^(0+128)+1)
  4711  0F50  082B               	movf	??_process_10^(0+128),w
  4712  0F51  00A2               	movwf	___awmod@dividend^(0+128)
  4713  0F52  082C               	movf	(??_process_10+1)^(0+128),w
  4714  0F53  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  4715  0F54  120A  158A  2579  120A  158A  	fcall	___awmod
  4716  0F59  1683               	bsf	3,5	;RP0=1, select bank1
  4717  0F5A  1303               	bcf	3,6	;RP1=0, select bank1
  4718  0F5B  0820               	movf	?___awmod^(0+128),w
  4719  0F5C  00AD               	movwf	(??_process_10+2)^(0+128)
  4720  0F5D  082D               	movf	(??_process_10+2)^(0+128),w
  4721  0F5E  00AF               	movwf	process_10@remainder_10^(0+128)
  4722                           
  4723                           ;convert.c: 89: uint8_t val = (48);
  4724  0F5F  3030               	movlw	48
  4725  0F60  00AB               	movwf	??_process_10^(0+128)
  4726  0F61  082B               	movf	??_process_10^(0+128),w
  4727  0F62  00B0               	movwf	process_10@val^(0+128)
  4728                           
  4729                           ;convert.c: 90: uint8_t i;
  4730                           ;convert.c: 92: for(i = 0; i < divide_10; i++)
  4731  0F63  01B1               	clrf	process_10@i^(0+128)
  4732  0F64                     l2603:	
  4733  0F64  082E               	movf	process_10@divide_10^(0+128),w
  4734  0F65  0231               	subwf	process_10@i^(0+128),w
  4735  0F66  1803               	btfsc	3,0
  4736  0F67  2F71               	goto	l2605
  4737                           
  4738                           ;convert.c: 93: {
  4739                           ;convert.c: 94: val++;
  4740  0F68  3001               	movlw	1
  4741  0F69  00AB               	movwf	??_process_10^(0+128)
  4742  0F6A  082B               	movf	??_process_10^(0+128),w
  4743  0F6B  07B0               	addwf	process_10@val^(0+128),f
  4744  0F6C  3001               	movlw	1
  4745  0F6D  00AB               	movwf	??_process_10^(0+128)
  4746  0F6E  082B               	movf	??_process_10^(0+128),w
  4747  0F6F  07B1               	addwf	process_10@i^(0+128),f
  4748  0F70  2F64               	goto	l2603
  4749  0F71                     l2605:	
  4750                           
  4751                           ;convert.c: 95: }
  4752                           ;convert.c: 97: p_buf[*p_flag] = val;
  4753  0F71  0830               	movf	process_10@val^(0+128),w
  4754  0F72  00AB               	movwf	??_process_10^(0+128)
  4755  0F73  0829               	movf	process_10@p_flag^(0+128),w
  4756  0F74  0084               	movwf	4
  4757  0F75  1383               	bcf	3,7	;select IRP bank0
  4758  0F76  0800               	movf	0,w
  4759  0F77  072A               	addwf	process_10@p_buf^(0+128),w
  4760  0F78  00AC               	movwf	(??_process_10+1)^(0+128)
  4761  0F79  082C               	movf	(??_process_10+1)^(0+128),w
  4762  0F7A  0084               	movwf	4
  4763  0F7B  082B               	movf	??_process_10^(0+128),w
  4764  0F7C  1783               	bsf	3,7	;select IRP bank2
  4765  0F7D  0080               	movwf	0
  4766                           
  4767                           ;convert.c: 98: (*p_flag)++;
  4768  0F7E  3001               	movlw	1
  4769  0F7F  00AB               	movwf	??_process_10^(0+128)
  4770  0F80  0829               	movf	process_10@p_flag^(0+128),w
  4771  0F81  0084               	movwf	4
  4772  0F82  082B               	movf	??_process_10^(0+128),w
  4773  0F83  1383               	bcf	3,7	;select IRP bank0
  4774  0F84  0780               	addwf	0,f
  4775                           
  4776                           ;convert.c: 100: process_1(remainder_10, p_flag, p_buf);
  4777  0F85  0829               	movf	process_10@p_flag^(0+128),w
  4778  0F86  00AB               	movwf	??_process_10^(0+128)
  4779  0F87  082B               	movf	??_process_10^(0+128),w
  4780  0F88  00A0               	movwf	process_1@p_flag^(0+128)
  4781  0F89  082A               	movf	process_10@p_buf^(0+128),w
  4782  0F8A  00AC               	movwf	(??_process_10+1)^(0+128)
  4783  0F8B  082C               	movf	(??_process_10+1)^(0+128),w
  4784  0F8C  00A1               	movwf	process_1@p_buf^(0+128)
  4785  0F8D  082F               	movf	process_10@remainder_10^(0+128),w
  4786  0F8E  120A  158A  2534   	fcall	_process_1
  4787  0F91  0008               	return
  4788  0F92                     __end_of_process_10:	
  4789                           
  4790                           	psect	text18
  4791  0D34                     __ptext18:	
  4792 ;; *************** function _process_1 *****************
  4793 ;; Defined at:
  4794 ;;		line 107 in file "convert.c"
  4795 ;; Parameters:    Size  Location     Type
  4796 ;;  num             1    wreg     unsigned char 
  4797 ;;  p_flag          1    0[BANK1 ] PTR unsigned char 
  4798 ;;		 -> number_to_string_char@flag(1), 
  4799 ;;  p_buf           1    1[BANK1 ] PTR unsigned char 
  4800 ;;		 -> main@temp_buf_c(5), 
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;  num             1    4[BANK1 ] unsigned char 
  4803 ;;  i               2    6[BANK1 ] int 
  4804 ;;  val             1    8[BANK1 ] unsigned char 
  4805 ;;  divide_1        1    5[BANK1 ] unsigned char 
  4806 ;; Return value:  Size  Location     Type
  4807 ;;		None               void
  4808 ;; Registers used:
  4809 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4815 ;;      Params:         0       0       2       0       0
  4816 ;;      Locals:         0       0       5       0       0
  4817 ;;      Temps:          0       0       2       0       0
  4818 ;;      Totals:         0       0       9       0       0
  4819 ;;Total ram usage:        9 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; Hardware stack levels required when called:    3
  4822 ;; This function calls:
  4823 ;;		Nothing
  4824 ;; This function is called by:
  4825 ;;		_process_10
  4826 ;; This function uses a non-reentrant model
  4827 ;;
  4828                           
  4829                           
  4830                           ;psect for function _process_1
  4831  0D34                     _process_1:	
  4832                           
  4833                           ;incstack = 0
  4834                           ; Regs used in _process_1: [wreg-fsr0h+status,2+status,0]
  4835                           ;process_1@num stored from wreg
  4836  0D34  1683               	bsf	3,5	;RP0=1, select bank1
  4837  0D35  1303               	bcf	3,6	;RP1=0, select bank1
  4838  0D36  00A4               	movwf	process_1@num^(0+128)
  4839                           
  4840                           ;convert.c: 109: uint8_t divide_1 = num;
  4841  0D37  0824               	movf	process_1@num^(0+128),w
  4842  0D38  00A2               	movwf	??_process_1^(0+128)
  4843  0D39  0822               	movf	??_process_1^(0+128),w
  4844  0D3A  00A5               	movwf	process_1@divide_1^(0+128)
  4845                           
  4846                           ;convert.c: 110: uint8_t val = (48);
  4847  0D3B  3030               	movlw	48
  4848  0D3C  00A2               	movwf	??_process_1^(0+128)
  4849  0D3D  0822               	movf	??_process_1^(0+128),w
  4850  0D3E  00A8               	movwf	process_1@val^(0+128)
  4851                           
  4852                           ;convert.c: 111: int i;
  4853                           ;convert.c: 113: for(i = 0; i < divide_1; i++)
  4854  0D3F  01A6               	clrf	process_1@i^(0+128)
  4855  0D40  01A7               	clrf	(process_1@i+1)^(0+128)
  4856  0D41                     l2489:	
  4857  0D41  0827               	movf	(process_1@i+1)^(0+128),w
  4858  0D42  3A80               	xorlw	128
  4859  0D43  00A2               	movwf	??_process_1^(0+128)
  4860  0D44  3080               	movlw	128
  4861  0D45  0222               	subwf	??_process_1^(0+128),w
  4862  0D46  1D03               	skipz
  4863  0D47  2D4A               	goto	u2345
  4864  0D48  0825               	movf	process_1@divide_1^(0+128),w
  4865  0D49  0226               	subwf	process_1@i^(0+128),w
  4866  0D4A                     u2345:	
  4867  0D4A  1803               	btfsc	3,0
  4868  0D4B  2D59               	goto	l2491
  4869                           
  4870                           ;convert.c: 114: {
  4871                           ;convert.c: 115: val++;
  4872  0D4C  3001               	movlw	1
  4873  0D4D  1683               	bsf	3,5	;RP0=1, select bank1
  4874  0D4E  1303               	bcf	3,6	;RP1=0, select bank1
  4875  0D4F  00A2               	movwf	??_process_1^(0+128)
  4876  0D50  0822               	movf	??_process_1^(0+128),w
  4877  0D51  07A8               	addwf	process_1@val^(0+128),f
  4878  0D52  3001               	movlw	1
  4879  0D53  07A6               	addwf	process_1@i^(0+128),f
  4880  0D54  1803               	skipnc
  4881  0D55  0AA7               	incf	(process_1@i+1)^(0+128),f
  4882  0D56  3000               	movlw	0
  4883  0D57  07A7               	addwf	(process_1@i+1)^(0+128),f
  4884  0D58  2D41               	goto	l2489
  4885  0D59                     l2491:	
  4886                           
  4887                           ;convert.c: 116: }
  4888                           ;convert.c: 118: p_buf[*p_flag] = val;
  4889  0D59  1683               	bsf	3,5	;RP0=1, select bank1
  4890  0D5A  1303               	bcf	3,6	;RP1=0, select bank1
  4891  0D5B  0828               	movf	process_1@val^(0+128),w
  4892  0D5C  00A2               	movwf	??_process_1^(0+128)
  4893  0D5D  0820               	movf	process_1@p_flag^(0+128),w
  4894  0D5E  0084               	movwf	4
  4895  0D5F  1383               	bcf	3,7	;select IRP bank0
  4896  0D60  0800               	movf	0,w
  4897  0D61  0721               	addwf	process_1@p_buf^(0+128),w
  4898  0D62  00A3               	movwf	(??_process_1+1)^(0+128)
  4899  0D63  0823               	movf	(??_process_1+1)^(0+128),w
  4900  0D64  0084               	movwf	4
  4901  0D65  0822               	movf	??_process_1^(0+128),w
  4902  0D66  1783               	bsf	3,7	;select IRP bank2
  4903  0D67  0080               	movwf	0
  4904                           
  4905                           ;convert.c: 119: (*p_flag)++;
  4906  0D68  3001               	movlw	1
  4907  0D69  00A2               	movwf	??_process_1^(0+128)
  4908  0D6A  0820               	movf	process_1@p_flag^(0+128),w
  4909  0D6B  0084               	movwf	4
  4910  0D6C  0822               	movf	??_process_1^(0+128),w
  4911  0D6D  1383               	bcf	3,7	;select IRP bank0
  4912  0D6E  0780               	addwf	0,f
  4913                           
  4914                           ;convert.c: 121: p_buf[*p_flag] = '\0';
  4915  0D6F  0820               	movf	process_1@p_flag^(0+128),w
  4916  0D70  0084               	movwf	4
  4917  0D71  0800               	movf	0,w
  4918  0D72  0721               	addwf	process_1@p_buf^(0+128),w
  4919  0D73  00A2               	movwf	??_process_1^(0+128)
  4920  0D74  0822               	movf	??_process_1^(0+128),w
  4921  0D75  0084               	movwf	4
  4922  0D76  1783               	bsf	3,7	;select IRP bank2
  4923  0D77  0180               	clrf	0
  4924  0D78  0008               	return
  4925  0D79                     __end_of_process_1:	
  4926                           
  4927                           	psect	text19
  4928  0D79                     __ptext19:	
  4929 ;; *************** function ___awmod *****************
  4930 ;; Defined at:
  4931 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  4932 ;; Parameters:    Size  Location     Type
  4933 ;;  divisor         2    0[BANK1 ] int 
  4934 ;;  dividend        2    2[BANK1 ] int 
  4935 ;; Auto vars:     Size  Location     Type
  4936 ;;  sign            1    6[BANK1 ] unsigned char 
  4937 ;;  counter         1    5[BANK1 ] unsigned char 
  4938 ;; Return value:  Size  Location     Type
  4939 ;;                  2    0[BANK1 ] int 
  4940 ;; Registers used:
  4941 ;;		wreg, status,2, status,0
  4942 ;; Tracked objects:
  4943 ;;		On entry : 0/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4947 ;;      Params:         0       0       4       0       0
  4948 ;;      Locals:         0       0       2       0       0
  4949 ;;      Temps:          0       0       1       0       0
  4950 ;;      Totals:         0       0       7       0       0
  4951 ;;Total ram usage:        7 bytes
  4952 ;; Hardware stack levels used:    1
  4953 ;; Hardware stack levels required when called:    3
  4954 ;; This function calls:
  4955 ;;		Nothing
  4956 ;; This function is called by:
  4957 ;;		_process_100
  4958 ;;		_process_10
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           
  4963                           ;psect for function ___awmod
  4964  0D79                     ___awmod:	
  4965                           
  4966                           ;incstack = 0
  4967                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4968  0D79  1683               	bsf	3,5	;RP0=1, select bank1
  4969  0D7A  1303               	bcf	3,6	;RP1=0, select bank1
  4970  0D7B  01A6               	clrf	___awmod@sign^(0+128)
  4971  0D7C  1FA3               	btfss	(___awmod@dividend+1)^(0+128),7
  4972  0D7D  2D85               	goto	l2545
  4973  0D7E  09A2               	comf	___awmod@dividend^(0+128),f
  4974  0D7F  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  4975  0D80  0AA2               	incf	___awmod@dividend^(0+128),f
  4976  0D81  1903               	skipnz
  4977  0D82  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  4978  0D83  01A6               	clrf	___awmod@sign^(0+128)
  4979  0D84  0AA6               	incf	___awmod@sign^(0+128),f
  4980  0D85                     l2545:	
  4981  0D85  1FA1               	btfss	(___awmod@divisor+1)^(0+128),7
  4982  0D86  2D8C               	goto	l2549
  4983  0D87  09A0               	comf	___awmod@divisor^(0+128),f
  4984  0D88  09A1               	comf	(___awmod@divisor+1)^(0+128),f
  4985  0D89  0AA0               	incf	___awmod@divisor^(0+128),f
  4986  0D8A  1903               	skipnz
  4987  0D8B  0AA1               	incf	(___awmod@divisor+1)^(0+128),f
  4988  0D8C                     l2549:	
  4989  0D8C  0820               	movf	___awmod@divisor^(0+128),w
  4990  0D8D  0421               	iorwf	(___awmod@divisor+1)^(0+128),w
  4991  0D8E  1903               	btfsc	3,2
  4992  0D8F  2DB9               	goto	l2567
  4993  0D90  01A5               	clrf	___awmod@counter^(0+128)
  4994  0D91  0AA5               	incf	___awmod@counter^(0+128),f
  4995  0D92                     l2557:	
  4996  0D92  1BA1               	btfsc	(___awmod@divisor+1)^(0+128),7
  4997  0D93  2DA0               	goto	l2559
  4998  0D94  3001               	movlw	1
  4999  0D95                     u2485:	
  5000  0D95  1003               	clrc
  5001  0D96  0DA0               	rlf	___awmod@divisor^(0+128),f
  5002  0D97  0DA1               	rlf	(___awmod@divisor+1)^(0+128),f
  5003  0D98  3EFF               	addlw	-1
  5004  0D99  1D03               	skipz
  5005  0D9A  2D95               	goto	u2485
  5006  0D9B  3001               	movlw	1
  5007  0D9C  00A4               	movwf	??___awmod^(0+128)
  5008  0D9D  0824               	movf	??___awmod^(0+128),w
  5009  0D9E  07A5               	addwf	___awmod@counter^(0+128),f
  5010  0D9F  2D92               	goto	l2557
  5011  0DA0                     l2559:	
  5012  0DA0  0821               	movf	(___awmod@divisor+1)^(0+128),w
  5013  0DA1  0223               	subwf	(___awmod@dividend+1)^(0+128),w
  5014  0DA2  1D03               	skipz
  5015  0DA3  2DA6               	goto	u2505
  5016  0DA4  0820               	movf	___awmod@divisor^(0+128),w
  5017  0DA5  0222               	subwf	___awmod@dividend^(0+128),w
  5018  0DA6                     u2505:	
  5019  0DA6  1C03               	skipc
  5020  0DA7  2DAE               	goto	l2563
  5021  0DA8  0820               	movf	___awmod@divisor^(0+128),w
  5022  0DA9  02A2               	subwf	___awmod@dividend^(0+128),f
  5023  0DAA  0821               	movf	(___awmod@divisor+1)^(0+128),w
  5024  0DAB  1C03               	skipc
  5025  0DAC  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  5026  0DAD  02A3               	subwf	(___awmod@dividend+1)^(0+128),f
  5027  0DAE                     l2563:	
  5028  0DAE  3001               	movlw	1
  5029  0DAF                     u2515:	
  5030  0DAF  1003               	clrc
  5031  0DB0  0CA1               	rrf	(___awmod@divisor+1)^(0+128),f
  5032  0DB1  0CA0               	rrf	___awmod@divisor^(0+128),f
  5033  0DB2  3EFF               	addlw	-1
  5034  0DB3  1D03               	skipz
  5035  0DB4  2DAF               	goto	u2515
  5036  0DB5  3001               	movlw	1
  5037  0DB6  02A5               	subwf	___awmod@counter^(0+128),f
  5038  0DB7  1D03               	btfss	3,2
  5039  0DB8  2DA0               	goto	l2559
  5040  0DB9                     l2567:	
  5041  0DB9  0826               	movf	___awmod@sign^(0+128),w
  5042  0DBA  1903               	btfsc	3,2
  5043  0DBB  2DC1               	goto	l2571
  5044  0DBC  09A2               	comf	___awmod@dividend^(0+128),f
  5045  0DBD  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  5046  0DBE  0AA2               	incf	___awmod@dividend^(0+128),f
  5047  0DBF  1903               	skipnz
  5048  0DC0  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  5049  0DC1                     l2571:	
  5050  0DC1  0823               	movf	(___awmod@dividend+1)^(0+128),w
  5051  0DC2  00A1               	movwf	(?___awmod+1)^(0+128)
  5052  0DC3  0822               	movf	___awmod@dividend^(0+128),w
  5053  0DC4  00A0               	movwf	?___awmod^(0+128)
  5054  0DC5  0008               	return
  5055  0DC6                     __end_of___awmod:	
  5056                           
  5057                           	psect	text20
  5058  0E7A                     __ptext20:	
  5059 ;; *************** function ___awdiv *****************
  5060 ;; Defined at:
  5061 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;  divisor         2    0[BANK1 ] int 
  5064 ;;  dividend        2    2[BANK1 ] int 
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;  quotient        2    7[BANK1 ] int 
  5067 ;;  sign            1    6[BANK1 ] unsigned char 
  5068 ;;  counter         1    5[BANK1 ] unsigned char 
  5069 ;; Return value:  Size  Location     Type
  5070 ;;                  2    0[BANK1 ] int 
  5071 ;; Registers used:
  5072 ;;		wreg, status,2, status,0
  5073 ;; Tracked objects:
  5074 ;;		On entry : 0/0
  5075 ;;		On exit  : 0/0
  5076 ;;		Unchanged: 0/0
  5077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5078 ;;      Params:         0       0       4       0       0
  5079 ;;      Locals:         0       0       4       0       0
  5080 ;;      Temps:          0       0       1       0       0
  5081 ;;      Totals:         0       0       9       0       0
  5082 ;;Total ram usage:        9 bytes
  5083 ;; Hardware stack levels used:    1
  5084 ;; Hardware stack levels required when called:    3
  5085 ;; This function calls:
  5086 ;;		Nothing
  5087 ;; This function is called by:
  5088 ;;		_process_10
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           
  5093                           ;psect for function ___awdiv
  5094  0E7A                     ___awdiv:	
  5095                           
  5096                           ;incstack = 0
  5097                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5098  0E7A  1683               	bsf	3,5	;RP0=1, select bank1
  5099  0E7B  1303               	bcf	3,6	;RP1=0, select bank1
  5100  0E7C  01A6               	clrf	___awdiv@sign^(0+128)
  5101  0E7D  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
  5102  0E7E  2E86               	goto	l2501
  5103  0E7F  09A0               	comf	___awdiv@divisor^(0+128),f
  5104  0E80  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
  5105  0E81  0AA0               	incf	___awdiv@divisor^(0+128),f
  5106  0E82  1903               	skipnz
  5107  0E83  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
  5108  0E84  01A6               	clrf	___awdiv@sign^(0+128)
  5109  0E85  0AA6               	incf	___awdiv@sign^(0+128),f
  5110  0E86                     l2501:	
  5111  0E86  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
  5112  0E87  2E91               	goto	l2507
  5113  0E88  09A2               	comf	___awdiv@dividend^(0+128),f
  5114  0E89  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
  5115  0E8A  0AA2               	incf	___awdiv@dividend^(0+128),f
  5116  0E8B  1903               	skipnz
  5117  0E8C  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
  5118  0E8D  3001               	movlw	1
  5119  0E8E  00A4               	movwf	??___awdiv^(0+128)
  5120  0E8F  0824               	movf	??___awdiv^(0+128),w
  5121  0E90  06A6               	xorwf	___awdiv@sign^(0+128),f
  5122  0E91                     l2507:	
  5123  0E91  01A7               	clrf	___awdiv@quotient^(0+128)
  5124  0E92  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
  5125  0E93  0820               	movf	___awdiv@divisor^(0+128),w
  5126  0E94  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
  5127  0E95  1903               	btfsc	3,2
  5128  0E96  2EC8               	goto	l2529
  5129  0E97  01A5               	clrf	___awdiv@counter^(0+128)
  5130  0E98  0AA5               	incf	___awdiv@counter^(0+128),f
  5131  0E99                     l2517:	
  5132  0E99  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
  5133  0E9A  2EA7               	goto	l2519
  5134  0E9B  3001               	movlw	1
  5135  0E9C                     u2385:	
  5136  0E9C  1003               	clrc
  5137  0E9D  0DA0               	rlf	___awdiv@divisor^(0+128),f
  5138  0E9E  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
  5139  0E9F  3EFF               	addlw	-1
  5140  0EA0  1D03               	skipz
  5141  0EA1  2E9C               	goto	u2385
  5142  0EA2  3001               	movlw	1
  5143  0EA3  00A4               	movwf	??___awdiv^(0+128)
  5144  0EA4  0824               	movf	??___awdiv^(0+128),w
  5145  0EA5  07A5               	addwf	___awdiv@counter^(0+128),f
  5146  0EA6  2E99               	goto	l2517
  5147  0EA7                     l2519:	
  5148  0EA7  3001               	movlw	1
  5149  0EA8                     u2405:	
  5150  0EA8  1003               	clrc
  5151  0EA9  0DA7               	rlf	___awdiv@quotient^(0+128),f
  5152  0EAA  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
  5153  0EAB  3EFF               	addlw	-1
  5154  0EAC  1D03               	skipz
  5155  0EAD  2EA8               	goto	u2405
  5156  0EAE  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  5157  0EAF  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
  5158  0EB0  1D03               	skipz
  5159  0EB1  2EB4               	goto	u2415
  5160  0EB2  0820               	movf	___awdiv@divisor^(0+128),w
  5161  0EB3  0222               	subwf	___awdiv@dividend^(0+128),w
  5162  0EB4                     u2415:	
  5163  0EB4  1C03               	skipc
  5164  0EB5  2EBD               	goto	l2525
  5165  0EB6  0820               	movf	___awdiv@divisor^(0+128),w
  5166  0EB7  02A2               	subwf	___awdiv@dividend^(0+128),f
  5167  0EB8  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  5168  0EB9  1C03               	skipc
  5169  0EBA  03A3               	decf	(___awdiv@dividend+1)^(0+128),f
  5170  0EBB  02A3               	subwf	(___awdiv@dividend+1)^(0+128),f
  5171  0EBC  1427               	bsf	___awdiv@quotient^(0+128),0
  5172  0EBD                     l2525:	
  5173  0EBD  3001               	movlw	1
  5174  0EBE                     u2425:	
  5175  0EBE  1003               	clrc
  5176  0EBF  0CA1               	rrf	(___awdiv@divisor+1)^(0+128),f
  5177  0EC0  0CA0               	rrf	___awdiv@divisor^(0+128),f
  5178  0EC1  3EFF               	addlw	-1
  5179  0EC2  1D03               	skipz
  5180  0EC3  2EBE               	goto	u2425
  5181  0EC4  3001               	movlw	1
  5182  0EC5  02A5               	subwf	___awdiv@counter^(0+128),f
  5183  0EC6  1D03               	btfss	3,2
  5184  0EC7  2EA7               	goto	l2519
  5185  0EC8                     l2529:	
  5186  0EC8  0826               	movf	___awdiv@sign^(0+128),w
  5187  0EC9  1903               	btfsc	3,2
  5188  0ECA  2ED0               	goto	l2533
  5189  0ECB  09A7               	comf	___awdiv@quotient^(0+128),f
  5190  0ECC  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
  5191  0ECD  0AA7               	incf	___awdiv@quotient^(0+128),f
  5192  0ECE  1903               	skipnz
  5193  0ECF  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
  5194  0ED0                     l2533:	
  5195  0ED0  0828               	movf	(___awdiv@quotient+1)^(0+128),w
  5196  0ED1  00A1               	movwf	(?___awdiv+1)^(0+128)
  5197  0ED2  0827               	movf	___awdiv@quotient^(0+128),w
  5198  0ED3  00A0               	movwf	?___awdiv^(0+128)
  5199  0ED4  0008               	return
  5200  0ED5                     __end_of___awdiv:	
  5201                           
  5202                           	psect	text21
  5203  09B4                     __ptext21:	
  5204 ;; *************** function ___bmul *****************
  5205 ;; Defined at:
  5206 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul8.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;  multiplier      1    wreg     unsigned char 
  5209 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  5210 ;; Auto vars:     Size  Location     Type
  5211 ;;  multiplier      1    3[BANK1 ] unsigned char 
  5212 ;;  product         1    2[BANK1 ] unsigned char 
  5213 ;; Return value:  Size  Location     Type
  5214 ;;                  1    wreg      unsigned char 
  5215 ;; Registers used:
  5216 ;;		wreg, status,2, status,0
  5217 ;; Tracked objects:
  5218 ;;		On entry : 0/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5222 ;;      Params:         0       0       1       0       0
  5223 ;;      Locals:         0       0       2       0       0
  5224 ;;      Temps:          0       0       1       0       0
  5225 ;;      Totals:         0       0       4       0       0
  5226 ;;Total ram usage:        4 bytes
  5227 ;; Hardware stack levels used:    1
  5228 ;; Hardware stack levels required when called:    3
  5229 ;; This function calls:
  5230 ;;		Nothing
  5231 ;; This function is called by:
  5232 ;;		_number_to_string_char
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           
  5237                           ;psect for function ___bmul
  5238  09B4                     ___bmul:	
  5239                           
  5240                           ;incstack = 0
  5241                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5242                           ;___bmul@multiplier stored from wreg
  5243  09B4  1683               	bsf	3,5	;RP0=1, select bank1
  5244  09B5  1303               	bcf	3,6	;RP1=0, select bank1
  5245  09B6  00A3               	movwf	___bmul@multiplier^(0+128)
  5246  09B7  01A2               	clrf	___bmul@product^(0+128)
  5247  09B8                     l2755:	
  5248  09B8  1C23               	btfss	___bmul@multiplier^(0+128),0
  5249  09B9  29BE               	goto	l2759
  5250  09BA  0820               	movf	___bmul@multiplicand^(0+128),w
  5251  09BB  00A1               	movwf	??___bmul^(0+128)
  5252  09BC  0821               	movf	??___bmul^(0+128),w
  5253  09BD  07A2               	addwf	___bmul@product^(0+128),f
  5254  09BE                     l2759:	
  5255  09BE  1003               	clrc
  5256  09BF  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  5257  09C0  1003               	clrc
  5258  09C1  0CA3               	rrf	___bmul@multiplier^(0+128),f
  5259  09C2  0823               	movf	___bmul@multiplier^(0+128),w
  5260  09C3  1D03               	btfss	3,2
  5261  09C4  29B8               	goto	l2755
  5262  09C5  0822               	movf	___bmul@product^(0+128),w
  5263  09C6  0008               	return
  5264  09C7                     __end_of___bmul:	
  5265                           
  5266                           	psect	text22
  5267  0760                     __ptext22:	
  5268 ;; *************** function _get_pt *****************
  5269 ;; Defined at:
  5270 ;;		line 50 in file "light.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;  volt            3   44[BANK1 ] unsigned char 
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;  light           3    0[BANK3 ] unsigned char 
  5275 ;; Return value:  Size  Location     Type
  5276 ;;                  3   44[BANK1 ] unsigned char 
  5277 ;; Registers used:
  5278 ;;		wreg, status,2, status,0, pclath, cstack
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5284 ;;      Params:         0       0       3       0       0
  5285 ;;      Locals:         0       0       0       6       0
  5286 ;;      Temps:          0       0       0       0       0
  5287 ;;      Totals:         0       0       3       6       0
  5288 ;;Total ram usage:        9 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    5
  5291 ;; This function calls:
  5292 ;;		___ftdiv
  5293 ;;		___ftmul
  5294 ;; This function is called by:
  5295 ;;		_main
  5296 ;; This function uses a non-reentrant model
  5297 ;;
  5298                           
  5299                           
  5300                           ;psect for function _get_pt
  5301  0760                     _get_pt:	
  5302                           
  5303                           ;light.c: 52: double light;
  5304                           ;light.c: 54: light = ((volt*(10.0*10.0*10.0*10.0*10.0*10.0))/(10.0*(10.0*10.0*10.0)*1.1
      +                          25))/4.0;
  5305                           
  5306                           ;incstack = 0
  5307                           ; Regs used in _get_pt: [wreg+status,2+status,0+pclath+cstack]
  5308  0760  30C8               	movlw	200
  5309  0761  1683               	bsf	3,5	;RP0=1, select bank1
  5310  0762  1303               	bcf	3,6	;RP1=0, select bank1
  5311  0763  00BC               	movwf	___ftdiv@f2^(0+128)
  5312  0764  302F               	movlw	47
  5313  0765  00BD               	movwf	(___ftdiv@f2+1)^(0+128)
  5314  0766  3046               	movlw	70
  5315  0767  00BE               	movwf	(___ftdiv@f2+2)^(0+128)
  5316  0768  3024               	movlw	36
  5317  0769  00AC               	movwf	___ftmul@f1^(0+128)
  5318  076A  3074               	movlw	116
  5319  076B  00AD               	movwf	(___ftmul@f1+1)^(0+128)
  5320  076C  3049               	movlw	73
  5321  076D  00AE               	movwf	(___ftmul@f1+2)^(0+128)
  5322  076E  084C               	movf	get_pt@volt^(0+128),w
  5323  076F  00AF               	movwf	___ftmul@f2^(0+128)
  5324  0770  084D               	movf	(get_pt@volt+1)^(0+128),w
  5325  0771  00B0               	movwf	(___ftmul@f2+1)^(0+128)
  5326  0772  084E               	movf	(get_pt@volt+2)^(0+128),w
  5327  0773  00B1               	movwf	(___ftmul@f2+2)^(0+128)
  5328  0774  120A  118A  2547  120A  118A  	fcall	___ftmul
  5329  0779  1683               	bsf	3,5	;RP0=1, select bank1
  5330  077A  1303               	bcf	3,6	;RP1=0, select bank1
  5331  077B  082C               	movf	?___ftmul^(0+128),w
  5332  077C  00BF               	movwf	___ftdiv@f1^(0+128)
  5333  077D  082D               	movf	(?___ftmul+1)^(0+128),w
  5334  077E  00C0               	movwf	(___ftdiv@f1+1)^(0+128)
  5335  077F  082E               	movf	(?___ftmul+2)^(0+128),w
  5336  0780  00C1               	movwf	(___ftdiv@f1+2)^(0+128)
  5337  0781  120A  118A  261A  120A  118A  	fcall	___ftdiv
  5338  0786  1683               	bsf	3,5	;RP0=1, select bank1
  5339  0787  1303               	bcf	3,6	;RP1=0, select bank1
  5340  0788  083C               	movf	?___ftdiv^(0+128),w
  5341  0789  1683               	bsf	3,5	;RP0=1, select bank3
  5342  078A  1703               	bsf	3,6	;RP1=1, select bank3
  5343  078B  00A2               	movwf	_get_pt$1195^(0+384)
  5344  078C  1683               	bsf	3,5	;RP0=1, select bank1
  5345  078D  1303               	bcf	3,6	;RP1=0, select bank1
  5346  078E  083D               	movf	(?___ftdiv+1)^(0+128),w
  5347  078F  1683               	bsf	3,5	;RP0=1, select bank3
  5348  0790  1703               	bsf	3,6	;RP1=1, select bank3
  5349  0791  00A3               	movwf	(_get_pt$1195+1)^(0+384)
  5350  0792  1683               	bsf	3,5	;RP0=1, select bank1
  5351  0793  1303               	bcf	3,6	;RP1=0, select bank1
  5352  0794  083E               	movf	(?___ftdiv+2)^(0+128),w
  5353  0795  1683               	bsf	3,5	;RP0=1, select bank3
  5354  0796  1703               	bsf	3,6	;RP1=1, select bank3
  5355  0797  00A4               	movwf	(_get_pt$1195+2)^(0+384)
  5356                           
  5357                           ;light.c: 52: double light;
  5358                           ;light.c: 54: light = ((volt*(10.0*10.0*10.0*10.0*10.0*10.0))/(10.0*(10.0*10.0*10.0)*1.1
      +                          25))/4.0;
  5359  0798  3000               	movlw	0
  5360  0799  1683               	bsf	3,5	;RP0=1, select bank1
  5361  079A  1303               	bcf	3,6	;RP1=0, select bank1
  5362  079B  00BC               	movwf	___ftdiv@f2^(0+128)
  5363  079C  3080               	movlw	128
  5364  079D  00BD               	movwf	(___ftdiv@f2+1)^(0+128)
  5365  079E  3040               	movlw	64
  5366  079F  00BE               	movwf	(___ftdiv@f2+2)^(0+128)
  5367  07A0  1683               	bsf	3,5	;RP0=1, select bank3
  5368  07A1  1703               	bsf	3,6	;RP1=1, select bank3
  5369  07A2  0822               	movf	_get_pt$1195^(0+384),w
  5370  07A3  1683               	bsf	3,5	;RP0=1, select bank1
  5371  07A4  1303               	bcf	3,6	;RP1=0, select bank1
  5372  07A5  00BF               	movwf	___ftdiv@f1^(0+128)
  5373  07A6  1683               	bsf	3,5	;RP0=1, select bank3
  5374  07A7  1703               	bsf	3,6	;RP1=1, select bank3
  5375  07A8  0823               	movf	(_get_pt$1195+1)^(0+384),w
  5376  07A9  1683               	bsf	3,5	;RP0=1, select bank1
  5377  07AA  1303               	bcf	3,6	;RP1=0, select bank1
  5378  07AB  00C0               	movwf	(___ftdiv@f1+1)^(0+128)
  5379  07AC  1683               	bsf	3,5	;RP0=1, select bank3
  5380  07AD  1703               	bsf	3,6	;RP1=1, select bank3
  5381  07AE  0824               	movf	(_get_pt$1195+2)^(0+384),w
  5382  07AF  1683               	bsf	3,5	;RP0=1, select bank1
  5383  07B0  1303               	bcf	3,6	;RP1=0, select bank1
  5384  07B1  00C1               	movwf	(___ftdiv@f1+2)^(0+128)
  5385  07B2  120A  118A  261A   	fcall	___ftdiv
  5386  07B5  1683               	bsf	3,5	;RP0=1, select bank1
  5387  07B6  1303               	bcf	3,6	;RP1=0, select bank1
  5388  07B7  083C               	movf	?___ftdiv^(0+128),w
  5389  07B8  1683               	bsf	3,5	;RP0=1, select bank3
  5390  07B9  1703               	bsf	3,6	;RP1=1, select bank3
  5391  07BA  009F               	movwf	get_pt@light^(0+384)
  5392  07BB  1683               	bsf	3,5	;RP0=1, select bank1
  5393  07BC  1303               	bcf	3,6	;RP1=0, select bank1
  5394  07BD  083D               	movf	(?___ftdiv+1)^(0+128),w
  5395  07BE  1683               	bsf	3,5	;RP0=1, select bank3
  5396  07BF  1703               	bsf	3,6	;RP1=1, select bank3
  5397  07C0  00A0               	movwf	(get_pt@light+1)^(0+384)
  5398  07C1  1683               	bsf	3,5	;RP0=1, select bank1
  5399  07C2  1303               	bcf	3,6	;RP1=0, select bank1
  5400  07C3  083E               	movf	(?___ftdiv+2)^(0+128),w
  5401  07C4  1683               	bsf	3,5	;RP0=1, select bank3
  5402  07C5  1703               	bsf	3,6	;RP1=1, select bank3
  5403  07C6  00A1               	movwf	(get_pt@light+2)^(0+384)
  5404                           
  5405                           ;light.c: 56: return light;
  5406  07C7  081F               	movf	get_pt@light^(0+384),w
  5407  07C8  1683               	bsf	3,5	;RP0=1, select bank1
  5408  07C9  1303               	bcf	3,6	;RP1=0, select bank1
  5409  07CA  00CC               	movwf	?_get_pt^(0+128)
  5410  07CB  1683               	bsf	3,5	;RP0=1, select bank3
  5411  07CC  1703               	bsf	3,6	;RP1=1, select bank3
  5412  07CD  0820               	movf	(get_pt@light+1)^(0+384),w
  5413  07CE  1683               	bsf	3,5	;RP0=1, select bank1
  5414  07CF  1303               	bcf	3,6	;RP1=0, select bank1
  5415  07D0  00CD               	movwf	(?_get_pt+1)^(0+128)
  5416  07D1  1683               	bsf	3,5	;RP0=1, select bank3
  5417  07D2  1703               	bsf	3,6	;RP1=1, select bank3
  5418  07D3  0821               	movf	(get_pt@light+2)^(0+384),w
  5419  07D4  1683               	bsf	3,5	;RP0=1, select bank1
  5420  07D5  1303               	bcf	3,6	;RP1=0, select bank1
  5421  07D6  00CE               	movwf	(?_get_pt+2)^(0+128)
  5422  07D7  0008               	return
  5423  07D8                     __end_of_get_pt:	
  5424                           
  5425                           	psect	text23
  5426  061A                     __ptext23:	
  5427 ;; *************** function ___ftdiv *****************
  5428 ;; Defined at:
  5429 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
  5430 ;; Parameters:    Size  Location     Type
  5431 ;;  f2              3   28[BANK1 ] float 
  5432 ;;  f1              3   31[BANK1 ] float 
  5433 ;; Auto vars:     Size  Location     Type
  5434 ;;  f3              3   39[BANK1 ] float 
  5435 ;;  sign            1   43[BANK1 ] unsigned char 
  5436 ;;  exp             1   42[BANK1 ] unsigned char 
  5437 ;;  cntr            1   38[BANK1 ] unsigned char 
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  3   28[BANK1 ] float 
  5440 ;; Registers used:
  5441 ;;		wreg, status,2, status,0, pclath, cstack
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5447 ;;      Params:         0       0       6       0       0
  5448 ;;      Locals:         0       0       6       0       0
  5449 ;;      Temps:          0       0       4       0       0
  5450 ;;      Totals:         0       0      16       0       0
  5451 ;;Total ram usage:       16 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; Hardware stack levels required when called:    4
  5454 ;; This function calls:
  5455 ;;		___ftpack
  5456 ;; This function is called by:
  5457 ;;		_get_pt
  5458 ;;		_get_temp
  5459 ;; This function uses a non-reentrant model
  5460 ;;
  5461                           
  5462                           
  5463                           ;psect for function ___ftdiv
  5464  061A                     ___ftdiv:	
  5465                           
  5466                           ;incstack = 0
  5467                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5468  061A  1683               	bsf	3,5	;RP0=1, select bank1
  5469  061B  1303               	bcf	3,6	;RP1=0, select bank1
  5470  061C  083F               	movf	___ftdiv@f1^(0+128),w
  5471  061D  00C2               	movwf	??___ftdiv^(0+128)
  5472  061E  0840               	movf	(___ftdiv@f1+1)^(0+128),w
  5473  061F  00C3               	movwf	(??___ftdiv^(0+128)+1)
  5474  0620  0841               	movf	(___ftdiv@f1+2)^(0+128),w
  5475  0621  00C4               	movwf	(??___ftdiv^(0+128)+2)
  5476  0622  1003               	clrc
  5477  0623  0D43               	rlf	(??___ftdiv^(0+128)+1),w
  5478  0624  0D44               	rlf	(??___ftdiv^(0+128)+2),w
  5479  0625  00C5               	movwf	(??___ftdiv+3)^(0+128)
  5480  0626  0845               	movf	(??___ftdiv+3)^(0+128),w
  5481  0627  00CA               	movwf	___ftdiv@exp^(0+128)
  5482  0628  084A               	movf	___ftdiv@exp^(0+128),w
  5483  0629  1D03               	btfss	3,2
  5484  062A  2E32               	goto	l2773
  5485  062B  3000               	movlw	0
  5486  062C  00BC               	movwf	?___ftdiv^(0+128)
  5487  062D  3000               	movlw	0
  5488  062E  00BD               	movwf	(?___ftdiv+1)^(0+128)
  5489  062F  3000               	movlw	0
  5490  0630  00BE               	movwf	(?___ftdiv+2)^(0+128)
  5491  0631  0008               	return
  5492  0632                     l2773:	
  5493  0632  083C               	movf	___ftdiv@f2^(0+128),w
  5494  0633  00C2               	movwf	??___ftdiv^(0+128)
  5495  0634  083D               	movf	(___ftdiv@f2+1)^(0+128),w
  5496  0635  00C3               	movwf	(??___ftdiv^(0+128)+1)
  5497  0636  083E               	movf	(___ftdiv@f2+2)^(0+128),w
  5498  0637  00C4               	movwf	(??___ftdiv^(0+128)+2)
  5499  0638  1003               	clrc
  5500  0639  0D43               	rlf	(??___ftdiv^(0+128)+1),w
  5501  063A  0D44               	rlf	(??___ftdiv^(0+128)+2),w
  5502  063B  00C5               	movwf	(??___ftdiv+3)^(0+128)
  5503  063C  0845               	movf	(??___ftdiv+3)^(0+128),w
  5504  063D  00CB               	movwf	___ftdiv@sign^(0+128)
  5505  063E  084B               	movf	___ftdiv@sign^(0+128),w
  5506  063F  1D03               	btfss	3,2
  5507  0640  2E48               	goto	l2779
  5508  0641  3000               	movlw	0
  5509  0642  00BC               	movwf	?___ftdiv^(0+128)
  5510  0643  3000               	movlw	0
  5511  0644  00BD               	movwf	(?___ftdiv+1)^(0+128)
  5512  0645  3000               	movlw	0
  5513  0646  00BE               	movwf	(?___ftdiv+2)^(0+128)
  5514  0647  0008               	return
  5515  0648                     l2779:	
  5516  0648  3000               	movlw	0
  5517  0649  00C7               	movwf	___ftdiv@f3^(0+128)
  5518  064A  3000               	movlw	0
  5519  064B  00C8               	movwf	(___ftdiv@f3+1)^(0+128)
  5520  064C  3000               	movlw	0
  5521  064D  00C9               	movwf	(___ftdiv@f3+2)^(0+128)
  5522  064E  3089               	movlw	137
  5523  064F  074B               	addwf	___ftdiv@sign^(0+128),w
  5524  0650  00C2               	movwf	??___ftdiv^(0+128)
  5525  0651  0842               	movf	??___ftdiv^(0+128),w
  5526  0652  02CA               	subwf	___ftdiv@exp^(0+128),f
  5527  0653  083F               	movf	___ftdiv@f1^(0+128),w
  5528  0654  00C2               	movwf	??___ftdiv^(0+128)
  5529  0655  0840               	movf	(___ftdiv@f1+1)^(0+128),w
  5530  0656  00C3               	movwf	(??___ftdiv^(0+128)+1)
  5531  0657  0841               	movf	(___ftdiv@f1+2)^(0+128),w
  5532  0658  00C4               	movwf	(??___ftdiv^(0+128)+2)
  5533  0659  3010               	movlw	16
  5534  065A                     u2905:	
  5535  065A  1003               	clrc
  5536  065B  0CC4               	rrf	(??___ftdiv^(0+128)+2),f
  5537  065C  0CC3               	rrf	(??___ftdiv^(0+128)+1),f
  5538  065D  0CC2               	rrf	??___ftdiv^(0+128),f
  5539  065E  3EFF               	addlw	-1
  5540  065F  1D03               	skipz
  5541  0660  2E5A               	goto	u2905
  5542  0661  0842               	movf	??___ftdiv^(0+128),w
  5543  0662  00C5               	movwf	(??___ftdiv+3)^(0+128)
  5544  0663  0845               	movf	(??___ftdiv+3)^(0+128),w
  5545  0664  00CB               	movwf	___ftdiv@sign^(0+128)
  5546  0665  083C               	movf	___ftdiv@f2^(0+128),w
  5547  0666  00C2               	movwf	??___ftdiv^(0+128)
  5548  0667  083D               	movf	(___ftdiv@f2+1)^(0+128),w
  5549  0668  00C3               	movwf	(??___ftdiv^(0+128)+1)
  5550  0669  083E               	movf	(___ftdiv@f2+2)^(0+128),w
  5551  066A  00C4               	movwf	(??___ftdiv^(0+128)+2)
  5552  066B  3010               	movlw	16
  5553  066C                     u2915:	
  5554  066C  1003               	clrc
  5555  066D  0CC4               	rrf	(??___ftdiv^(0+128)+2),f
  5556  066E  0CC3               	rrf	(??___ftdiv^(0+128)+1),f
  5557  066F  0CC2               	rrf	??___ftdiv^(0+128),f
  5558  0670  3EFF               	addlw	-1
  5559  0671  1D03               	skipz
  5560  0672  2E6C               	goto	u2915
  5561  0673  0842               	movf	??___ftdiv^(0+128),w
  5562  0674  00C5               	movwf	(??___ftdiv+3)^(0+128)
  5563  0675  0845               	movf	(??___ftdiv+3)^(0+128),w
  5564  0676  06CB               	xorwf	___ftdiv@sign^(0+128),f
  5565  0677  3080               	movlw	128
  5566  0678  00C2               	movwf	??___ftdiv^(0+128)
  5567  0679  0842               	movf	??___ftdiv^(0+128),w
  5568  067A  05CB               	andwf	___ftdiv@sign^(0+128),f
  5569  067B  17C0               	bsf	(___ftdiv@f1^(0+128)+1),7
  5570  067C  30FF               	movlw	255
  5571  067D  05BF               	andwf	___ftdiv@f1^(0+128),f
  5572  067E  30FF               	movlw	255
  5573  067F  05C0               	andwf	(___ftdiv@f1+1)^(0+128),f
  5574  0680  3000               	movlw	0
  5575  0681  05C1               	andwf	(___ftdiv@f1+2)^(0+128),f
  5576  0682  17BD               	bsf	(___ftdiv@f2^(0+128)+1),7
  5577  0683  30FF               	movlw	255
  5578  0684  05BC               	andwf	___ftdiv@f2^(0+128),f
  5579  0685  30FF               	movlw	255
  5580  0686  05BD               	andwf	(___ftdiv@f2+1)^(0+128),f
  5581  0687  3000               	movlw	0
  5582  0688  05BE               	andwf	(___ftdiv@f2+2)^(0+128),f
  5583  0689  3018               	movlw	24
  5584  068A  00C2               	movwf	??___ftdiv^(0+128)
  5585  068B  0842               	movf	??___ftdiv^(0+128),w
  5586  068C  00C6               	movwf	___ftdiv@cntr^(0+128)
  5587  068D                     l2793:	
  5588  068D  3001               	movlw	1
  5589  068E                     u2925:	
  5590  068E  1003               	clrc
  5591  068F  0DC7               	rlf	___ftdiv@f3^(0+128),f
  5592  0690  0DC8               	rlf	(___ftdiv@f3+1)^(0+128),f
  5593  0691  0DC9               	rlf	(___ftdiv@f3+2)^(0+128),f
  5594  0692  3EFF               	addlw	-1
  5595  0693  1D03               	skipz
  5596  0694  2E8E               	goto	u2925
  5597  0695  083E               	movf	(___ftdiv@f2+2)^(0+128),w
  5598  0696  0241               	subwf	(___ftdiv@f1+2)^(0+128),w
  5599  0697  1D03               	skipz
  5600  0698  2E9F               	goto	u2935
  5601  0699  083D               	movf	(___ftdiv@f2+1)^(0+128),w
  5602  069A  0240               	subwf	(___ftdiv@f1+1)^(0+128),w
  5603  069B  1D03               	skipz
  5604  069C  2E9F               	goto	u2935
  5605  069D  083C               	movf	___ftdiv@f2^(0+128),w
  5606  069E  023F               	subwf	___ftdiv@f1^(0+128),w
  5607  069F                     u2935:	
  5608  069F  1C03               	skipc
  5609  06A0  2EAC               	goto	l2801
  5610  06A1  083C               	movf	___ftdiv@f2^(0+128),w
  5611  06A2  02BF               	subwf	___ftdiv@f1^(0+128),f
  5612  06A3  083D               	movf	(___ftdiv@f2+1)^(0+128),w
  5613  06A4  1C03               	skipc
  5614  06A5  0F3D               	incfsz	(___ftdiv@f2+1)^(0+128),w
  5615  06A6  02C0               	subwf	(___ftdiv@f1+1)^(0+128),f
  5616  06A7  083E               	movf	(___ftdiv@f2+2)^(0+128),w
  5617  06A8  1C03               	skipc
  5618  06A9  0A3E               	incf	(___ftdiv@f2+2)^(0+128),w
  5619  06AA  02C1               	subwf	(___ftdiv@f1+2)^(0+128),f
  5620  06AB  1447               	bsf	___ftdiv@f3^(0+128),0
  5621  06AC                     l2801:	
  5622  06AC  3001               	movlw	1
  5623  06AD                     u2945:	
  5624  06AD  1003               	clrc
  5625  06AE  0DBF               	rlf	___ftdiv@f1^(0+128),f
  5626  06AF  0DC0               	rlf	(___ftdiv@f1+1)^(0+128),f
  5627  06B0  0DC1               	rlf	(___ftdiv@f1+2)^(0+128),f
  5628  06B1  3EFF               	addlw	-1
  5629  06B2  1D03               	skipz
  5630  06B3  2EAD               	goto	u2945
  5631  06B4  3001               	movlw	1
  5632  06B5  02C6               	subwf	___ftdiv@cntr^(0+128),f
  5633  06B6  1D03               	btfss	3,2
  5634  06B7  2E8D               	goto	l2793
  5635  06B8  0847               	movf	___ftdiv@f3^(0+128),w
  5636  06B9  00A0               	movwf	___ftpack@arg^(0+128)
  5637  06BA  0848               	movf	(___ftdiv@f3+1)^(0+128),w
  5638  06BB  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  5639  06BC  0849               	movf	(___ftdiv@f3+2)^(0+128),w
  5640  06BD  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  5641  06BE  084A               	movf	___ftdiv@exp^(0+128),w
  5642  06BF  00C2               	movwf	??___ftdiv^(0+128)
  5643  06C0  0842               	movf	??___ftdiv^(0+128),w
  5644  06C1  00A3               	movwf	___ftpack@exp^(0+128)
  5645  06C2  084B               	movf	___ftdiv@sign^(0+128),w
  5646  06C3  00C3               	movwf	(??___ftdiv+1)^(0+128)
  5647  06C4  0843               	movf	(??___ftdiv+1)^(0+128),w
  5648  06C5  00A4               	movwf	___ftpack@sign^(0+128)
  5649  06C6  120A  158A  2792   	fcall	___ftpack
  5650  06C9  1683               	bsf	3,5	;RP0=1, select bank1
  5651  06CA  1303               	bcf	3,6	;RP1=0, select bank1
  5652  06CB  0820               	movf	?___ftpack^(0+128),w
  5653  06CC  00BC               	movwf	?___ftdiv^(0+128)
  5654  06CD  0821               	movf	(?___ftpack+1)^(0+128),w
  5655  06CE  00BD               	movwf	(?___ftdiv+1)^(0+128)
  5656  06CF  0822               	movf	(?___ftpack+2)^(0+128),w
  5657  06D0  00BE               	movwf	(?___ftdiv+2)^(0+128)
  5658  06D1  0008               	return
  5659  06D2                     __end_of___ftdiv:	
  5660                           
  5661                           	psect	text24
  5662  0E1F                     __ptext24:	
  5663 ;; *************** function _get_adcon *****************
  5664 ;; Defined at:
  5665 ;;		line 94 in file "AD_value.c"
  5666 ;; Parameters:    Size  Location     Type
  5667 ;;  adcon_shift     1    wreg     unsigned char 
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;  adcon_shift     1   32[BANK1 ] unsigned char 
  5670 ;;  voltage_valu    3   33[BANK1 ] unsigned char 
  5671 ;;  ad_value        2   38[BANK1 ] unsigned int 
  5672 ;;  my_adres        2   36[BANK1 ] struct .
  5673 ;; Return value:  Size  Location     Type
  5674 ;;                  3   28[BANK1 ] struct .
  5675 ;; Registers used:
  5676 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5677 ;; Tracked objects:
  5678 ;;		On entry : 0/0
  5679 ;;		On exit  : 0/0
  5680 ;;		Unchanged: 0/0
  5681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5682 ;;      Params:         0       0       3       0       0
  5683 ;;      Locals:         0       0       8       0       0
  5684 ;;      Temps:          0       0       1       0       0
  5685 ;;      Totals:         0       0      12       0       0
  5686 ;;Total ram usage:       12 bytes
  5687 ;; Hardware stack levels used:    1
  5688 ;; Hardware stack levels required when called:    5
  5689 ;; This function calls:
  5690 ;;		___ftmul
  5691 ;;		___lwtoft
  5692 ;;		_bit_shift
  5693 ;; This function is called by:
  5694 ;;		_main
  5695 ;; This function uses a non-reentrant model
  5696 ;;
  5697                           
  5698                           
  5699                           ;psect for function _get_adcon
  5700  0E1F                     _get_adcon:	
  5701                           
  5702                           ;incstack = 0
  5703                           ; Regs used in _get_adcon: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5704                           ;get_adcon@adcon_shift stored from wreg
  5705  0E1F  1683               	bsf	3,5	;RP0=1, select bank1
  5706  0E20  1303               	bcf	3,6	;RP1=0, select bank1
  5707  0E21  00C0               	movwf	get_adcon@adcon_shift^(0+128)
  5708                           
  5709                           ;AD_value.c: 97: uint16_t ad_value = 0b0000000000;
  5710  0E22  01C6               	clrf	get_adcon@ad_value^(0+128)
  5711  0E23  01C7               	clrf	(get_adcon@ad_value+1)^(0+128)
  5712                           
  5713                           ;AD_value.c: 98: double voltage_value = 0.0;
  5714  0E24  3000               	movlw	0
  5715  0E25  00C1               	movwf	get_adcon@voltage_value^(0+128)
  5716  0E26  3000               	movlw	0
  5717  0E27  00C2               	movwf	(get_adcon@voltage_value+1)^(0+128)
  5718  0E28  3000               	movlw	0
  5719  0E29  00C3               	movwf	(get_adcon@voltage_value+2)^(0+128)
  5720                           
  5721                           ;AD_value.c: 99: adres_t my_adres;
  5722                           ;AD_value.c: 103: ADCON0 = adcon_shift;
  5723  0E2A  0840               	movf	get_adcon@adcon_shift^(0+128),w
  5724  0E2B  1283               	bcf	3,5	;RP0=0, select bank0
  5725  0E2C  1303               	bcf	3,6	;RP1=0, select bank0
  5726  0E2D  009F               	movwf	31	;volatile
  5727                           
  5728                           ;AD_value.c: 104: ADCON0bits.ADON = 1;
  5729  0E2E  141F               	bsf	31,0	;volatile
  5730                           
  5731                           ;AD_value.c: 105: _delay((unsigned long)((30)*(20000000/4000000.0)));
  5732  0E2F  3031               	movlw	49
  5733  0E30  1683               	bsf	3,5	;RP0=1, select bank1
  5734  0E31  1303               	bcf	3,6	;RP1=0, select bank1
  5735  0E32  00BF               	movwf	??_get_adcon^(0+128)
  5736  0E33                     u3447:	
  5737  0E33  0BBF               	decfsz	??_get_adcon^(0+128),f
  5738  0E34  2E33               	goto	u3447
  5739  0E35  2E36               	nop2	;nop
  5740                           
  5741                           ;AD_value.c: 106: ADCON0bits.GO_DONE = 1;
  5742  0E36  1283               	bcf	3,5	;RP0=0, select bank0
  5743  0E37  1303               	bcf	3,6	;RP1=0, select bank0
  5744  0E38  151F               	bsf	31,2	;volatile
  5745  0E39                     l314:	
  5746                           ;AD_value.c: 109: while(ADCON0bits.GO_DONE){;}
  5747                           
  5748  0E39  191F               	btfsc	31,2	;volatile
  5749  0E3A  2E39               	goto	l314
  5750                           
  5751                           ;AD_value.c: 112: my_adres.my_adres_h = ADRESH;
  5752  0E3B  081E               	movf	30,w	;volatile
  5753  0E3C  1683               	bsf	3,5	;RP0=1, select bank1
  5754  0E3D  1303               	bcf	3,6	;RP1=0, select bank1
  5755  0E3E  00BF               	movwf	??_get_adcon^(0+128)
  5756  0E3F  083F               	movf	??_get_adcon^(0+128),w
  5757  0E40  00C4               	movwf	get_adcon@my_adres^(0+128)
  5758                           
  5759                           ;AD_value.c: 113: my_adres.my_adres_l = ADRESL;
  5760  0E41  081E               	movf	30,w	;volatile
  5761  0E42  00BF               	movwf	??_get_adcon^(0+128)
  5762  0E43  083F               	movf	??_get_adcon^(0+128),w
  5763  0E44  00C5               	movwf	(get_adcon@my_adres^(0+128)+1)
  5764                           
  5765                           ;AD_value.c: 114: bit_shift(&ad_value, &my_adres);
  5766  0E45  30C4               	movlw	(low (get_adcon@my_adres| 0))& (0+255)
  5767  0E46  00BF               	movwf	??_get_adcon^(0+128)
  5768  0E47  083F               	movf	??_get_adcon^(0+128),w
  5769  0E48  00A0               	movwf	bit_shift@p_adres^(0+128)
  5770  0E49  30C6               	movlw	(low (get_adcon@ad_value| 0))& (0+255)
  5771  0E4A  120A  158A  23C9  120A  158A  	fcall	_bit_shift
  5772                           
  5773                           ;AD_value.c: 117: voltage_value = (double)(ad_value * 0.00488759);
  5774  0E4F  3028               	movlw	40
  5775  0E50  1683               	bsf	3,5	;RP0=1, select bank1
  5776  0E51  1303               	bcf	3,6	;RP1=0, select bank1
  5777  0E52  00AC               	movwf	___ftmul@f1^(0+128)
  5778  0E53  30A0               	movlw	160
  5779  0E54  00AD               	movwf	(___ftmul@f1+1)^(0+128)
  5780  0E55  303B               	movlw	59
  5781  0E56  00AE               	movwf	(___ftmul@f1+2)^(0+128)
  5782  0E57  0847               	movf	(get_adcon@ad_value+1)^(0+128),w
  5783  0E58  00A9               	movwf	(___lwtoft@c+1)^(0+128)
  5784  0E59  0846               	movf	get_adcon@ad_value^(0+128),w
  5785  0E5A  00A8               	movwf	___lwtoft@c^(0+128)
  5786  0E5B  120A  158A  21C7  120A  158A  	fcall	___lwtoft
  5787  0E60  1683               	bsf	3,5	;RP0=1, select bank1
  5788  0E61  1303               	bcf	3,6	;RP1=0, select bank1
  5789  0E62  0828               	movf	?___lwtoft^(0+128),w
  5790  0E63  00AF               	movwf	___ftmul@f2^(0+128)
  5791  0E64  0829               	movf	(?___lwtoft+1)^(0+128),w
  5792  0E65  00B0               	movwf	(___ftmul@f2+1)^(0+128)
  5793  0E66  082A               	movf	(?___lwtoft+2)^(0+128),w
  5794  0E67  00B1               	movwf	(___ftmul@f2+2)^(0+128)
  5795  0E68  120A  118A  2547   	fcall	___ftmul
  5796  0E6B  1683               	bsf	3,5	;RP0=1, select bank1
  5797  0E6C  1303               	bcf	3,6	;RP1=0, select bank1
  5798  0E6D  082C               	movf	?___ftmul^(0+128),w
  5799  0E6E  00C1               	movwf	get_adcon@voltage_value^(0+128)
  5800  0E6F  082D               	movf	(?___ftmul+1)^(0+128),w
  5801  0E70  00C2               	movwf	(get_adcon@voltage_value+1)^(0+128)
  5802  0E71  082E               	movf	(?___ftmul+2)^(0+128),w
  5803  0E72  00C3               	movwf	(get_adcon@voltage_value+2)^(0+128)
  5804                           
  5805                           ;AD_value.c: 120: return voltage_value;
  5806  0E73  0841               	movf	get_adcon@voltage_value^(0+128),w
  5807  0E74  00BC               	movwf	?_get_adcon^(0+128)
  5808  0E75  0842               	movf	(get_adcon@voltage_value+1)^(0+128),w
  5809  0E76  00BD               	movwf	(?_get_adcon+1)^(0+128)
  5810  0E77  0843               	movf	(get_adcon@voltage_value+2)^(0+128),w
  5811  0E78  00BE               	movwf	(?_get_adcon+2)^(0+128)
  5812  0E79  0008               	return
  5813  0E7A                     __end_of_get_adcon:	
  5814                           
  5815                           	psect	text25
  5816  0BC9                     __ptext25:	
  5817 ;; *************** function _bit_shift *****************
  5818 ;; Defined at:
  5819 ;;		line 74 in file "AD_value.c"
  5820 ;; Parameters:    Size  Location     Type
  5821 ;;  p_ad_value      1    wreg     PTR unsigned int 
  5822 ;;		 -> get_adcon@ad_value(2), 
  5823 ;;  p_adres         1    0[BANK1 ] PTR struct .
  5824 ;;		 -> get_adcon@my_adres(2), 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;  p_ad_value      1    5[BANK1 ] PTR unsigned int 
  5827 ;;		 -> get_adcon@ad_value(2), 
  5828 ;; Return value:  Size  Location     Type
  5829 ;;		None               void
  5830 ;; Registers used:
  5831 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5837 ;;      Params:         0       0       1       0       0
  5838 ;;      Locals:         0       0       1       0       0
  5839 ;;      Temps:          0       0       4       0       0
  5840 ;;      Totals:         0       0       6       0       0
  5841 ;;Total ram usage:        6 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    3
  5844 ;; This function calls:
  5845 ;;		Nothing
  5846 ;; This function is called by:
  5847 ;;		_get_adcon
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           
  5852                           ;psect for function _bit_shift
  5853  0BC9                     _bit_shift:	
  5854                           
  5855                           ;incstack = 0
  5856                           ; Regs used in _bit_shift: [wreg-fsr0h+status,2+status,0+pclath]
  5857                           ;bit_shift@p_ad_value stored from wreg
  5858  0BC9  1683               	bsf	3,5	;RP0=1, select bank1
  5859  0BCA  1303               	bcf	3,6	;RP1=0, select bank1
  5860  0BCB  00A5               	movwf	bit_shift@p_ad_value^(0+128)
  5861                           
  5862                           ;AD_value.c: 76: const uint8_t bit_mask_for_l = 0b00000011;
  5863                           ;AD_value.c: 78: *p_ad_value = (uint16_t)(p_adres->my_adres_h);
  5864  0BCC  0820               	movf	bit_shift@p_adres^(0+128),w
  5865  0BCD  0084               	movwf	4
  5866  0BCE  1383               	bcf	3,7	;select IRP bank0
  5867  0BCF  0800               	movf	0,w
  5868  0BD0  00A1               	movwf	??_bit_shift^(0+128)
  5869  0BD1  01A2               	clrf	(??_bit_shift^(0+128)+1)
  5870  0BD2  0825               	movf	bit_shift@p_ad_value^(0+128),w
  5871  0BD3  0084               	movwf	4
  5872  0BD4  0821               	movf	??_bit_shift^(0+128),w
  5873  0BD5  0080               	movwf	0
  5874  0BD6  0A84               	incf	4,f
  5875  0BD7  0822               	movf	(??_bit_shift+1)^(0+128),w
  5876  0BD8  0080               	movwf	0
  5877                           
  5878                           ;AD_value.c: 79: *p_ad_value <<= 2;
  5879  0BD9  0825               	movf	bit_shift@p_ad_value^(0+128),w
  5880  0BDA  0084               	movwf	4
  5881  0BDB  3002               	movlw	2
  5882  0BDC                     u2795:	
  5883  0BDC  1003               	clrc
  5884  0BDD  0D80               	rlf	0,f
  5885  0BDE  0A84               	incf	4,f
  5886  0BDF  0D80               	rlf	0,f
  5887  0BE0  0384               	decf	4,f
  5888  0BE1  3EFF               	addlw	-1
  5889  0BE2  1D03               	skipz
  5890  0BE3  2BDC               	goto	u2795
  5891                           
  5892                           ;AD_value.c: 80: *p_ad_value |= (bit_mask_for_l & (p_adres->my_adres_l >> 6));
  5893  0BE4  3003               	movlw	low (bit_shift@bit_mask_for_l-__stringbase)
  5894  0BE5  0084               	movwf	4
  5895  0BE6  120A  158A  200A  120A  158A  	fcall	stringdir
  5896  0BEB  00A1               	movwf	??_bit_shift^(0+128)
  5897  0BEC  0A20               	incf	bit_shift@p_adres^(0+128),w
  5898  0BED  0084               	movwf	4
  5899  0BEE  0800               	movf	0,w
  5900  0BEF  00A2               	movwf	(??_bit_shift+1)^(0+128)
  5901  0BF0  3006               	movlw	6
  5902  0BF1                     u2805:	
  5903  0BF1  1003               	clrc
  5904  0BF2  0CA2               	rrf	(??_bit_shift+1)^(0+128),f
  5905  0BF3  3EFF               	addlw	-1
  5906  0BF4  1D03               	skipz
  5907  0BF5  2BF1               	goto	u2805
  5908  0BF6  0822               	movf	(??_bit_shift+1)^(0+128),w
  5909  0BF7  0521               	andwf	??_bit_shift^(0+128),w
  5910  0BF8  00A3               	movwf	(??_bit_shift+2)^(0+128)
  5911  0BF9  01A4               	clrf	((??_bit_shift+2)^(0+128)+1)
  5912  0BFA  0825               	movf	bit_shift@p_ad_value^(0+128),w
  5913  0BFB  0084               	movwf	4
  5914  0BFC  0823               	movf	(??_bit_shift+2)^(0+128),w
  5915  0BFD  0480               	iorwf	0,f
  5916  0BFE  0A84               	incf	4,f
  5917  0BFF  0824               	movf	(??_bit_shift+3)^(0+128),w
  5918  0C00  0480               	iorwf	0,f
  5919  0C01  0008               	return
  5920  0C02                     __end_of_bit_shift:	
  5921                           
  5922                           	psect	text26
  5923  09C7                     __ptext26:	
  5924 ;; *************** function ___lwtoft *****************
  5925 ;; Defined at:
  5926 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
  5927 ;; Parameters:    Size  Location     Type
  5928 ;;  c               2    8[BANK1 ] unsigned int 
  5929 ;; Auto vars:     Size  Location     Type
  5930 ;;		None
  5931 ;; Return value:  Size  Location     Type
  5932 ;;                  3    8[BANK1 ] float 
  5933 ;; Registers used:
  5934 ;;		wreg, status,2, status,0, pclath, cstack
  5935 ;; Tracked objects:
  5936 ;;		On entry : 0/0
  5937 ;;		On exit  : 0/0
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5940 ;;      Params:         0       0       3       0       0
  5941 ;;      Locals:         0       0       0       0       0
  5942 ;;      Temps:          0       0       1       0       0
  5943 ;;      Totals:         0       0       4       0       0
  5944 ;;Total ram usage:        4 bytes
  5945 ;; Hardware stack levels used:    1
  5946 ;; Hardware stack levels required when called:    4
  5947 ;; This function calls:
  5948 ;;		___ftpack
  5949 ;; This function is called by:
  5950 ;;		_get_adcon
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           
  5955                           ;psect for function ___lwtoft
  5956  09C7                     ___lwtoft:	
  5957                           
  5958                           ;incstack = 0
  5959                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5960  09C7  1683               	bsf	3,5	;RP0=1, select bank1
  5961  09C8  1303               	bcf	3,6	;RP1=0, select bank1
  5962  09C9  0828               	movf	___lwtoft@c^(0+128),w
  5963  09CA  00A0               	movwf	___ftpack@arg^(0+128)
  5964  09CB  0829               	movf	(___lwtoft@c+1)^(0+128),w
  5965  09CC  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  5966  09CD  01A2               	clrf	(___ftpack@arg+2)^(0+128)
  5967  09CE  308E               	movlw	142
  5968  09CF  00AB               	movwf	??___lwtoft^(0+128)
  5969  09D0  082B               	movf	??___lwtoft^(0+128),w
  5970  09D1  00A3               	movwf	___ftpack@exp^(0+128)
  5971  09D2  01A4               	clrf	___ftpack@sign^(0+128)
  5972  09D3  120A  158A  2792   	fcall	___ftpack
  5973  09D6  1683               	bsf	3,5	;RP0=1, select bank1
  5974  09D7  1303               	bcf	3,6	;RP1=0, select bank1
  5975  09D8  0820               	movf	?___ftpack^(0+128),w
  5976  09D9  00A8               	movwf	?___lwtoft^(0+128)
  5977  09DA  0821               	movf	(?___ftpack+1)^(0+128),w
  5978  09DB  00A9               	movwf	(?___lwtoft+1)^(0+128)
  5979  09DC  0822               	movf	(?___ftpack+2)^(0+128),w
  5980  09DD  00AA               	movwf	(?___lwtoft+2)^(0+128)
  5981  09DE  0008               	return
  5982  09DF                     __end_of___lwtoft:	
  5983                           
  5984                           	psect	text27
  5985  0547                     __ptext27:	
  5986 ;; *************** function ___ftmul *****************
  5987 ;; Defined at:
  5988 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;  f1              3   12[BANK1 ] float 
  5991 ;;  f2              3   15[BANK1 ] float 
  5992 ;; Auto vars:     Size  Location     Type
  5993 ;;  f3_as_produc    3   23[BANK1 ] unsigned um
  5994 ;;  sign            1   27[BANK1 ] unsigned char 
  5995 ;;  cntr            1   26[BANK1 ] unsigned char 
  5996 ;;  exp             1   22[BANK1 ] unsigned char 
  5997 ;; Return value:  Size  Location     Type
  5998 ;;                  3   12[BANK1 ] float 
  5999 ;; Registers used:
  6000 ;;		wreg, status,2, status,0, pclath, cstack
  6001 ;; Tracked objects:
  6002 ;;		On entry : 0/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6006 ;;      Params:         0       0       6       0       0
  6007 ;;      Locals:         0       0       6       0       0
  6008 ;;      Temps:          0       0       4       0       0
  6009 ;;      Totals:         0       0      16       0       0
  6010 ;;Total ram usage:       16 bytes
  6011 ;; Hardware stack levels used:    1
  6012 ;; Hardware stack levels required when called:    4
  6013 ;; This function calls:
  6014 ;;		___ftpack
  6015 ;; This function is called by:
  6016 ;;		_main
  6017 ;;		_get_adcon
  6018 ;;		_get_pt
  6019 ;;		_get_temp
  6020 ;; This function uses a non-reentrant model
  6021 ;;
  6022                           
  6023                           
  6024                           ;psect for function ___ftmul
  6025  0547                     ___ftmul:	
  6026                           
  6027                           ;incstack = 0
  6028                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6029  0547  1683               	bsf	3,5	;RP0=1, select bank1
  6030  0548  1303               	bcf	3,6	;RP1=0, select bank1
  6031  0549  082C               	movf	___ftmul@f1^(0+128),w
  6032  054A  00B2               	movwf	??___ftmul^(0+128)
  6033  054B  082D               	movf	(___ftmul@f1+1)^(0+128),w
  6034  054C  00B3               	movwf	(??___ftmul^(0+128)+1)
  6035  054D  082E               	movf	(___ftmul@f1+2)^(0+128),w
  6036  054E  00B4               	movwf	(??___ftmul^(0+128)+2)
  6037  054F  1003               	clrc
  6038  0550  0D33               	rlf	(??___ftmul^(0+128)+1),w
  6039  0551  0D34               	rlf	(??___ftmul^(0+128)+2),w
  6040  0552  00B5               	movwf	(??___ftmul+3)^(0+128)
  6041  0553  0835               	movf	(??___ftmul+3)^(0+128),w
  6042  0554  00B6               	movwf	___ftmul@exp^(0+128)
  6043  0555  0836               	movf	___ftmul@exp^(0+128),w
  6044  0556  1D03               	btfss	3,2
  6045  0557  2D5F               	goto	l2815
  6046  0558  3000               	movlw	0
  6047  0559  00AC               	movwf	?___ftmul^(0+128)
  6048  055A  3000               	movlw	0
  6049  055B  00AD               	movwf	(?___ftmul+1)^(0+128)
  6050  055C  3000               	movlw	0
  6051  055D  00AE               	movwf	(?___ftmul+2)^(0+128)
  6052  055E  0008               	return
  6053  055F                     l2815:	
  6054  055F  082F               	movf	___ftmul@f2^(0+128),w
  6055  0560  00B2               	movwf	??___ftmul^(0+128)
  6056  0561  0830               	movf	(___ftmul@f2+1)^(0+128),w
  6057  0562  00B3               	movwf	(??___ftmul^(0+128)+1)
  6058  0563  0831               	movf	(___ftmul@f2+2)^(0+128),w
  6059  0564  00B4               	movwf	(??___ftmul^(0+128)+2)
  6060  0565  1003               	clrc
  6061  0566  0D33               	rlf	(??___ftmul^(0+128)+1),w
  6062  0567  0D34               	rlf	(??___ftmul^(0+128)+2),w
  6063  0568  00B5               	movwf	(??___ftmul+3)^(0+128)
  6064  0569  0835               	movf	(??___ftmul+3)^(0+128),w
  6065  056A  00BB               	movwf	___ftmul@sign^(0+128)
  6066  056B  083B               	movf	___ftmul@sign^(0+128),w
  6067  056C  1D03               	btfss	3,2
  6068  056D  2D75               	goto	l2821
  6069  056E  3000               	movlw	0
  6070  056F  00AC               	movwf	?___ftmul^(0+128)
  6071  0570  3000               	movlw	0
  6072  0571  00AD               	movwf	(?___ftmul+1)^(0+128)
  6073  0572  3000               	movlw	0
  6074  0573  00AE               	movwf	(?___ftmul+2)^(0+128)
  6075  0574  0008               	return
  6076  0575                     l2821:	
  6077  0575  083B               	movf	___ftmul@sign^(0+128),w
  6078  0576  3E7B               	addlw	123
  6079  0577  00B2               	movwf	??___ftmul^(0+128)
  6080  0578  0832               	movf	??___ftmul^(0+128),w
  6081  0579  07B6               	addwf	___ftmul@exp^(0+128),f
  6082  057A  082C               	movf	___ftmul@f1^(0+128),w
  6083  057B  00B2               	movwf	??___ftmul^(0+128)
  6084  057C  082D               	movf	(___ftmul@f1+1)^(0+128),w
  6085  057D  00B3               	movwf	(??___ftmul^(0+128)+1)
  6086  057E  082E               	movf	(___ftmul@f1+2)^(0+128),w
  6087  057F  00B4               	movwf	(??___ftmul^(0+128)+2)
  6088  0580  3010               	movlw	16
  6089  0581                     u2985:	
  6090  0581  1003               	clrc
  6091  0582  0CB4               	rrf	(??___ftmul^(0+128)+2),f
  6092  0583  0CB3               	rrf	(??___ftmul^(0+128)+1),f
  6093  0584  0CB2               	rrf	??___ftmul^(0+128),f
  6094  0585  3EFF               	addlw	-1
  6095  0586  1D03               	skipz
  6096  0587  2D81               	goto	u2985
  6097  0588  0832               	movf	??___ftmul^(0+128),w
  6098  0589  00B5               	movwf	(??___ftmul+3)^(0+128)
  6099  058A  0835               	movf	(??___ftmul+3)^(0+128),w
  6100  058B  00BB               	movwf	___ftmul@sign^(0+128)
  6101  058C  082F               	movf	___ftmul@f2^(0+128),w
  6102  058D  00B2               	movwf	??___ftmul^(0+128)
  6103  058E  0830               	movf	(___ftmul@f2+1)^(0+128),w
  6104  058F  00B3               	movwf	(??___ftmul^(0+128)+1)
  6105  0590  0831               	movf	(___ftmul@f2+2)^(0+128),w
  6106  0591  00B4               	movwf	(??___ftmul^(0+128)+2)
  6107  0592  3010               	movlw	16
  6108  0593                     u2995:	
  6109  0593  1003               	clrc
  6110  0594  0CB4               	rrf	(??___ftmul^(0+128)+2),f
  6111  0595  0CB3               	rrf	(??___ftmul^(0+128)+1),f
  6112  0596  0CB2               	rrf	??___ftmul^(0+128),f
  6113  0597  3EFF               	addlw	-1
  6114  0598  1D03               	skipz
  6115  0599  2D93               	goto	u2995
  6116  059A  0832               	movf	??___ftmul^(0+128),w
  6117  059B  00B5               	movwf	(??___ftmul+3)^(0+128)
  6118  059C  0835               	movf	(??___ftmul+3)^(0+128),w
  6119  059D  06BB               	xorwf	___ftmul@sign^(0+128),f
  6120  059E  3080               	movlw	128
  6121  059F  00B2               	movwf	??___ftmul^(0+128)
  6122  05A0  0832               	movf	??___ftmul^(0+128),w
  6123  05A1  05BB               	andwf	___ftmul@sign^(0+128),f
  6124  05A2  17AD               	bsf	(___ftmul@f1^(0+128)+1),7
  6125  05A3  17B0               	bsf	(___ftmul@f2^(0+128)+1),7
  6126  05A4  30FF               	movlw	255
  6127  05A5  05AF               	andwf	___ftmul@f2^(0+128),f
  6128  05A6  30FF               	movlw	255
  6129  05A7  05B0               	andwf	(___ftmul@f2+1)^(0+128),f
  6130  05A8  3000               	movlw	0
  6131  05A9  05B1               	andwf	(___ftmul@f2+2)^(0+128),f
  6132  05AA  3000               	movlw	0
  6133  05AB  00B7               	movwf	___ftmul@f3_as_product^(0+128)
  6134  05AC  3000               	movlw	0
  6135  05AD  00B8               	movwf	(___ftmul@f3_as_product+1)^(0+128)
  6136  05AE  3000               	movlw	0
  6137  05AF  00B9               	movwf	(___ftmul@f3_as_product+2)^(0+128)
  6138  05B0  3007               	movlw	7
  6139  05B1  00B2               	movwf	??___ftmul^(0+128)
  6140  05B2  0832               	movf	??___ftmul^(0+128),w
  6141  05B3  00BA               	movwf	___ftmul@cntr^(0+128)
  6142  05B4                     l2833:	
  6143  05B4  1C2C               	btfss	___ftmul@f1^(0+128),0
  6144  05B5  2DC4               	goto	l2837
  6145  05B6  082F               	movf	___ftmul@f2^(0+128),w
  6146  05B7  07B7               	addwf	___ftmul@f3_as_product^(0+128),f
  6147  05B8  0830               	movf	(___ftmul@f2+1)^(0+128),w
  6148  05B9  1103               	clrz
  6149  05BA  1803               	skipnc
  6150  05BB  0A30               	incf	(___ftmul@f2+1)^(0+128),w
  6151  05BC  1D03               	btfss	3,2
  6152  05BD  07B8               	addwf	(___ftmul@f3_as_product+1)^(0+128),f
  6153  05BE  0831               	movf	(___ftmul@f2+2)^(0+128),w
  6154  05BF  1103               	clrz
  6155  05C0  1803               	skipnc
  6156  05C1  0A31               	incf	(___ftmul@f2+2)^(0+128),w
  6157  05C2  1D03               	btfss	3,2
  6158  05C3  07B9               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  6159  05C4                     l2837:	
  6160  05C4  3001               	movlw	1
  6161  05C5                     u3025:	
  6162  05C5  1003               	clrc
  6163  05C6  0CAE               	rrf	(___ftmul@f1+2)^(0+128),f
  6164  05C7  0CAD               	rrf	(___ftmul@f1+1)^(0+128),f
  6165  05C8  0CAC               	rrf	___ftmul@f1^(0+128),f
  6166  05C9  3EFF               	addlw	-1
  6167  05CA  1D03               	skipz
  6168  05CB  2DC5               	goto	u3025
  6169  05CC  3001               	movlw	1
  6170  05CD                     u3035:	
  6171  05CD  1003               	clrc
  6172  05CE  0DAF               	rlf	___ftmul@f2^(0+128),f
  6173  05CF  0DB0               	rlf	(___ftmul@f2+1)^(0+128),f
  6174  05D0  0DB1               	rlf	(___ftmul@f2+2)^(0+128),f
  6175  05D1  3EFF               	addlw	-1
  6176  05D2  1D03               	skipz
  6177  05D3  2DCD               	goto	u3035
  6178  05D4  3001               	movlw	1
  6179  05D5  02BA               	subwf	___ftmul@cntr^(0+128),f
  6180  05D6  1D03               	btfss	3,2
  6181  05D7  2DB4               	goto	l2833
  6182  05D8  3009               	movlw	9
  6183  05D9  00B2               	movwf	??___ftmul^(0+128)
  6184  05DA  0832               	movf	??___ftmul^(0+128),w
  6185  05DB  00BA               	movwf	___ftmul@cntr^(0+128)
  6186  05DC                     l2845:	
  6187  05DC  1C2C               	btfss	___ftmul@f1^(0+128),0
  6188  05DD  2DEC               	goto	l2849
  6189  05DE  082F               	movf	___ftmul@f2^(0+128),w
  6190  05DF  07B7               	addwf	___ftmul@f3_as_product^(0+128),f
  6191  05E0  0830               	movf	(___ftmul@f2+1)^(0+128),w
  6192  05E1  1103               	clrz
  6193  05E2  1803               	skipnc
  6194  05E3  0A30               	incf	(___ftmul@f2+1)^(0+128),w
  6195  05E4  1D03               	btfss	3,2
  6196  05E5  07B8               	addwf	(___ftmul@f3_as_product+1)^(0+128),f
  6197  05E6  0831               	movf	(___ftmul@f2+2)^(0+128),w
  6198  05E7  1103               	clrz
  6199  05E8  1803               	skipnc
  6200  05E9  0A31               	incf	(___ftmul@f2+2)^(0+128),w
  6201  05EA  1D03               	btfss	3,2
  6202  05EB  07B9               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  6203  05EC                     l2849:	
  6204  05EC  3001               	movlw	1
  6205  05ED                     u3075:	
  6206  05ED  1003               	clrc
  6207  05EE  0CAE               	rrf	(___ftmul@f1+2)^(0+128),f
  6208  05EF  0CAD               	rrf	(___ftmul@f1+1)^(0+128),f
  6209  05F0  0CAC               	rrf	___ftmul@f1^(0+128),f
  6210  05F1  3EFF               	addlw	-1
  6211  05F2  1D03               	skipz
  6212  05F3  2DED               	goto	u3075
  6213  05F4  3001               	movlw	1
  6214  05F5                     u3085:	
  6215  05F5  1003               	clrc
  6216  05F6  0CB9               	rrf	(___ftmul@f3_as_product+2)^(0+128),f
  6217  05F7  0CB8               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  6218  05F8  0CB7               	rrf	___ftmul@f3_as_product^(0+128),f
  6219  05F9  3EFF               	addlw	-1
  6220  05FA  1D03               	skipz
  6221  05FB  2DF5               	goto	u3085
  6222  05FC  3001               	movlw	1
  6223  05FD  02BA               	subwf	___ftmul@cntr^(0+128),f
  6224  05FE  1D03               	btfss	3,2
  6225  05FF  2DDC               	goto	l2845
  6226  0600  0837               	movf	___ftmul@f3_as_product^(0+128),w
  6227  0601  00A0               	movwf	___ftpack@arg^(0+128)
  6228  0602  0838               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  6229  0603  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  6230  0604  0839               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  6231  0605  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  6232  0606  0836               	movf	___ftmul@exp^(0+128),w
  6233  0607  00B2               	movwf	??___ftmul^(0+128)
  6234  0608  0832               	movf	??___ftmul^(0+128),w
  6235  0609  00A3               	movwf	___ftpack@exp^(0+128)
  6236  060A  083B               	movf	___ftmul@sign^(0+128),w
  6237  060B  00B3               	movwf	(??___ftmul+1)^(0+128)
  6238  060C  0833               	movf	(??___ftmul+1)^(0+128),w
  6239  060D  00A4               	movwf	___ftpack@sign^(0+128)
  6240  060E  120A  158A  2792   	fcall	___ftpack
  6241  0611  1683               	bsf	3,5	;RP0=1, select bank1
  6242  0612  1303               	bcf	3,6	;RP1=0, select bank1
  6243  0613  0820               	movf	?___ftpack^(0+128),w
  6244  0614  00AC               	movwf	?___ftmul^(0+128)
  6245  0615  0821               	movf	(?___ftpack+1)^(0+128),w
  6246  0616  00AD               	movwf	(?___ftmul+1)^(0+128)
  6247  0617  0822               	movf	(?___ftpack+2)^(0+128),w
  6248  0618  00AE               	movwf	(?___ftmul+2)^(0+128)
  6249  0619  0008               	return
  6250  061A                     __end_of___ftmul:	
  6251                           
  6252                           	psect	text28
  6253  0F92                     __ptext28:	
  6254 ;; *************** function ___ftpack *****************
  6255 ;; Defined at:
  6256 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
  6257 ;; Parameters:    Size  Location     Type
  6258 ;;  arg             3    0[BANK1 ] unsigned um
  6259 ;;  exp             1    3[BANK1 ] unsigned char 
  6260 ;;  sign            1    4[BANK1 ] unsigned char 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;		None
  6263 ;; Return value:  Size  Location     Type
  6264 ;;                  3    0[BANK1 ] float 
  6265 ;; Registers used:
  6266 ;;		wreg, status,2, status,0
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6272 ;;      Params:         0       0       5       0       0
  6273 ;;      Locals:         0       0       0       0       0
  6274 ;;      Temps:          0       0       3       0       0
  6275 ;;      Totals:         0       0       8       0       0
  6276 ;;Total ram usage:        8 bytes
  6277 ;; Hardware stack levels used:    1
  6278 ;; Hardware stack levels required when called:    3
  6279 ;; This function calls:
  6280 ;;		Nothing
  6281 ;; This function is called by:
  6282 ;;		___ftdiv
  6283 ;;		___ftmul
  6284 ;;		___lwtoft
  6285 ;; This function uses a non-reentrant model
  6286 ;;
  6287                           
  6288                           
  6289                           ;psect for function ___ftpack
  6290  0F92                     ___ftpack:	
  6291                           
  6292                           ;incstack = 0
  6293                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6294  0F92  1683               	bsf	3,5	;RP0=1, select bank1
  6295  0F93  1303               	bcf	3,6	;RP1=0, select bank1
  6296  0F94  0823               	movf	___ftpack@exp^(0+128),w
  6297  0F95  1903               	btfsc	3,2
  6298  0F96  2F9C               	goto	l2613
  6299  0F97  0822               	movf	(___ftpack@arg+2)^(0+128),w
  6300  0F98  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
  6301  0F99  0420               	iorwf	___ftpack@arg^(0+128),w
  6302  0F9A  1D03               	skipz
  6303  0F9B  2FAF               	goto	l2619
  6304  0F9C                     l2613:	
  6305  0F9C  3000               	movlw	0
  6306  0F9D  00A0               	movwf	?___ftpack^(0+128)
  6307  0F9E  3000               	movlw	0
  6308  0F9F  00A1               	movwf	(?___ftpack+1)^(0+128)
  6309  0FA0  3000               	movlw	0
  6310  0FA1  00A2               	movwf	(?___ftpack+2)^(0+128)
  6311  0FA2  0008               	return
  6312  0FA3                     l2617:	
  6313  0FA3  3001               	movlw	1
  6314  0FA4  00A5               	movwf	??___ftpack^(0+128)
  6315  0FA5  0825               	movf	??___ftpack^(0+128),w
  6316  0FA6  07A3               	addwf	___ftpack@exp^(0+128),f
  6317  0FA7  3001               	movlw	1
  6318  0FA8                     u2595:	
  6319  0FA8  1003               	clrc
  6320  0FA9  0CA2               	rrf	(___ftpack@arg+2)^(0+128),f
  6321  0FAA  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
  6322  0FAB  0CA0               	rrf	___ftpack@arg^(0+128),f
  6323  0FAC  3EFF               	addlw	-1
  6324  0FAD  1D03               	skipz
  6325  0FAE  2FA8               	goto	u2595
  6326  0FAF                     l2619:	
  6327  0FAF  30FE               	movlw	254
  6328  0FB0  0522               	andwf	(___ftpack@arg+2)^(0+128),w
  6329  0FB1  1903               	btfsc	3,2
  6330  0FB2  2FCA               	goto	l608
  6331  0FB3  2FA3               	goto	l2617
  6332  0FB4                     l2621:	
  6333  0FB4  3001               	movlw	1
  6334  0FB5  00A5               	movwf	??___ftpack^(0+128)
  6335  0FB6  0825               	movf	??___ftpack^(0+128),w
  6336  0FB7  07A3               	addwf	___ftpack@exp^(0+128),f
  6337  0FB8  3001               	movlw	1
  6338  0FB9  07A0               	addwf	___ftpack@arg^(0+128),f
  6339  0FBA  3000               	movlw	0
  6340  0FBB  1803               	skipnc
  6341  0FBC  3001               	movlw	1
  6342  0FBD  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
  6343  0FBE  3000               	movlw	0
  6344  0FBF  1803               	skipnc
  6345  0FC0  3001               	movlw	1
  6346  0FC1  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
  6347  0FC2  3001               	movlw	1
  6348  0FC3                     u2615:	
  6349  0FC3  1003               	clrc
  6350  0FC4  0CA2               	rrf	(___ftpack@arg+2)^(0+128),f
  6351  0FC5  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
  6352  0FC6  0CA0               	rrf	___ftpack@arg^(0+128),f
  6353  0FC7  3EFF               	addlw	-1
  6354  0FC8  1D03               	skipz
  6355  0FC9  2FC3               	goto	u2615
  6356  0FCA                     l608:	
  6357  0FCA  30FF               	movlw	255
  6358  0FCB  0522               	andwf	(___ftpack@arg+2)^(0+128),w
  6359  0FCC  1903               	btfsc	3,2
  6360  0FCD  2FD9               	goto	l2629
  6361  0FCE  2FB4               	goto	l2621
  6362  0FCF                     l2627:	
  6363  0FCF  3001               	movlw	1
  6364  0FD0  02A3               	subwf	___ftpack@exp^(0+128),f
  6365  0FD1  3001               	movlw	1
  6366  0FD2                     u2635:	
  6367  0FD2  1003               	clrc
  6368  0FD3  0DA0               	rlf	___ftpack@arg^(0+128),f
  6369  0FD4  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
  6370  0FD5  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
  6371  0FD6  3EFF               	addlw	-1
  6372  0FD7  1D03               	skipz
  6373  0FD8  2FD2               	goto	u2635
  6374  0FD9                     l2629:	
  6375  0FD9  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
  6376  0FDA  2FDF               	goto	l615
  6377  0FDB  3002               	movlw	2
  6378  0FDC  0223               	subwf	___ftpack@exp^(0+128),w
  6379  0FDD  1803               	skipnc
  6380  0FDE  2FCF               	goto	l2627
  6381  0FDF                     l615:	
  6382  0FDF  1823               	btfsc	___ftpack@exp^(0+128),0
  6383  0FE0  2FE7               	goto	l616
  6384  0FE1  30FF               	movlw	255
  6385  0FE2  05A0               	andwf	___ftpack@arg^(0+128),f
  6386  0FE3  307F               	movlw	127
  6387  0FE4  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
  6388  0FE5  30FF               	movlw	255
  6389  0FE6  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
  6390  0FE7                     l616:	
  6391  0FE7  1003               	clrc
  6392  0FE8  0CA3               	rrf	___ftpack@exp^(0+128),f
  6393  0FE9  0823               	movf	___ftpack@exp^(0+128),w
  6394  0FEA  00A5               	movwf	??___ftpack^(0+128)
  6395  0FEB  01A6               	clrf	(??___ftpack^(0+128)+1)
  6396  0FEC  01A7               	clrf	(??___ftpack^(0+128)+2)
  6397  0FED  3010               	movlw	16
  6398  0FEE                     u2675:	
  6399  0FEE  1003               	clrc
  6400  0FEF  0DA5               	rlf	??___ftpack^(0+128),f
  6401  0FF0  0DA6               	rlf	(??___ftpack^(0+128)+1),f
  6402  0FF1  0DA7               	rlf	(??___ftpack^(0+128)+2),f
  6403  0FF2  3EFF               	addlw	-1
  6404  0FF3  1D03               	skipz
  6405  0FF4  2FEE               	goto	u2675
  6406  0FF5  0825               	movf	??___ftpack^(0+128),w
  6407  0FF6  04A0               	iorwf	___ftpack@arg^(0+128),f
  6408  0FF7  0826               	movf	(??___ftpack+1)^(0+128),w
  6409  0FF8  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
  6410  0FF9  0827               	movf	(??___ftpack+2)^(0+128),w
  6411  0FFA  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
  6412  0FFB  0824               	movf	___ftpack@sign^(0+128),w
  6413  0FFC  1903               	btfsc	3,2
  6414  0FFD  0008               	return
  6415  0FFE  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
  6416  0FFF  0008               	return
  6417  1000                     __end_of___ftpack:	
  6418                           
  6419                           	psect	text29
  6420  0C76                     __ptext29:	
  6421 ;; *************** function _extract_receive_packet *****************
  6422 ;; Defined at:
  6423 ;;		line 166 in file "protocol.c"
  6424 ;; Parameters:    Size  Location     Type
  6425 ;;  p_data_type_    1    wreg     PTR unsigned char 
  6426 ;;		 -> main@r_data_type(1), 
  6427 ;;  p_data_buf      1    2[BANK1 ] PTR unsigned char 
  6428 ;;		 -> main@r_data(30), 
  6429 ;;  p_data_len_b    1    3[BANK1 ] PTR unsigned char 
  6430 ;;		 -> main@r_data_len(1), 
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;  p_data_type_    1    5[BANK1 ] PTR unsigned char 
  6433 ;;		 -> main@r_data_type(1), 
  6434 ;;  i               1    6[BANK1 ] unsigned char 
  6435 ;; Return value:  Size  Location     Type
  6436 ;;		None               void
  6437 ;; Registers used:
  6438 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6444 ;;      Params:         0       0       2       0       0
  6445 ;;      Locals:         0       0       2       0       0
  6446 ;;      Temps:          0       0       1       0       0
  6447 ;;      Totals:         0       0       5       0       0
  6448 ;;Total ram usage:        5 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:    4
  6451 ;; This function calls:
  6452 ;;		_rx_packet_clear
  6453 ;; This function is called by:
  6454 ;;		_main
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           
  6459                           ;psect for function _extract_receive_packet
  6460  0C76                     _extract_receive_packet:	
  6461                           
  6462                           ;incstack = 0
  6463                           ; Regs used in _extract_receive_packet: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6464                           ;extract_receive_packet@p_data_type_buf stored from wreg
  6465  0C76  1683               	bsf	3,5	;RP0=1, select bank1
  6466  0C77  1303               	bcf	3,6	;RP1=0, select bank1
  6467  0C78  00A5               	movwf	extract_receive_packet@p_data_type_buf^(0+128)
  6468                           
  6469                           ;protocol.c: 168: uint8_t i;
  6470                           ;protocol.c: 171: *p_data_type_buf = rx_packet.data_type;
  6471  0C79  1283               	bcf	3,5	;RP0=0, select bank0
  6472  0C7A  1303               	bcf	3,6	;RP1=0, select bank0
  6473  0C7B  0842               	movf	_rx_packet,w
  6474  0C7C  1683               	bsf	3,5	;RP0=1, select bank1
  6475  0C7D  1303               	bcf	3,6	;RP1=0, select bank1
  6476  0C7E  00A4               	movwf	??_extract_receive_packet^(0+128)
  6477  0C7F  0825               	movf	extract_receive_packet@p_data_type_buf^(0+128),w
  6478  0C80  0084               	movwf	4
  6479  0C81  0824               	movf	??_extract_receive_packet^(0+128),w
  6480  0C82  1783               	bsf	3,7	;select IRP bank2
  6481  0C83  0080               	movwf	0
  6482                           
  6483                           ;protocol.c: 174: for(i = 0; i < rx_packet.payload_len; i++)
  6484  0C84  01A6               	clrf	extract_receive_packet@i^(0+128)
  6485  0C85                     l2957:	
  6486  0C85  1283               	bcf	3,5	;RP0=0, select bank0
  6487  0C86  1303               	bcf	3,6	;RP1=0, select bank0
  6488  0C87  0843               	movf	_rx_packet+1,w
  6489  0C88  1683               	bsf	3,5	;RP0=1, select bank1
  6490  0C89  1303               	bcf	3,6	;RP1=0, select bank1
  6491  0C8A  0226               	subwf	extract_receive_packet@i^(0+128),w
  6492  0C8B  1803               	btfsc	3,0
  6493  0C8C  2CA1               	goto	l2959
  6494                           
  6495                           ;protocol.c: 175: {
  6496                           ;protocol.c: 176: *p_data_buf++ = rx_packet.payload[i];
  6497  0C8D  0826               	movf	extract_receive_packet@i^(0+128),w
  6498  0C8E  3E44               	addlw	(low ((_rx_packet| 0+2)))& (0+255)
  6499  0C8F  0084               	movwf	4
  6500  0C90  1383               	bcf	3,7	;select IRP bank0
  6501  0C91  0800               	movf	0,w
  6502  0C92  00A4               	movwf	??_extract_receive_packet^(0+128)
  6503  0C93  0822               	movf	extract_receive_packet@p_data_buf^(0+128),w
  6504  0C94  0084               	movwf	4
  6505  0C95  0824               	movf	??_extract_receive_packet^(0+128),w
  6506  0C96  1783               	bsf	3,7	;select IRP bank2
  6507  0C97  0080               	movwf	0
  6508  0C98  3001               	movlw	1
  6509  0C99  00A4               	movwf	??_extract_receive_packet^(0+128)
  6510  0C9A  0824               	movf	??_extract_receive_packet^(0+128),w
  6511  0C9B  07A2               	addwf	extract_receive_packet@p_data_buf^(0+128),f
  6512  0C9C  3001               	movlw	1
  6513  0C9D  00A4               	movwf	??_extract_receive_packet^(0+128)
  6514  0C9E  0824               	movf	??_extract_receive_packet^(0+128),w
  6515  0C9F  07A6               	addwf	extract_receive_packet@i^(0+128),f
  6516  0CA0  2C85               	goto	l2957
  6517  0CA1                     l2959:	
  6518                           
  6519                           ;protocol.c: 177: }
  6520                           ;protocol.c: 180: *p_data_len_buf = rx_packet.payload_len;
  6521  0CA1  1283               	bcf	3,5	;RP0=0, select bank0
  6522  0CA2  1303               	bcf	3,6	;RP1=0, select bank0
  6523  0CA3  0843               	movf	_rx_packet+1,w
  6524  0CA4  1683               	bsf	3,5	;RP0=1, select bank1
  6525  0CA5  1303               	bcf	3,6	;RP1=0, select bank1
  6526  0CA6  00A4               	movwf	??_extract_receive_packet^(0+128)
  6527  0CA7  0823               	movf	extract_receive_packet@p_data_len_buf^(0+128),w
  6528  0CA8  0084               	movwf	4
  6529  0CA9  0824               	movf	??_extract_receive_packet^(0+128),w
  6530  0CAA  0080               	movwf	0
  6531                           
  6532                           ;protocol.c: 183: rx_packet_clear();
  6533  0CAB  120A  158A  21F9   	fcall	_rx_packet_clear
  6534                           
  6535                           ;protocol.c: 186: rx_packet_status = FALSE;
  6536  0CAE  1683               	bsf	3,5	;RP0=1, select bank3
  6537  0CAF  1703               	bsf	3,6	;RP1=1, select bank3
  6538  0CB0  01A9               	clrf	_rx_packet_status^(0+384)
  6539  0CB1  0008               	return
  6540  0CB2                     __end_of_extract_receive_packet:	
  6541                           
  6542                           	psect	text30
  6543  09F9                     __ptext30:	
  6544 ;; *************** function _rx_packet_clear *****************
  6545 ;; Defined at:
  6546 ;;		line 231 in file "protocol.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;		None
  6549 ;; Auto vars:     Size  Location     Type
  6550 ;;  i               1    1[BANK1 ] unsigned char 
  6551 ;; Return value:  Size  Location     Type
  6552 ;;		None               void
  6553 ;; Registers used:
  6554 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6555 ;; Tracked objects:
  6556 ;;		On entry : 0/0
  6557 ;;		On exit  : 0/0
  6558 ;;		Unchanged: 0/0
  6559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6560 ;;      Params:         0       0       0       0       0
  6561 ;;      Locals:         0       0       1       0       0
  6562 ;;      Temps:          0       0       1       0       0
  6563 ;;      Totals:         0       0       2       0       0
  6564 ;;Total ram usage:        2 bytes
  6565 ;; Hardware stack levels used:    1
  6566 ;; Hardware stack levels required when called:    3
  6567 ;; This function calls:
  6568 ;;		Nothing
  6569 ;; This function is called by:
  6570 ;;		_extract_receive_packet
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           
  6575                           ;psect for function _rx_packet_clear
  6576  09F9                     _rx_packet_clear:	
  6577                           
  6578                           ;protocol.c: 233: uint8_t i;
  6579                           ;protocol.c: 236: rx_packet.data_type = 0;
  6580                           
  6581                           ;incstack = 0
  6582                           ; Regs used in _rx_packet_clear: [wreg-fsr0h+status,2+status,0]
  6583  09F9  1283               	bcf	3,5	;RP0=0, select bank0
  6584  09FA  1303               	bcf	3,6	;RP1=0, select bank0
  6585  09FB  01C2               	clrf	_rx_packet
  6586                           
  6587                           ;protocol.c: 239: rx_packet.payload_len = 0;
  6588  09FC  01C3               	clrf	_rx_packet+1
  6589                           
  6590                           ;protocol.c: 242: for(i = 0; i < 30; i++)
  6591  09FD  1683               	bsf	3,5	;RP0=1, select bank1
  6592  09FE  1303               	bcf	3,6	;RP1=0, select bank1
  6593  09FF  01A1               	clrf	rx_packet_clear@i^(0+128)
  6594  0A00  301E               	movlw	30
  6595  0A01  0221               	subwf	rx_packet_clear@i^(0+128),w
  6596  0A02  1803               	btfsc	3,0
  6597  0A03  2A11               	goto	l2709
  6598  0A04                     l2703:	
  6599                           
  6600                           ;protocol.c: 243: {
  6601                           ;protocol.c: 244: rx_packet.payload[i] = 0;
  6602  0A04  0821               	movf	rx_packet_clear@i^(0+128),w
  6603  0A05  3E44               	addlw	(low ((_rx_packet| 0+2)))& (0+255)
  6604  0A06  0084               	movwf	4
  6605  0A07  1383               	bcf	3,7	;select IRP bank0
  6606  0A08  0180               	clrf	0
  6607  0A09  3001               	movlw	1
  6608  0A0A  00A0               	movwf	??_rx_packet_clear^(0+128)
  6609  0A0B  0820               	movf	??_rx_packet_clear^(0+128),w
  6610  0A0C  07A1               	addwf	rx_packet_clear@i^(0+128),f
  6611  0A0D  301E               	movlw	30
  6612  0A0E  0221               	subwf	rx_packet_clear@i^(0+128),w
  6613  0A0F  1C03               	skipc
  6614  0A10  2A04               	goto	l2703
  6615  0A11                     l2709:	
  6616                           
  6617                           ;protocol.c: 245: }
  6618                           ;protocol.c: 248: rx_packet.data_end_command = 0;
  6619  0A11  1283               	bcf	3,5	;RP0=0, select bank0
  6620  0A12  1303               	bcf	3,6	;RP1=0, select bank0
  6621  0A13  01E2               	clrf	_rx_packet+32
  6622  0A14  0008               	return
  6623  0A15                     __end_of_rx_packet_clear:	
  6624                           
  6625                           	psect	text31
  6626  06D2                     __ptext31:	
  6627 ;; *************** function ___fttol *****************
  6628 ;; Defined at:
  6629 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;  f1              3    0[BANK1 ] float 
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;  lval            4    9[BANK1 ] unsigned long 
  6634 ;;  exp1            1   13[BANK1 ] unsigned char 
  6635 ;;  sign1           1    8[BANK1 ] unsigned char 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;                  4    0[BANK1 ] long 
  6638 ;; Registers used:
  6639 ;;		wreg, status,2, status,0
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6645 ;;      Params:         0       0       4       0       0
  6646 ;;      Locals:         0       0       6       0       0
  6647 ;;      Temps:          0       0       4       0       0
  6648 ;;      Totals:         0       0      14       0       0
  6649 ;;Total ram usage:       14 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:    3
  6652 ;; This function calls:
  6653 ;;		Nothing
  6654 ;; This function is called by:
  6655 ;;		_main
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           
  6660                           ;psect for function ___fttol
  6661  06D2                     ___fttol:	
  6662                           
  6663                           ;incstack = 0
  6664                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6665  06D2  1683               	bsf	3,5	;RP0=1, select bank1
  6666  06D3  1303               	bcf	3,6	;RP1=0, select bank1
  6667  06D4  0820               	movf	___fttol@f1^(0+128),w
  6668  06D5  00A4               	movwf	??___fttol^(0+128)
  6669  06D6  0821               	movf	(___fttol@f1+1)^(0+128),w
  6670  06D7  00A5               	movwf	(??___fttol^(0+128)+1)
  6671  06D8  0822               	movf	(___fttol@f1+2)^(0+128),w
  6672  06D9  00A6               	movwf	(??___fttol^(0+128)+2)
  6673  06DA  1003               	clrc
  6674  06DB  0D25               	rlf	(??___fttol^(0+128)+1),w
  6675  06DC  0D26               	rlf	(??___fttol^(0+128)+2),w
  6676  06DD  00A7               	movwf	(??___fttol+3)^(0+128)
  6677  06DE  0827               	movf	(??___fttol+3)^(0+128),w
  6678  06DF  00AD               	movwf	___fttol@exp1^(0+128)
  6679  06E0  082D               	movf	___fttol@exp1^(0+128),w
  6680  06E1  1D03               	btfss	3,2
  6681  06E2  2EEC               	goto	l2989
  6682  06E3  3000               	movlw	0
  6683  06E4  00A3               	movwf	(?___fttol+3)^(0+128)
  6684  06E5  3000               	movlw	0
  6685  06E6  00A2               	movwf	(?___fttol+2)^(0+128)
  6686  06E7  3000               	movlw	0
  6687  06E8  00A1               	movwf	(?___fttol+1)^(0+128)
  6688  06E9  3000               	movlw	0
  6689  06EA  00A0               	movwf	?___fttol^(0+128)
  6690  06EB  0008               	return
  6691  06EC                     l2989:	
  6692  06EC  0820               	movf	___fttol@f1^(0+128),w
  6693  06ED  00A4               	movwf	??___fttol^(0+128)
  6694  06EE  0821               	movf	(___fttol@f1+1)^(0+128),w
  6695  06EF  00A5               	movwf	(??___fttol^(0+128)+1)
  6696  06F0  0822               	movf	(___fttol@f1+2)^(0+128),w
  6697  06F1  00A6               	movwf	(??___fttol^(0+128)+2)
  6698  06F2  3017               	movlw	23
  6699  06F3                     u3215:	
  6700  06F3  1003               	clrc
  6701  06F4  0CA6               	rrf	(??___fttol^(0+128)+2),f
  6702  06F5  0CA5               	rrf	(??___fttol^(0+128)+1),f
  6703  06F6  0CA4               	rrf	??___fttol^(0+128),f
  6704  06F7  3EFF               	addlw	-1
  6705  06F8  1D03               	skipz
  6706  06F9  2EF3               	goto	u3215
  6707  06FA  0824               	movf	??___fttol^(0+128),w
  6708  06FB  00A7               	movwf	(??___fttol+3)^(0+128)
  6709  06FC  0827               	movf	(??___fttol+3)^(0+128),w
  6710  06FD  00A8               	movwf	___fttol@sign1^(0+128)
  6711  06FE  17A1               	bsf	(___fttol@f1^(0+128)+1),7
  6712  06FF  30FF               	movlw	255
  6713  0700  05A0               	andwf	___fttol@f1^(0+128),f
  6714  0701  30FF               	movlw	255
  6715  0702  05A1               	andwf	(___fttol@f1+1)^(0+128),f
  6716  0703  3000               	movlw	0
  6717  0704  05A2               	andwf	(___fttol@f1+2)^(0+128),f
  6718  0705  0820               	movf	___fttol@f1^(0+128),w
  6719  0706  00A9               	movwf	___fttol@lval^(0+128)
  6720  0707  0821               	movf	(___fttol@f1+1)^(0+128),w
  6721  0708  00AA               	movwf	(___fttol@lval^(0+128)+1)
  6722  0709  0822               	movf	(___fttol@f1+2)^(0+128),w
  6723  070A  00AB               	movwf	(___fttol@lval^(0+128)+2)
  6724  070B  01AC               	clrf	(___fttol@lval^(0+128)+3)
  6725  070C  308E               	movlw	142
  6726  070D  02AD               	subwf	___fttol@exp1^(0+128),f
  6727  070E  1FAD               	btfss	___fttol@exp1^(0+128),7
  6728  070F  2F2E               	goto	l3009
  6729  0710  082D               	movf	___fttol@exp1^(0+128),w
  6730  0711  3A80               	xorlw	128
  6731  0712  3E8F               	addlw	143
  6732  0713  1803               	skipnc
  6733  0714  2F1E               	goto	l3007
  6734  0715  3000               	movlw	0
  6735  0716  00A3               	movwf	(?___fttol+3)^(0+128)
  6736  0717  3000               	movlw	0
  6737  0718  00A2               	movwf	(?___fttol+2)^(0+128)
  6738  0719  3000               	movlw	0
  6739  071A  00A1               	movwf	(?___fttol+1)^(0+128)
  6740  071B  3000               	movlw	0
  6741  071C  00A0               	movwf	?___fttol^(0+128)
  6742  071D  0008               	return
  6743  071E                     l3007:	
  6744  071E  3001               	movlw	1
  6745  071F                     u3245:	
  6746  071F  1003               	clrc
  6747  0720  0CAC               	rrf	(___fttol@lval+3)^(0+128),f
  6748  0721  0CAB               	rrf	(___fttol@lval+2)^(0+128),f
  6749  0722  0CAA               	rrf	(___fttol@lval+1)^(0+128),f
  6750  0723  0CA9               	rrf	___fttol@lval^(0+128),f
  6751  0724  3EFF               	addlw	-1
  6752  0725  1D03               	skipz
  6753  0726  2F1F               	goto	u3245
  6754  0727  3001               	movlw	1
  6755  0728  00A4               	movwf	??___fttol^(0+128)
  6756  0729  0824               	movf	??___fttol^(0+128),w
  6757  072A  07AD               	addwf	___fttol@exp1^(0+128),f
  6758  072B  1903               	btfsc	3,2
  6759  072C  2F49               	goto	l3017
  6760  072D  2F1E               	goto	l3007
  6761  072E                     l3009:	
  6762  072E  3018               	movlw	24
  6763  072F  022D               	subwf	___fttol@exp1^(0+128),w
  6764  0730  1C03               	skipc
  6765  0731  2F46               	goto	l699
  6766  0732  3000               	movlw	0
  6767  0733  00A3               	movwf	(?___fttol+3)^(0+128)
  6768  0734  3000               	movlw	0
  6769  0735  00A2               	movwf	(?___fttol+2)^(0+128)
  6770  0736  3000               	movlw	0
  6771  0737  00A1               	movwf	(?___fttol+1)^(0+128)
  6772  0738  3000               	movlw	0
  6773  0739  00A0               	movwf	?___fttol^(0+128)
  6774  073A  0008               	return
  6775  073B                     l3015:	
  6776  073B  3001               	movlw	1
  6777  073C  00A4               	movwf	??___fttol^(0+128)
  6778  073D                     u3275:	
  6779  073D  1003               	clrc
  6780  073E  0DA9               	rlf	___fttol@lval^(0+128),f
  6781  073F  0DAA               	rlf	(___fttol@lval+1)^(0+128),f
  6782  0740  0DAB               	rlf	(___fttol@lval+2)^(0+128),f
  6783  0741  0DAC               	rlf	(___fttol@lval+3)^(0+128),f
  6784  0742  0BA4               	decfsz	??___fttol^(0+128),f
  6785  0743  2F3D               	goto	u3275
  6786  0744  3001               	movlw	1
  6787  0745  02AD               	subwf	___fttol@exp1^(0+128),f
  6788  0746                     l699:	
  6789  0746  082D               	movf	___fttol@exp1^(0+128),w
  6790  0747  1D03               	btfss	3,2
  6791  0748  2F3B               	goto	l3015
  6792  0749                     l3017:	
  6793  0749  0828               	movf	___fttol@sign1^(0+128),w
  6794  074A  1903               	btfsc	3,2
  6795  074B  2F57               	goto	l3021
  6796  074C  09A9               	comf	___fttol@lval^(0+128),f
  6797  074D  09AA               	comf	(___fttol@lval+1)^(0+128),f
  6798  074E  09AB               	comf	(___fttol@lval+2)^(0+128),f
  6799  074F  09AC               	comf	(___fttol@lval+3)^(0+128),f
  6800  0750  0AA9               	incf	___fttol@lval^(0+128),f
  6801  0751  1903               	skipnz
  6802  0752  0AAA               	incf	(___fttol@lval+1)^(0+128),f
  6803  0753  1903               	skipnz
  6804  0754  0AAB               	incf	(___fttol@lval+2)^(0+128),f
  6805  0755  1903               	skipnz
  6806  0756  0AAC               	incf	(___fttol@lval+3)^(0+128),f
  6807  0757                     l3021:	
  6808  0757  082C               	movf	(___fttol@lval+3)^(0+128),w
  6809  0758  00A3               	movwf	(?___fttol+3)^(0+128)
  6810  0759  082B               	movf	(___fttol@lval+2)^(0+128),w
  6811  075A  00A2               	movwf	(?___fttol+2)^(0+128)
  6812  075B  082A               	movf	(___fttol@lval+1)^(0+128),w
  6813  075C  00A1               	movwf	(?___fttol+1)^(0+128)
  6814  075D  0829               	movf	___fttol@lval^(0+128),w
  6815  075E  00A0               	movwf	?___fttol^(0+128)
  6816  075F  0008               	return
  6817  0760                     __end_of___fttol:	
  6818                           
  6819                           	psect	text32
  6820  0C02                     __ptext32:	
  6821 ;; *************** function _isr *****************
  6822 ;; Defined at:
  6823 ;;		line 31 in file "isr.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;		None
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  isr_spi_buf     1   11[COMMON] unsigned char 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;		None               void
  6830 ;; Registers used:
  6831 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6837 ;;      Params:         0       0       0       0       0
  6838 ;;      Locals:         1       0       0       0       0
  6839 ;;      Temps:          5       0       0       0       0
  6840 ;;      Totals:         6       0       0       0       0
  6841 ;;Total ram usage:        6 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    2
  6844 ;; This function calls:
  6845 ;;		_check_flag
  6846 ;;		_receive_packet
  6847 ;;		_send_packet
  6848 ;;		_spi_slave_receive
  6849 ;; This function is called by:
  6850 ;;		Interrupt level 1
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           
  6855                           ;psect for function _isr
  6856  0C02                     _isr:	
  6857                           
  6858                           ;isr.c: 33: uint8_t isr_spi_buf;
  6859                           ;isr.c: 36: if (PIR1bits.SSPIF == 1)
  6860  0C02  1D8C               	btfss	12,3	;volatile
  6861  0C03  2C31               	goto	i1l287
  6862                           
  6863                           ;isr.c: 37: {
  6864                           ;isr.c: 38: isr_spi_buf = SSPBUF;
  6865  0C04  0813               	movf	19,w	;volatile
  6866  0C05  00F6               	movwf	??_isr
  6867  0C06  0876               	movf	??_isr,w
  6868  0C07  00FB               	movwf	isr@isr_spi_buf
  6869                           
  6870                           ;isr.c: 39: SSPBUF = 0xff;
  6871  0C08  30FF               	movlw	255
  6872  0C09  0093               	movwf	19	;volatile
  6873                           
  6874                           ;isr.c: 42: spi_slave_receive(&isr_spi_buf);
  6875  0C0A  307B               	movlw	(low (isr@isr_spi_buf| 0))& (0+255)
  6876  0C0B  120A  158A  2180  120A  158A  	fcall	_spi_slave_receive
  6877                           
  6878                           ;isr.c: 45: switch(isr_spi_buf)
  6879  0C10  2C23               	goto	i1l2459
  6880  0C11                     i1l2451:	
  6881                           ;isr.c: 46: {
  6882                           ;isr.c: 47: case 0x01:
  6883                           
  6884                           
  6885                           ;isr.c: 48: receive_packet();
  6886  0C11  120A  158A  24B2  120A  158A  	fcall	_receive_packet
  6887                           
  6888                           ;isr.c: 49: break;
  6889  0C16  2C2E               	goto	i1l283
  6890  0C17                     i1l2453:	
  6891                           ;isr.c: 50: case 0x02:
  6892                           
  6893                           
  6894                           ;isr.c: 51: send_packet();
  6895  0C17  120A  158A  2290  120A  158A  	fcall	_send_packet
  6896                           
  6897                           ;isr.c: 52: break;
  6898  0C1C  2C2E               	goto	i1l283
  6899  0C1D                     i1l2455:	
  6900                           ;isr.c: 53: case 0x03:
  6901                           
  6902                           
  6903                           ;isr.c: 54: check_flag();
  6904  0C1D  120A  158A  212D  120A  158A  	fcall	_check_flag
  6905                           
  6906                           ;isr.c: 58: }
  6907                           
  6908                           ;isr.c: 57: break;
  6909                           
  6910                           ;isr.c: 56: default:
  6911                           
  6912                           ;isr.c: 55: break;
  6913  0C22  2C2E               	goto	i1l283
  6914  0C23                     i1l2459:	
  6915  0C23  087B               	movf	isr@isr_spi_buf,w
  6916                           
  6917                           ; Switch size 1, requested type "space"
  6918                           ; Number of cases is 3, Range of values is 1 to 3
  6919                           ; switch strategies available:
  6920                           ; Name         Instructions Cycles
  6921                           ; simple_byte           10     6 (average)
  6922                           ; direct_byte           20    11 (fixed)
  6923                           ; jumptable            263     9 (fixed)
  6924                           ;	Chosen strategy is simple_byte
  6925  0C24  3A01               	xorlw	1	; case 1
  6926  0C25  1903               	skipnz
  6927  0C26  2C11               	goto	i1l2451
  6928  0C27  3A03               	xorlw	3	; case 2
  6929  0C28  1903               	skipnz
  6930  0C29  2C17               	goto	i1l2453
  6931  0C2A  3A01               	xorlw	1	; case 3
  6932  0C2B  1903               	skipnz
  6933  0C2C  2C1D               	goto	i1l2455
  6934  0C2D  2C2E               	goto	i1l283
  6935  0C2E                     i1l283:	
  6936                           
  6937                           ;isr.c: 61: PIR1bits.SSPIF = 0;
  6938  0C2E  1283               	bcf	3,5	;RP0=0, select bank0
  6939  0C2F  1303               	bcf	3,6	;RP1=0, select bank0
  6940  0C30  118C               	bcf	12,3	;volatile
  6941  0C31                     i1l287:	
  6942  0C31  087A               	movf	??_isr+4,w
  6943  0C32  00FF               	movwf	127
  6944  0C33  0879               	movf	??_isr+3,w
  6945  0C34  008A               	movwf	10
  6946  0C35  0878               	movf	??_isr+2,w
  6947  0C36  0084               	movwf	4
  6948  0C37  0E77               	swapf	(??_isr+1)^(0+-128),w
  6949  0C38  0083               	movwf	3
  6950  0C39  0EFE               	swapf	126,f
  6951  0C3A  0E7E               	swapf	126,w
  6952  0C3B  0009               	retfie
  6953  0C3C                     __end_of_isr:	
  6954                           
  6955                           	psect	intentry
  6956  0004                     __pintentry:	
  6957                           ;incstack = 0
  6958                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6959                           
  6960  0004                     interrupt_function:	
  6961  007E                     saved_w	set	btemp
  6962  0004  00FE               	movwf	btemp
  6963  0005  0E03               	swapf	3,w
  6964  0006  00F7               	movwf	??_isr+1
  6965  0007  0804               	movf	4,w
  6966  0008  00F8               	movwf	??_isr+2
  6967  0009  080A               	movf	10,w
  6968  000A  00F9               	movwf	??_isr+3
  6969  000B  1283               	bcf	3,5	;RP0=0, select bank0
  6970  000C  1303               	bcf	3,6	;RP1=0, select bank0
  6971  000D  087F               	movf	btemp+1,w
  6972  000E  00FA               	movwf	??_isr+4
  6973  000F  120A  158A  2C02   	ljmp	_isr
  6974                           
  6975                           	psect	text33
  6976  0A90                     __ptext33:	
  6977 ;; *************** function _send_packet *****************
  6978 ;; Defined at:
  6979 ;;		line 266 in file "protocol.c"
  6980 ;; Parameters:    Size  Location     Type
  6981 ;;		None
  6982 ;; Auto vars:     Size  Location     Type
  6983 ;;  i               1    4[COMMON] unsigned char 
  6984 ;;  buf             1    0        unsigned char 
  6985 ;; Return value:  Size  Location     Type
  6986 ;;		None               void
  6987 ;; Registers used:
  6988 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6989 ;; Tracked objects:
  6990 ;;		On entry : 0/0
  6991 ;;		On exit  : 0/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6994 ;;      Params:         0       0       0       0       0
  6995 ;;      Locals:         1       0       0       0       0
  6996 ;;      Temps:          1       0       0       0       0
  6997 ;;      Totals:         2       0       0       0       0
  6998 ;;Total ram usage:        2 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; Hardware stack levels required when called:    1
  7001 ;; This function calls:
  7002 ;;		_spi_slave_send
  7003 ;;		_tx_packet_clear
  7004 ;; This function is called by:
  7005 ;;		_isr
  7006 ;; This function uses a non-reentrant model
  7007 ;;
  7008                           
  7009                           
  7010                           ;psect for function _send_packet
  7011  0A90                     _send_packet:	
  7012                           
  7013                           ;protocol.c: 268: uint8_t buf;
  7014                           ;protocol.c: 269: uint8_t i;
  7015                           ;protocol.c: 272: spi_slave_send(tx_packet.data_type);
  7016                           
  7017                           ;incstack = 0
  7018                           ; Regs used in _send_packet: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7019  0A90  1683               	bsf	3,5	;RP0=1, select bank1
  7020  0A91  1303               	bcf	3,6	;RP1=0, select bank1
  7021  0A92  084F               	movf	_tx_packet^(0+128),w
  7022  0A93  120A  158A  21A2  120A  158A  	fcall	_spi_slave_send
  7023                           
  7024                           ;protocol.c: 275: spi_slave_send(tx_packet.payload_len);
  7025  0A98  1683               	bsf	3,5	;RP0=1, select bank1
  7026  0A99  1303               	bcf	3,6	;RP1=0, select bank1
  7027  0A9A  0850               	movf	(_tx_packet^(0+128)+1),w
  7028  0A9B  120A  158A  21A2  120A  158A  	fcall	_spi_slave_send
  7029                           
  7030                           ;protocol.c: 278: for(i = 0; i < tx_packet.payload_len; i++)
  7031  0AA0  01F4               	clrf	send_packet@i
  7032  0AA1                     i1l2209:	
  7033  0AA1  1683               	bsf	3,5	;RP0=1, select bank1
  7034  0AA2  1303               	bcf	3,6	;RP1=0, select bank1
  7035  0AA3  0850               	movf	(_tx_packet^(0+128)+1),w
  7036  0AA4  0274               	subwf	send_packet@i,w
  7037  0AA5  1803               	btfsc	3,0
  7038  0AA6  2AB6               	goto	i1l2211
  7039                           
  7040                           ;protocol.c: 279: {
  7041                           ;protocol.c: 280: spi_slave_send(tx_packet.payload[i]);
  7042  0AA7  0874               	movf	send_packet@i,w
  7043  0AA8  3ED1               	addlw	(low ((_tx_packet| 0+2)))& (0+255)
  7044  0AA9  0084               	movwf	4
  7045  0AAA  1383               	bcf	3,7	;select IRP bank1
  7046  0AAB  0800               	movf	0,w
  7047  0AAC  120A  158A  21A2  120A  158A  	fcall	_spi_slave_send
  7048  0AB1  3001               	movlw	1
  7049  0AB2  00F3               	movwf	??_send_packet
  7050  0AB3  0873               	movf	??_send_packet,w
  7051  0AB4  07F4               	addwf	send_packet@i,f
  7052  0AB5  2AA1               	goto	i1l2209
  7053  0AB6                     i1l2211:	
  7054                           
  7055                           ;protocol.c: 281: }
  7056                           ;protocol.c: 284: spi_slave_send(tx_packet.data_end_command);
  7057  0AB6  086F               	movf	(_tx_packet^(0+128)+32),w
  7058  0AB7  120A  158A  21A2  120A  158A  	fcall	_spi_slave_send
  7059                           
  7060                           ;protocol.c: 287: tx_packet_clear();
  7061  0ABC  120A  158A  21DF   	fcall	_tx_packet_clear
  7062                           
  7063                           ;protocol.c: 290: tx_packet_status = FALSE;
  7064  0ABF  01FC               	clrf	_tx_packet_status
  7065  0AC0  0008               	return
  7066  0AC1                     __end_of_send_packet:	
  7067                           
  7068                           	psect	text34
  7069  09DF                     __ptext34:	
  7070 ;; *************** function _tx_packet_clear *****************
  7071 ;; Defined at:
  7072 ;;		line 200 in file "protocol.c"
  7073 ;; Parameters:    Size  Location     Type
  7074 ;;		None
  7075 ;; Auto vars:     Size  Location     Type
  7076 ;;  i               1    1[COMMON] unsigned char 
  7077 ;; Return value:  Size  Location     Type
  7078 ;;		None               void
  7079 ;; Registers used:
  7080 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7081 ;; Tracked objects:
  7082 ;;		On entry : 0/0
  7083 ;;		On exit  : 0/0
  7084 ;;		Unchanged: 0/0
  7085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7086 ;;      Params:         0       0       0       0       0
  7087 ;;      Locals:         1       0       0       0       0
  7088 ;;      Temps:          1       0       0       0       0
  7089 ;;      Totals:         2       0       0       0       0
  7090 ;;Total ram usage:        2 bytes
  7091 ;; Hardware stack levels used:    1
  7092 ;; This function calls:
  7093 ;;		Nothing
  7094 ;; This function is called by:
  7095 ;;		_send_packet
  7096 ;; This function uses a non-reentrant model
  7097 ;;
  7098                           
  7099                           
  7100                           ;psect for function _tx_packet_clear
  7101  09DF                     _tx_packet_clear:	
  7102                           
  7103                           ;protocol.c: 202: uint8_t i;
  7104                           ;protocol.c: 205: tx_packet.data_type = 0;
  7105                           
  7106                           ;incstack = 0
  7107                           ; Regs used in _tx_packet_clear: [wreg-fsr0h+status,2+status,0]
  7108  09DF  1683               	bsf	3,5	;RP0=1, select bank1
  7109  09E0  1303               	bcf	3,6	;RP1=0, select bank1
  7110  09E1  01CF               	clrf	_tx_packet^(0+128)
  7111                           
  7112                           ;protocol.c: 208: tx_packet.payload_len = 0;
  7113  09E2  01D0               	clrf	(_tx_packet^(0+128)+1)
  7114                           
  7115                           ;protocol.c: 211: for(i = 0; i < 30; i++)
  7116  09E3  01F1               	clrf	tx_packet_clear@i
  7117  09E4  301E               	movlw	30
  7118  09E5  0271               	subwf	tx_packet_clear@i,w
  7119  09E6  1803               	btfsc	3,0
  7120  09E7  29F5               	goto	i1l1899
  7121  09E8                     i1l1893:	
  7122                           
  7123                           ;protocol.c: 212: {
  7124                           ;protocol.c: 213: tx_packet.payload[i] = 0;
  7125  09E8  0871               	movf	tx_packet_clear@i,w
  7126  09E9  3ED1               	addlw	(low ((_tx_packet| 0+2)))& (0+255)
  7127  09EA  0084               	movwf	4
  7128  09EB  1383               	bcf	3,7	;select IRP bank1
  7129  09EC  0180               	clrf	0
  7130  09ED  3001               	movlw	1
  7131  09EE  00F0               	movwf	??_tx_packet_clear
  7132  09EF  0870               	movf	??_tx_packet_clear,w
  7133  09F0  07F1               	addwf	tx_packet_clear@i,f
  7134  09F1  301E               	movlw	30
  7135  09F2  0271               	subwf	tx_packet_clear@i,w
  7136  09F3  1C03               	skipc
  7137  09F4  29E8               	goto	i1l1893
  7138  09F5                     i1l1899:	
  7139                           
  7140                           ;protocol.c: 214: }
  7141                           ;protocol.c: 217: tx_packet.data_end_command = 0;
  7142  09F5  1683               	bsf	3,5	;RP0=1, select bank1
  7143  09F6  1303               	bcf	3,6	;RP1=0, select bank1
  7144  09F7  01EF               	clrf	(_tx_packet^(0+128)+32)
  7145  09F8  0008               	return
  7146  09F9                     __end_of_tx_packet_clear:	
  7147                           
  7148                           	psect	text35
  7149  0CB2                     __ptext35:	
  7150 ;; *************** function _receive_packet *****************
  7151 ;; Defined at:
  7152 ;;		line 305 in file "protocol.c"
  7153 ;; Parameters:    Size  Location     Type
  7154 ;;		None
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;  receive_buf    33    0[BANK0 ] unsigned char [33]
  7157 ;;  i               1   33[BANK0 ] unsigned char 
  7158 ;; Return value:  Size  Location     Type
  7159 ;;		None               void
  7160 ;; Registers used:
  7161 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7167 ;;      Params:         0       0       0       0       0
  7168 ;;      Locals:         0      34       0       0       0
  7169 ;;      Temps:          3       0       0       0       0
  7170 ;;      Totals:         3      34       0       0       0
  7171 ;;Total ram usage:       37 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; Hardware stack levels required when called:    1
  7174 ;; This function calls:
  7175 ;;		_buf_send
  7176 ;;		_spi_slave_receive
  7177 ;; This function is called by:
  7178 ;;		_isr
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           
  7183                           ;psect for function _receive_packet
  7184  0CB2                     _receive_packet:	
  7185                           
  7186                           ;protocol.c: 307: uint8_t receive_buf[33];
  7187                           ;protocol.c: 308: uint8_t i;
  7188                           ;protocol.c: 311: for(i = 0; i < 2; i++)
  7189                           
  7190                           ;incstack = 0
  7191                           ; Regs used in _receive_packet: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7192  0CB2  1283               	bcf	3,5	;RP0=0, select bank0
  7193  0CB3  1303               	bcf	3,6	;RP1=0, select bank0
  7194  0CB4  01C1               	clrf	receive_packet@i
  7195  0CB5                     L2:	
  7196  0CB5  3002               	movlw	2
  7197  0CB6  0241               	subwf	receive_packet@i,w
  7198  0CB7  1803               	btfsc	3,0
  7199  0CB8  2CD6               	goto	i1l2233
  7200                           
  7201                           ;protocol.c: 312: {
  7202                           ;protocol.c: 313: spi_slave_receive(&receive_buf[i]);
  7203  0CB9  0841               	movf	receive_packet@i,w
  7204  0CBA  3E20               	addlw	(low (receive_packet@receive_buf| 0))& (0+255)
  7205  0CBB  120A  158A  2180  120A  158A  	fcall	_spi_slave_receive
  7206  0CC0  3001               	movlw	1
  7207  0CC1  00F3               	movwf	??_receive_packet
  7208  0CC2  0873               	movf	??_receive_packet,w
  7209  0CC3  1283               	bcf	3,5	;RP0=0, select bank0
  7210  0CC4  1303               	bcf	3,6	;RP1=0, select bank0
  7211  0CC5  07C1               	addwf	receive_packet@i,f
  7212  0CC6  2CB5               	goto	L2
  7213  0CC7                     i1l2229:	
  7214                           ;protocol.c: 314: }
  7215                           ;protocol.c: 317: for(; i <= (receive_buf[1] + 2); i++)
  7216                           
  7217                           
  7218                           ;protocol.c: 318: {
  7219                           ;protocol.c: 319: spi_slave_receive(&receive_buf[i]);
  7220  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  7221  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  7222  0CC9  0841               	movf	receive_packet@i,w
  7223  0CCA  3E20               	addlw	(low (receive_packet@receive_buf| 0))& (0+255)
  7224  0CCB  120A  158A  2180  120A  158A  	fcall	_spi_slave_receive
  7225  0CD0  3001               	movlw	1
  7226  0CD1  00F3               	movwf	??_receive_packet
  7227  0CD2  0873               	movf	??_receive_packet,w
  7228  0CD3  1283               	bcf	3,5	;RP0=0, select bank0
  7229  0CD4  1303               	bcf	3,6	;RP1=0, select bank0
  7230  0CD5  07C1               	addwf	receive_packet@i,f
  7231  0CD6                     i1l2233:	
  7232  0CD6  0821               	movf	receive_packet@receive_buf+1,w
  7233  0CD7  3E02               	addlw	2
  7234  0CD8  00F3               	movwf	??_receive_packet
  7235  0CD9  3000               	movlw	0
  7236  0CDA  1803               	skipnc
  7237  0CDB  3001               	movlw	1
  7238  0CDC  00F4               	movwf	??_receive_packet+1
  7239  0CDD  0874               	movf	??_receive_packet+1,w
  7240  0CDE  3A80               	xorlw	128
  7241  0CDF  00F5               	movwf	??_receive_packet+2
  7242  0CE0  3080               	movlw	128
  7243  0CE1  0275               	subwf	??_receive_packet+2,w
  7244  0CE2  1D03               	skipz
  7245  0CE3  2CE6               	goto	u212_25
  7246  0CE4  0841               	movf	receive_packet@i,w
  7247  0CE5  0273               	subwf	??_receive_packet,w
  7248  0CE6                     u212_25:	
  7249  0CE6  1803               	skipnc
  7250  0CE7  2CC7               	goto	i1l2229
  7251                           
  7252                           ;protocol.c: 320: }
  7253                           ;protocol.c: 323: buf_send(receive_buf);
  7254  0CE8  3020               	movlw	(low (receive_packet@receive_buf| 0))& (0+255)
  7255  0CE9  120A  158A  235D   	fcall	_buf_send
  7256                           
  7257                           ;protocol.c: 326: rx_packet_status = TRUE;
  7258  0CEC  1683               	bsf	3,5	;RP0=1, select bank3
  7259  0CED  1703               	bsf	3,6	;RP1=1, select bank3
  7260  0CEE  01A9               	clrf	_rx_packet_status^(0+384)
  7261  0CEF  0AA9               	incf	_rx_packet_status^(0+384),f
  7262  0CF0  0008               	return
  7263  0CF1                     __end_of_receive_packet:	
  7264                           
  7265                           	psect	text36
  7266  0980                     __ptext36:	
  7267 ;; *************** function _spi_slave_receive *****************
  7268 ;; Defined at:
  7269 ;;		line 120 in file "spi_slave.c"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;  p_get           1    wreg     PTR unsigned char 
  7272 ;;		 -> isr@isr_spi_buf(1), receive_packet@receive_buf(33), 
  7273 ;; Auto vars:     Size  Location     Type
  7274 ;;  p_get           1    1[COMMON] PTR unsigned char 
  7275 ;;		 -> isr@isr_spi_buf(1), receive_packet@receive_buf(33), 
  7276 ;; Return value:  Size  Location     Type
  7277 ;;		None               void
  7278 ;; Registers used:
  7279 ;;		wreg, fsr0l, fsr0h
  7280 ;; Tracked objects:
  7281 ;;		On entry : 0/0
  7282 ;;		On exit  : 0/0
  7283 ;;		Unchanged: 0/0
  7284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7285 ;;      Params:         0       0       0       0       0
  7286 ;;      Locals:         1       0       0       0       0
  7287 ;;      Temps:          1       0       0       0       0
  7288 ;;      Totals:         2       0       0       0       0
  7289 ;;Total ram usage:        2 bytes
  7290 ;; Hardware stack levels used:    1
  7291 ;; This function calls:
  7292 ;;		Nothing
  7293 ;; This function is called by:
  7294 ;;		_receive_packet
  7295 ;;		_isr
  7296 ;; This function uses a non-reentrant model
  7297 ;;
  7298                           
  7299                           
  7300                           ;psect for function _spi_slave_receive
  7301  0980                     _spi_slave_receive:	
  7302                           
  7303                           ;incstack = 0
  7304                           ; Regs used in _spi_slave_receive: [wregfsr0]
  7305                           ;spi_slave_receive@p_get stored from wreg
  7306  0980  00F1               	movwf	spi_slave_receive@p_get
  7307  0981                     i1l223:	
  7308                           ;spi_slave.c: 124: {
  7309                           ;spi_slave.c: 125: ;
  7310                           
  7311                           ;spi_slave.c: 123: while(SSPSTATbits.BF == 0)
  7312                           
  7313  0981  1683               	bsf	3,5	;RP0=1, select bank1
  7314  0982  1303               	bcf	3,6	;RP1=0, select bank1
  7315  0983  1C14               	btfss	20,0	;volatile
  7316  0984  2981               	goto	i1l223
  7317                           
  7318                           ;spi_slave.c: 126: }
  7319                           ;spi_slave.c: 129: *p_get = SSPBUF;
  7320  0985  1283               	bcf	3,5	;RP0=0, select bank0
  7321  0986  1303               	bcf	3,6	;RP1=0, select bank0
  7322  0987  0813               	movf	19,w	;volatile
  7323  0988  00F0               	movwf	??_spi_slave_receive
  7324  0989  0871               	movf	spi_slave_receive@p_get,w
  7325  098A  0084               	movwf	4
  7326  098B  0870               	movf	??_spi_slave_receive,w
  7327  098C  1383               	bcf	3,7	;select IRP bank0
  7328  098D  0080               	movwf	0
  7329                           
  7330                           ;spi_slave.c: 132: SSPBUF = 0xff;
  7331  098E  30FF               	movlw	255
  7332  098F  0093               	movwf	19	;volatile
  7333  0990  0008               	return
  7334  0991                     __end_of_spi_slave_receive:	
  7335                           
  7336                           	psect	text37
  7337  0B5D                     __ptext37:	
  7338 ;; *************** function _buf_send *****************
  7339 ;; Defined at:
  7340 ;;		line 505 in file "protocol.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;  buf             1    wreg     PTR unsigned char 
  7343 ;;		 -> receive_packet@receive_buf(33), 
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;  buf             1    2[COMMON] PTR unsigned char 
  7346 ;;		 -> receive_packet@receive_buf(33), 
  7347 ;;  i               1    1[COMMON] unsigned char 
  7348 ;; Return value:  Size  Location     Type
  7349 ;;		None               void
  7350 ;; Registers used:
  7351 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7357 ;;      Params:         0       0       0       0       0
  7358 ;;      Locals:         2       0       0       0       0
  7359 ;;      Temps:          1       0       0       0       0
  7360 ;;      Totals:         3       0       0       0       0
  7361 ;;Total ram usage:        3 bytes
  7362 ;; Hardware stack levels used:    1
  7363 ;; This function calls:
  7364 ;;		Nothing
  7365 ;; This function is called by:
  7366 ;;		_receive_packet
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           
  7371                           ;psect for function _buf_send
  7372  0B5D                     _buf_send:	
  7373                           
  7374                           ;incstack = 0
  7375                           ; Regs used in _buf_send: [wreg-fsr0h+status,2+status,0]
  7376                           ;buf_send@buf stored from wreg
  7377  0B5D  00F2               	movwf	buf_send@buf
  7378                           
  7379                           ;protocol.c: 507: uint8_t i;
  7380                           ;protocol.c: 510: rx_packet.data_type = *buf++;
  7381  0B5E  0872               	movf	buf_send@buf,w
  7382  0B5F  0084               	movwf	4
  7383  0B60  1383               	bcf	3,7	;select IRP bank0
  7384  0B61  0800               	movf	0,w
  7385  0B62  00F0               	movwf	??_buf_send
  7386  0B63  0870               	movf	??_buf_send,w
  7387  0B64  1283               	bcf	3,5	;RP0=0, select bank0
  7388  0B65  1303               	bcf	3,6	;RP1=0, select bank0
  7389  0B66  00C2               	movwf	_rx_packet
  7390  0B67  3001               	movlw	1
  7391  0B68  00F0               	movwf	??_buf_send
  7392  0B69  0870               	movf	??_buf_send,w
  7393  0B6A  07F2               	addwf	buf_send@buf,f
  7394                           
  7395                           ;protocol.c: 513: rx_packet.payload_len = *buf++;
  7396  0B6B  0872               	movf	buf_send@buf,w
  7397  0B6C  0084               	movwf	4
  7398  0B6D  0800               	movf	0,w
  7399  0B6E  00F0               	movwf	??_buf_send
  7400  0B6F  0870               	movf	??_buf_send,w
  7401  0B70  00C3               	movwf	_rx_packet+1
  7402  0B71  3001               	movlw	1
  7403  0B72  00F0               	movwf	??_buf_send
  7404  0B73  0870               	movf	??_buf_send,w
  7405  0B74  07F2               	addwf	buf_send@buf,f
  7406                           
  7407                           ;protocol.c: 516: for(i = 0; i < rx_packet.payload_len; i++)
  7408  0B75  01F1               	clrf	buf_send@i
  7409  0B76                     i1l1925:	
  7410  0B76  0843               	movf	_rx_packet+1,w
  7411  0B77  0271               	subwf	buf_send@i,w
  7412  0B78  1803               	btfsc	3,0
  7413  0B79  2B8C               	goto	i1l1927
  7414                           
  7415                           ;protocol.c: 517: {
  7416                           ;protocol.c: 518: rx_packet.payload[i] = *buf++;
  7417  0B7A  0872               	movf	buf_send@buf,w
  7418  0B7B  0084               	movwf	4
  7419  0B7C  0800               	movf	0,w
  7420  0B7D  00F0               	movwf	??_buf_send
  7421  0B7E  0871               	movf	buf_send@i,w
  7422  0B7F  3E44               	addlw	(low ((_rx_packet| 0+2)))& (0+255)
  7423  0B80  0084               	movwf	4
  7424  0B81  0870               	movf	??_buf_send,w
  7425  0B82  0080               	movwf	0
  7426  0B83  3001               	movlw	1
  7427  0B84  00F0               	movwf	??_buf_send
  7428  0B85  0870               	movf	??_buf_send,w
  7429  0B86  07F2               	addwf	buf_send@buf,f
  7430  0B87  3001               	movlw	1
  7431  0B88  00F0               	movwf	??_buf_send
  7432  0B89  0870               	movf	??_buf_send,w
  7433  0B8A  07F1               	addwf	buf_send@i,f
  7434  0B8B  2B76               	goto	i1l1925
  7435  0B8C                     i1l1927:	
  7436                           
  7437                           ;protocol.c: 519: }
  7438                           ;protocol.c: 522: rx_packet.data_end_command = *buf;
  7439  0B8C  0872               	movf	buf_send@buf,w
  7440  0B8D  0084               	movwf	4
  7441  0B8E  0800               	movf	0,w
  7442  0B8F  00F0               	movwf	??_buf_send
  7443  0B90  0870               	movf	??_buf_send,w
  7444  0B91  00E2               	movwf	_rx_packet+32
  7445  0B92  0008               	return
  7446  0B93                     __end_of_buf_send:	
  7447                           
  7448                           	psect	text38
  7449  092D                     __ptext38:	
  7450 ;; *************** function _check_flag *****************
  7451 ;; Defined at:
  7452 ;;		line 341 in file "protocol.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;		None
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;		None
  7457 ;; Return value:  Size  Location     Type
  7458 ;;		None               void
  7459 ;; Registers used:
  7460 ;;		wreg, status,2, status,0, pclath, cstack
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7466 ;;      Params:         0       0       0       0       0
  7467 ;;      Locals:         0       0       0       0       0
  7468 ;;      Temps:          0       0       0       0       0
  7469 ;;      Totals:         0       0       0       0       0
  7470 ;;Total ram usage:        0 bytes
  7471 ;; Hardware stack levels used:    1
  7472 ;; Hardware stack levels required when called:    1
  7473 ;; This function calls:
  7474 ;;		_spi_slave_send
  7475 ;; This function is called by:
  7476 ;;		_isr
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           
  7481                           ;psect for function _check_flag
  7482  092D                     _check_flag:	
  7483                           
  7484                           ;protocol.c: 344: if(tx_packet_status)
  7485                           
  7486                           ;incstack = 0
  7487                           ; Regs used in _check_flag: [wreg+status,2+status,0+pclath+cstack]
  7488  092D  087C               	movf	_tx_packet_status,w
  7489  092E  1903               	btfsc	3,2
  7490  092F  2935               	goto	i1l2243
  7491                           
  7492                           ;protocol.c: 345: {
  7493                           ;protocol.c: 346: spi_slave_send((uint8_t)TRUE);
  7494  0930  3001               	movlw	1
  7495  0931  120A  158A  21A2   	fcall	_spi_slave_send
  7496                           
  7497                           ;protocol.c: 347: }
  7498  0934  0008               	return
  7499  0935                     i1l2243:	
  7500                           
  7501                           ;protocol.c: 348: else
  7502                           ;protocol.c: 349: {
  7503                           ;protocol.c: 350: spi_slave_send((uint8_t)FALSE);
  7504  0935  3000               	movlw	0
  7505  0936  120A  158A  21A2   	fcall	_spi_slave_send
  7506  0939  0008               	return
  7507  093A                     __end_of_check_flag:	
  7508                           
  7509                           	psect	text39
  7510  09A2                     __ptext39:	
  7511 ;; *************** function _spi_slave_send *****************
  7512 ;; Defined at:
  7513 ;;		line 89 in file "spi_slave.c"
  7514 ;; Parameters:    Size  Location     Type
  7515 ;;  data            1    wreg     unsigned char 
  7516 ;; Auto vars:     Size  Location     Type
  7517 ;;  data            1    2[COMMON] unsigned char 
  7518 ;;  buf             1    1[COMMON] unsigned char 
  7519 ;; Return value:  Size  Location     Type
  7520 ;;		None               void
  7521 ;; Registers used:
  7522 ;;		wreg
  7523 ;; Tracked objects:
  7524 ;;		On entry : 0/0
  7525 ;;		On exit  : 0/0
  7526 ;;		Unchanged: 0/0
  7527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7528 ;;      Params:         0       0       0       0       0
  7529 ;;      Locals:         2       0       0       0       0
  7530 ;;      Temps:          1       0       0       0       0
  7531 ;;      Totals:         3       0       0       0       0
  7532 ;;Total ram usage:        3 bytes
  7533 ;; Hardware stack levels used:    1
  7534 ;; This function calls:
  7535 ;;		Nothing
  7536 ;; This function is called by:
  7537 ;;		_send_packet
  7538 ;;		_check_flag
  7539 ;; This function uses a non-reentrant model
  7540 ;;
  7541                           
  7542                           
  7543                           ;psect for function _spi_slave_send
  7544  09A2                     _spi_slave_send:	
  7545                           
  7546                           ;incstack = 0
  7547                           ; Regs used in _spi_slave_send: [wreg]
  7548                           ;spi_slave_send@data stored from wreg
  7549  09A2  00F2               	movwf	spi_slave_send@data
  7550                           
  7551                           ;spi_slave.c: 91: uint8_t buf;
  7552                           ;spi_slave.c: 94: SSPBUF = data;
  7553  09A3  0872               	movf	spi_slave_send@data,w
  7554  09A4  1283               	bcf	3,5	;RP0=0, select bank0
  7555  09A5  1303               	bcf	3,6	;RP1=0, select bank0
  7556  09A6  0093               	movwf	19	;volatile
  7557  09A7                     i1l217:	
  7558                           ;spi_slave.c: 98: {
  7559                           ;spi_slave.c: 99: ;
  7560                           
  7561                           ;spi_slave.c: 97: while(SSPSTATbits.BF == 0)
  7562                           
  7563  09A7  1683               	bsf	3,5	;RP0=1, select bank1
  7564  09A8  1303               	bcf	3,6	;RP1=0, select bank1
  7565  09A9  1C14               	btfss	20,0	;volatile
  7566  09AA  29A7               	goto	i1l217
  7567                           
  7568                           ;spi_slave.c: 100: }
  7569                           ;spi_slave.c: 103: buf = SSPBUF;
  7570  09AB  1283               	bcf	3,5	;RP0=0, select bank0
  7571  09AC  1303               	bcf	3,6	;RP1=0, select bank0
  7572  09AD  0813               	movf	19,w	;volatile
  7573  09AE  00F0               	movwf	??_spi_slave_send
  7574  09AF  0870               	movf	??_spi_slave_send,w
  7575  09B0  00F1               	movwf	spi_slave_send@buf
  7576                           
  7577                           ;spi_slave.c: 106: SSPBUF = 0xff;
  7578  09B1  30FF               	movlw	255
  7579  09B2  0093               	movwf	19	;volatile
  7580  09B3  0008               	return
  7581  09B4                     __end_of_spi_slave_send:	
  7582  007E                     btemp	set	126	;btemp
  7583  007E                     wtemp	set	126
  7584  007E                     wtemp0	set	126
  7585  0080                     wtemp1	set	128
  7586  0082                     wtemp2	set	130
  7587  0084                     wtemp3	set	132
  7588  0086                     wtemp4	set	134
  7589  0088                     wtemp5	set	136
  7590  007F                     wtemp6	set	127
  7591  007E                     ttemp	set	126
  7592  007E                     ttemp0	set	126
  7593  0081                     ttemp1	set	129
  7594  0084                     ttemp2	set	132
  7595  0087                     ttemp3	set	135
  7596  007F                     ttemp4	set	127
  7597  007E                     ltemp	set	126
  7598  007E                     ltemp0	set	126
  7599  0082                     ltemp1	set	130
  7600  0086                     ltemp2	set	134
  7601  0080                     ltemp3	set	128


Data Sizes:
    Strings     23
    Constant    3
    Data        15
    BSS         68
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     34      67
    BANK1            80     47      80
    BANK3            96     10      26
    BANK2            96     80      80

Pointer List with Targets:

    process_1_null@p_flag	PTR unsigned char  size(1) Largest target is 1
		 -> number_to_string_char@flag(BANK1[1]), 

    process_1_null@p_buf	PTR unsigned char  size(1) Largest target is 5
		 -> main@temp_buf_c(BANK2[5]), 

    process_1@p_flag	PTR unsigned char  size(1) Largest target is 1
		 -> number_to_string_char@flag(BANK1[1]), 

    process_1@p_buf	PTR unsigned char  size(1) Largest target is 5
		 -> main@temp_buf_c(BANK2[5]), 

    process_10@p_flag	PTR unsigned char  size(1) Largest target is 1
		 -> number_to_string_char@flag(BANK1[1]), 

    process_10@p_buf	PTR unsigned char  size(1) Largest target is 5
		 -> main@temp_buf_c(BANK2[5]), 

    process_100@p_flag	PTR unsigned char  size(1) Largest target is 1
		 -> number_to_string_char@flag(BANK1[1]), 

    process_100@p_buf	PTR unsigned char  size(1) Largest target is 5
		 -> main@temp_buf_c(BANK2[5]), 

    number_to_string_char@buf	PTR unsigned char  size(1) Largest target is 5
		 -> main@temp_buf_c(BANK2[5]), 

    bit_shift@p_adres	PTR struct . size(1) Largest target is 2
		 -> get_adcon@my_adres(BANK1[2]), 

    bit_shift@p_ad_value	PTR unsigned int  size(1) Largest target is 2
		 -> get_adcon@ad_value(BANK1[2]), 

    put_string@str	PTR unsigned char  size(2) Largest target is 23
		 -> STR_1(CODE[23]), main@send_data(BANK2[15]), 

    spi_slave_receive@p_get	PTR unsigned char  size(1) Largest target is 33
		 -> isr@isr_spi_buf(COMMON[1]), receive_packet@receive_buf(BANK0[33]), 

    buf_send@buf	PTR unsigned char  size(1) Largest target is 33
		 -> receive_packet@receive_buf(BANK0[33]), 

    double_to_byte_array@p_data_array	PTR unsigned char  size(1) Largest target is 5
		 -> double_data_set@buf(BANK1[5]), 

    double_to_byte_array@p_data	PTR  size(1) Largest target is 15
		 -> main@send_data(BANK2[15]), 

    uint16_to_byte_array@p_data	PTR unsigned int  size(1) Largest target is 15
		 -> main@send_data(BANK2[15]), 

    uint16_to_byte_array@p_data_array	PTR unsigned char  size(1) Largest target is 3
		 -> uint16_data_set@buf(BANK1[3]), 

    double_data_set@p_data	PTR  size(1) Largest target is 15
		 -> main@send_data(BANK2[15]), 

    uint16_data_set@p_data	PTR unsigned int  size(1) Largest target is 15
		 -> main@send_data(BANK2[15]), 

    uint8_data_set@p_data	PTR unsigned char  size(1) Largest target is 15
		 -> main@send_data(BANK2[15]), 

    extract_receive_packet@p_data_len_buf	PTR unsigned char  size(1) Largest target is 1
		 -> main@r_data_len(BANK2[1]), 

    extract_receive_packet@p_data_buf	PTR unsigned char  size(1) Largest target is 30
		 -> main@r_data(BANK2[30]), 

    extract_receive_packet@p_data_type_buf	PTR unsigned char  size(1) Largest target is 1
		 -> main@r_data_type(BANK2[1]), 

    sent_data_set@p_data	PTR void  size(1) Largest target is 15
		 -> main@send_data(BANK2[15]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_receive_packet
    _send_packet->_spi_slave_send
    _receive_packet->_buf_send
    _check_flag->_spi_slave_send

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_receive_packet

Critical Paths under _main in BANK1

    _main->_get_pt
    _sent_data_set->_double_data_set
    _uint16_data_set->_uint16_to_byte_array
    _double_data_set->_double_to_byte_array
    _put_string->_put_char
    _number_to_string_char->_process_100
    _process_100->_process_10
    _process_10->___awdiv
    _process_10->_process_1
    _get_pt->___ftdiv
    ___ftdiv->___ftmul
    _get_adcon->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___lwtoft
    _extract_receive_packet->_rx_packet_clear

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_get_pt

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                92    92      0   31366
                                              6 BANK3      4     4      0
                                              0 BANK2     80    80      0
                            ___ftmul
                            ___fttol
             _extract_receive_packet
                          _get_adcon
                             _get_pt
              _number_to_string_char
                      _pic_port_init
                           _put_char
                         _put_string
                    _send_data_slave
                      _sent_data_set
                    _spi_slave_start
                          _uart_init
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _spi_slave_start                                      1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _sent_data_set                                        8     6      2    2157
                                             18 BANK1      8     6      2
                             ___wmul
                    _double_data_set
                    _uint16_data_set
                     _uint8_data_set
 ---------------------------------------------------------------------------------
 (2) _uint8_data_set                                       3     2      1     163
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (2) _uint16_data_set                                      7     6      1     595
                                              5 BANK1      7     6      1
               _uint16_to_byte_array
 ---------------------------------------------------------------------------------
 (3) _uint16_to_byte_array                                 5     4      1     250
                                              0 BANK1      5     4      1
 ---------------------------------------------------------------------------------
 (2) _double_data_set                                      9     8      1     694
                                              9 BANK1      9     8      1
               _double_to_byte_array
 ---------------------------------------------------------------------------------
 (3) _double_to_byte_array                                 9     8      1     355
                                              0 BANK1      9     8      1
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     266
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (1) _send_data_slave                                      3     2      1     127
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (1) _put_string                                           2     0      2     226
                                              1 BANK1      2     0      2
                           _put_char
 ---------------------------------------------------------------------------------
 (2) _put_char                                             1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _pic_port_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _number_to_string_char                                5     4      1    7790
                                             26 BANK1      5     4      1
                             ___bmul
                         _process_10
                        _process_100
                     _process_1_null
 ---------------------------------------------------------------------------------
 (2) _process_1_null                                       9     7      2     517
                                              0 BANK1      9     7      2
 ---------------------------------------------------------------------------------
 (2) _process_100                                          7     5      2    3354
                                             19 BANK1      7     5      2
                            ___awmod
                         _process_10
 ---------------------------------------------------------------------------------
 (3) _process_10                                          10     8      2    2311
                                              9 BANK1     10     8      2
                            ___awdiv
                            ___awmod
                          _process_1
 ---------------------------------------------------------------------------------
 (4) _process_1                                            9     7      2     424
                                              0 BANK1      9     7      2
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     693
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     575
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     201
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (1) _get_pt                                               9     6      3    7363
                                             44 BANK1      3     0      3
                                              0 BANK3      6     6      0
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3468
                                             28 BANK1     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _get_adcon                                           12     9      3    5988
                                             28 BANK1     12     9      3
                            ___ftmul
                           ___lwtoft
                          _bit_shift
 ---------------------------------------------------------------------------------
 (2) _bit_shift                                            6     5      1     250
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2104
                                              8 BANK1      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3406
                                             12 BANK1     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _extract_receive_packet                               5     3      2     423
                                              2 BANK1      5     3      2
                    _rx_packet_clear
 ---------------------------------------------------------------------------------
 (2) _rx_packet_clear                                      2     2      0      99
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     826
                                              0 BANK1     14    10      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  6     6      0     785
                                              6 COMMON     6     6      0
                         _check_flag
                     _receive_packet
                        _send_packet
                  _spi_slave_receive
 ---------------------------------------------------------------------------------
 (6) _send_packet                                          3     3      0     137
                                              3 COMMON     2     2      0
                     _spi_slave_send
                    _tx_packet_clear
 ---------------------------------------------------------------------------------
 (7) _tx_packet_clear                                      2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _receive_packet                                      37    37      0     475
                                              3 COMMON     3     3      0
                                              0 BANK0     34    34      0
                           _buf_send
                  _spi_slave_receive
 ---------------------------------------------------------------------------------
 (6) _spi_slave_receive                                    2     2      0     103
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (7) _buf_send                                             3     3      0     164
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _check_flag                                           0     0      0      23
                     _spi_slave_send
 ---------------------------------------------------------------------------------
 (7) _spi_slave_send                                       3     3      0      23
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
   _extract_receive_packet
     _rx_packet_clear
   _get_adcon
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _bit_shift
   _get_pt
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
   _number_to_string_char
     ___bmul
     _process_10
       ___awdiv
       ___awmod
       _process_1
     _process_100
       ___awmod
       _process_10
         ___awdiv
         ___awmod
         _process_1
     _process_1_null
   _pic_port_init
   _put_char
   _put_string
     _put_char
   _send_data_slave
   _sent_data_set
     ___wmul
     _double_data_set
       _double_to_byte_array
     _uint16_data_set
       _uint16_to_byte_array
     _uint8_data_set
   _spi_slave_start
   _uart_init

 _isr (ROOT)
   _check_flag
     _spi_slave_send
   _receive_packet
     _buf_send
     _spi_slave_receive
   _send_packet
     _spi_slave_send
     _tx_packet_clear
   _spi_slave_receive

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      A      1A       9       27.1%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     50      50      11       83.3%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2F      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     22      43       5       83.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     10A      12        0.0%
ABS                  0      0     10A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu Nov 23 19:57:20 2017

                                    pc 0002                        ?_receive_packet 0070  
                       ___bmul@product 00A2                            __CFG_CP$OFF 0000  
                          _SSPSTATbits 0094                           ___awdiv@sign 00A6  
               ??_uint16_to_byte_array 00A1                                     fsr 0004  
                  ___wmul@multiplicand 00A2                            buf_send@buf 0072  
                                  l104 0F2F                                    l213 0AEF  
                                  l151 07DB                                    l314 0E39  
                                  l250 093D                                    l165 0AF6  
                                  l157 0B2B                                    l615 0FDF  
                                  l447 0A21                                    l616 0FE7  
                                  l608 0FCA                                    l699 0746  
                                  _RB7 0037                           __CFG_CPD$OFF 0000  
                                  _isr 0C02                   uint8_data_set@p_data 00A2  
                                  fsr0 0004                                    indf 0000  
                         ___awmod@sign 00A6                            get_pt@light 019F  
               ??_double_to_byte_array 00A1                           __CFG_FOSC$HS 0000  
                         process_1@val 00A8                           process_1@num 00A4  
                         __CFG_LVP$OFF 0000                           ___ftdiv@cntr 00C6  
                         ___ftdiv@sign 00CB                                   l3021 0757  
                                 l3015 073B                                   l3007 071E  
                                 l3017 0749                                   l3009 072E  
                                 l3041 006C                                   l3035 005B  
                                 l2501 0E86                                   l3029 0054  
                                 l3151 04A4                                   l3143 0493  
                                 l3129 03F9                                   l3145 049D  
                                 l2507 0E91                                   l2603 0F64  
                                 l3075 012A                                   l3059 00A7  
                                 l2621 0FB4                                   l2613 0F9C  
                                 l2533 0ED0                                   l2525 0EBD  
                                 l2517 0E99                                   l2605 0F71  
                                 l3149 04A3                                   l3085 0149  
                                 l2703 0A04                                   l2519 0EA7  
                                 l3167 04EA                                   l2617 0FA3  
                                 l2801 06AC                                   l2529 0EC8  
                                 l2545 0D85                                   l2627 0FCF  
                                 l2619 0FAF                                   l2571 0DC1  
                                 l2563 0DAE                                   l2491 0D59  
                                 l2709 0A11                                   l2629 0FD9  
                                 l2821 0575                                   l2557 0D92  
                                 l2549 0D8C                                   l2741 0A19  
                                 l2815 055F                                   l2559 0DA0  
                                 l2567 0DB9                                   l2735 0DE7  
                                 l2833 05B4                                   l2489 0D41  
                                 l2737 0DFF                                   l2673 0B5A  
                                 l2665 0B43                                   l2755 09B8  
                                 l2845 05DC                                   l2837 05C4  
                                 l2773 0632                                   l2933 0D21  
                                 l2759 09BE                                   l2927 0D0A  
                                 l2943 0B93                                   l2695 0B25  
                                 l2687 0B0E                                   l2849 05EC  
                                 l2793 068D                                   l2945 0BC4  
                                 l2779 0648                                   l2971 0F0C  
                                 l2957 0C85                                   l2973 0F17  
                                 l2959 0CA1                                   l2969 0F03  
                                 l2977 0F22                                   l2989 06EC  
                                 ?_isr 0070                        ?_spi_slave_send 0070  
                                 STR_1 0813               __size_of_send_data_slave 000E  
                                 u3025 05C5                                   u3035 05CD  
                                 u3300 0044                                   u2405 0EA8  
                                 u3215 06F3                                   u2415 0EB4  
                                 u2425 0EBE                                   u2505 0DA6  
                                 u2345 0D4A                                   u3075 05ED  
                                 u2515 0DAF                                   u3245 071F  
                                 u3085 05F5                                   u2615 0FC3  
                                 u3407 0094                                   u2385 0E9C  
                                 u3417 04D1                            main@counter 0154  
                                 u3275 073D                                   u2635 0FD2  
                                 u3427 04E3                                   u2805 0BF1  
                                 u2485 0D95                                   u3437 0521  
                                 u3447 0E33                                   u2815 0DF0  
                                 u2905 065A                                   u2675 0FEE  
                                 u2595 0FA8                                   u2915 066C  
                                 u2835 0A22                                   u2925 068E  
                                 u2845 0A29                                   u3397 0082  
                                 u2935 069F                                   u2945 06AD  
                                 u2795 0BDC                                   _RCIF 0065  
                                 u2985 0581                                   u2995 0593  
                                 _TXIF 0064                           __CFG_WRT$OFF 0000  
                                 _main 003A                           ___ftpack@arg 00A0  
                     ??_uint8_data_set 00A1                           ___ftpack@exp 00A3  
                                 btemp 007E                          __CFG_BOREN$ON 0000  
                                 ltemp 007E                                   start 0012  
                                 ttemp 007E                                   wtemp 007E  
                     tx_packet_clear@i 0071                      ___bmul@multiplier 00A3  
                _number_to_string_char 0CF1                          process_10@val 00B0  
                        process_10@num 00B2                           ___ftmul@cntr 00BA  
              extract_receive_packet@i 00A6                           ___ftmul@sign 00BB  
             process_100@remainder_100 00B9                           ___fttol@exp1 00AD  
                         ___fttol@lval 00A9                                  ??_isr 0076  
                    ??_double_data_set 00AA                                  ?_main 0070  
                      __end_of___awdiv 0ED5                          __CFG_WDTE$OFF 0000  
                      __end_of___awmod 0DC6                        __end_of___ftdiv 06D2  
                      __end_of___ftmul 061A                        ___awdiv@divisor 00A0  
                      __end_of___fttol 0760                       ?_spi_slave_start 0070  
                                i1l223 0981                                  i1l217 09A7  
                                i1l283 0C2E                                  i1l287 0C31  
               uint8_data_set@data_len 00A0                        ___awdiv@counter 00A5  
                                _RCREG 001A                                  _RCSTA 0018  
                                _SPBRG 0099                                  _PORTA 0005  
                                _PORTB 0006                                  _PORTC 0007  
                                _PORTD 0008                                  _PORTE 0009  
                                _TRISA 0085                                  _TRISB 0086  
                                _TRISC 0087                                  _TRISD 0088  
                                _TRISE 0089                                  _TXREG 0019  
                                _TXSTA 0098                      put_char@byte_data 00A0  
                        __CFG_PWRTE$ON 0000       double_to_byte_array@p_data_array 00A0  
               process_10@remainder_10 00AF                          ___ftpack@sign 00A4  
                                main@i 015A                       ?_uint16_data_set 00A5  
                                pclath 000A                                  ltemp0 007E  
                                ltemp1 0082                                  ltemp2 0086  
                                ltemp3 0080                                  ttemp0 007E  
                                ttemp1 0081                                  ttemp2 0084  
                                ttemp3 0087                                  ttemp4 007F  
                                status 0003                                  wtemp0 007E  
                                wtemp1 0080                                  wtemp2 0082  
                                wtemp3 0084                                  wtemp4 0086  
                                wtemp5 0088                                  wtemp6 007F  
                       process_100@num 00B8                       bit_shift@p_adres 00A0  
              ?_extract_receive_packet 00A2                        __initialization 0015  
                uint16_data_set@p_data 00AA                           __end_of_main 0547  
                       process_1@p_buf 00A1                                 ??_main 01A5  
                        ___fttol@sign1 00A8       uint16_to_byte_array@p_data_array 00A0  
                               _ADCON0 001F                                 _ADCON1 009F  
                         ?_send_packet 0070                                 _ADRESH 001E  
                               _ADRESL 009E                       ___awdiv@dividend 00A2  
                     __end_of___ftpack 1000                                 i1l2211 0AB6  
                               i1l2233 0CD6                                 i1l2209 0AA1  
                               i1l2243 0935                                 i1l2229 0CC7  
                               i1l2451 0C11                                 i1l2453 0C17  
                               i1l2455 0C1D                                 i1l2459 0C23  
                               i1l1925 0B76                                 i1l1927 0B8C  
                               i1l1893 09E8                                 i1l1899 09F5  
                               u212_25 0CE6                       __end_of___lwtoft 09DF  
                      _rx_packet_clear 09F9                                 _TRISA5 042D  
                               _TRISC3 043B                                 _TRISC4 043C  
                               _TRISC5 043D                                 _TRISC6 043E  
                               _TRISC7 043F                                 _SSPBUF 0013  
             number_to_string_char@buf 00BE               number_to_string_char@num 00BA  
       __end_of_extract_receive_packet 0CB2                       ??_process_1_null 00A2  
               ?_number_to_string_char 00BA                      ??_send_data_slave 00A1  
                     __end_of_buf_send 0B93                                 ___bmul 09B4  
                               ___wmul 0A15                              ??___awdiv 00A4  
                    process_1@divide_1 00A5                              ??___awmod 00A4  
                            ??___ftdiv 00C2                              ??___ftmul 00B2  
                            ??___fttol 00A4                          main@send_data 0145  
                               _get_pt 0760                  double_data_set@p_data 00B0  
                     ___awdiv@quotient 00A7                        ___awmod@divisor 00A0  
                      ___awmod@counter 00A5                    process_10@divide_10 00AE  
                ___ftmul@f3_as_product 00B7                                 saved_w 007E  
                     __end_of_put_char 0947                           ?_process_100 00B3  
              __end_of__initialization 0036                             ___ftdiv@f1 00BF  
                           ___ftdiv@f2 00BC                             ___ftdiv@f3 00C7  
                     ??_receive_packet 0073                    ___bmul@multiplicand 00A0  
                      process_10@p_buf 00AA                             ___ftmul@f1 00AC  
                           ___ftmul@f2 00AF                             ___fttol@f1 00A0  
                       __pcstackCOMMON 0070                           __pidataBANK3 0971  
                __end_of_sent_data_set 0F30                             ___lwtoft@c 00A8  
                   __size_of_bit_shift 0039                       ??_spi_slave_send 0070  
                   __size_of_get_adcon 005B                __end_of_rx_packet_clear 0A15  
                      process_1@p_flag 00A0                             __pbssBANK0 0042  
                           __pbssBANK1 00CF                             __pbssBANK3 01A9  
                           _check_flag 092D             uint16_to_byte_array@p_data 00A4  
               get_adcon@voltage_value 00C1                 __size_of_pic_port_init 000F  
                      _double_data_set 0AF3               __size_of_tx_packet_clear 001A  
                           __pmaintext 003A                                ?___bmul 00A0  
                    _spi_slave_receive 0980                                ?___wmul 00A0  
                      process_1_null@i 00A6                             __pintentry 0004  
                              ?_get_pt 00CC                     ?_spi_slave_receive 0070  
                 get_adcon@adcon_shift 00C0                              ?___ftpack 00A0  
        __size_of_uint16_to_byte_array 002C                              ?___lwtoft 00A8  
                   __size_of_uart_init 000D                    ??_spi_slave_receive 0070  
                   __size_of_process_1 0045                      process_1_null@val 00A8  
                    process_1_null@num 00A4                         main@r_data_len 0144  
        __size_of_double_to_byte_array 002C                              ?_buf_send 0070  
              bit_shift@bit_mask_for_l 0812                             __stringtab 0800  
                     _rx_packet_status 01A9                   __size_of_send_packet 0031  
                   uint16_data_set@buf 00A7                      __end_of_bit_shift 0C02  
            __end_of_spi_slave_receive 0991                      __end_of_get_adcon 0E7A  
                      __size_of___bmul 0013                                ___awdiv 0E7A  
                              ___awmod 0D79                                ___ftdiv 061A  
                      __size_of___wmul 0023                                ___ftmul 0547  
                              ___fttol 06D2                              ?_put_char 0070  
      send_data_slave@data_end_command 00A0                        __size_of_get_pt 0078  
                           ??___ftpack 00A5                                __ptext1 0947  
                              __ptext2 0AC1                                __ptext3 0ED5  
                              __ptext4 07D8                                __ptext5 0B28  
                              __ptext6 0A64                                __ptext7 0AF3  
                              __ptext8 0A38                                __ptext9 0A15  
                           ??___lwtoft 00AB                           __size_of_isr 003A  
                        _pic_port_init 0962                       ___awmod@dividend 00A2  
                     ?_rx_packet_clear 0070                         main@temp_buf_c 0155  
                      _send_data_slave 0954                             ??_buf_send 0070  
                              clrloop0 0926               __size_of_spi_slave_start 0032  
                 end_of_initialization 0036              receive_packet@receive_buf 0020  
              __end_of_double_data_set 0B28                            ?_check_flag 0070  
                 __size_of_process_100 003A                ??_number_to_string_char 00BB  
                  process_1_null@p_buf 00A1                      __end_of_uart_init 0954  
            sent_data_set@byte_of_type 00B3                       _tx_packet_status 007C  
                    __end_of_process_1 0D79               __size_of_uint16_data_set 0035  
                     double_data_set@i 00B1                             ??_put_char 00A0  
              __size_of_uint8_data_set 0026                      ??_tx_packet_clear 0070  
                            _PORTAbits 0005                             _process_10 0F30  
                       ?_pic_port_init 0070                       process_100@p_buf 00B4  
                double_to_byte_array@i 00A8                              _TRISAbits 0085  
                      main@adcon_shift 015E                            process_10@i 00B1  
                           get_pt@volt 00CC                             _put_string 0B93  
               spi_slave_start@spi_isr 00A0                            ___ftdiv@exp 00CA  
                           main@light1 0131                             main@light2 0134  
                           main@light3 0137                             main@light4 013A  
                           main@light5 013D                             main@light6 0140  
                           main@r_data 0110                             main@temp_c 015F  
           __size_of_spi_slave_receive 0011                       process_10@p_flag 00A9  
              uint16_data_set@data_len 00A5                  sent_data_set@data_len 00B2  
                          ___ftmul@exp 00B6                         __end_of___bmul 09C7  
                       __end_of___wmul 0A38                          put_string@str 00A1  
                       __end_of_get_pt 07D8                    __size_of_check_flag 000D  
              __end_of_send_data_slave 0962                    start_initialization 0015  
                       isr@isr_spi_buf 007B                            __end_of_isr 0C3C  
                     ?_double_data_set 00A9   extract_receive_packet@p_data_len_buf 00A3  
                    ??_spi_slave_start 00A0        __end_ofbit_shift@bit_mask_for_l 0813  
                     uint16_data_set@i 00AB                               ??___bmul 00A1  
                             ??___wmul 00A4                             init_fetch0 0991  
                      receive_packet@i 0041                               ??_get_pt 00CF  
                          __pdataBANK3 0190                      ??_uint16_data_set 00A6  
        double_to_byte_array@converter 00A3                        ??_pic_port_init 00A0  
              __size_of_process_1_null 0059                            ?_process_10 00A9  
                    __size_of___ftpack 006E                            __pbssCOMMON 007C  
                            ___latbits 0002                      __size_of___lwtoft 0018  
                        __pcstackBANK0 0020                          __pcstackBANK1 00A0  
                        __pcstackBANK2 0110                          __pcstackBANK3 019F  
                  sent_data_set@p_data 00B9               ??_extract_receive_packet 00A4  
               __size_of_sent_data_set 005B           __end_of_uint16_to_byte_array 0A90  
                    __size_of_buf_send 0036                            ?_put_string 00A1  
               process_1_null@divide_1 00A5           __end_of_double_to_byte_array 0A64  
                            _bit_shift 0BC9                               ?___awdiv 00A0  
                             ?___awmod 00A0                               ?___ftdiv 00BC  
                             ?___ftmul 00AC                               ?___fttol 00A0  
                       _uint8_data_set 07D8                              _get_adcon 0E1F  
           double_to_byte_array@p_data 00A7                              __pstrings 0800  
              __size_of_receive_packet 003F                      __size_of_put_char 000D  
                     ?_send_data_slave 00A0                          ??_send_packet 0073  
                          _get_pt$1195 01A2                           ??_check_flag 0073  
                    interrupt_function 0004                         ___wmul@product 00A4  
              __size_of_spi_slave_send 0012         __size_of_number_to_string_char 0043  
                            clear_ram0 0925          __end_of_number_to_string_char 0D34  
                  __size_of_process_10 0062                               _PIE1bits 008C  
                      _tx_packet_clear 09DF                               _PIR1bits 000C  
               __end_of_uint8_data_set 07FE                              main@F1179 0190  
                           ?_bit_shift 00A0                              _uart_init 0947  
                      main@r_data_type 0143                              _process_1 0D34  
                        _sent_data_set 0ED5                             ?_get_adcon 00BC  
             send_data_slave@data_type 00A2                             _ADCON0bits 001F  
                          __stringbase 080F                             _ADCON1bits 009F  
                            _rx_packet 0042                      ___wmul@multiplier 00A0  
                   __end_of_check_flag 093A                              buf_send@i 0071  
                  __size_of_put_string 0036                             process_1@i 00A6  
                            _tx_packet 00CF                           send_packet@i 0074  
                        ??_process_100 00B5        __size_of_extract_receive_packet 003C  
             __size_of_rx_packet_clear 001C                    __end_of_send_packet 0AC1  
extract_receive_packet@p_data_type_buf 00A5                        ?_uint8_data_set 00A0  
                           ?_uart_init 0070                         ?_sent_data_set 00B2  
                           ?_process_1 00A0                       __size_of___awdiv 005B  
                     __size_of___awmod 004D                       __size_of___ftdiv 00B8  
                     __size_of___ftmul 00D3                       __size_of___fttol 008E  
                       _process_1_null 0DC6                               ___ftpack 0F92  
                   __end_of__stringtab 0810                   _uint16_to_byte_array 0A64  
                             ___lwtoft 09C7                double_data_set@data_len 00A9  
                      _spi_slave_start 0AC1                               __ptext10 0954  
                             __ptext11 0B93                               __ptext20 0E7A  
                             __ptext12 093A                               __ptext21 09B4  
                             __ptext13 0962                               __ptext30 09F9  
                             __ptext22 0760                               __ptext14 0CF1  
                             __ptext31 06D2                               __ptext23 061A  
                             __ptext15 0DC6                               __ptext32 0C02  
                             __ptext24 0E1F                               __ptext16 0C3C  
                             __ptext33 0A90                               __ptext25 0BC9  
                             __ptext17 0F30                               __ptext34 09DF  
                             __ptext26 09C7                               __ptext18 0D34  
                             __ptext35 0CB2                               __ptext27 0547  
                             __ptext19 0D79                               __ptext36 0980  
                             __ptext28 0F92                               __ptext37 0B5D  
                             __ptext29 0C76                               __ptext38 092D  
                             __ptext39 09A2                   _double_to_byte_array 0A38  
                             _buf_send 0B5D   __end_ofuint16_to_byte_array@bit_mask 0812  
         uint16_to_byte_array@bit_mask 0810                __end_of_tx_packet_clear 09F9  
                        __size_of_main 050D                    __end_of_process_100 0C76  
                      _uint16_data_set 0B28                            ??_bit_shift 00A1  
               __end_of_process_1_null 0E1F                               _put_char 093A  
               _extract_receive_packet 0C76                            ??_get_adcon 00BF  
                             main@temp 012E                         _receive_packet 0CB2  
                             main@volt 015B                  ?_uint16_to_byte_array 00A0  
                         ??_process_10 00AB                             _INTCONbits 000B  
                     rx_packet_clear@i 00A1                 spi_slave_receive@p_get 0071  
                   double_data_set@buf 00AB                               init_ram0 0995  
                ?_double_to_byte_array 00A0                            _send_packet 0A90  
                             intlevel1 0000                   process_1_null@p_flag 00A0  
                         ??_put_string 00A3                      get_adcon@ad_value 00C6  
                       _spi_slave_send 09A2                     __end_of_process_10 0F92  
                            stringcode 080A               __size_of_double_data_set 0035  
                      ??_sent_data_set 00B4                            ??_uart_init 00A0  
                    ??_rx_packet_clear 00A0                 __end_of_receive_packet 0CF1  
                      ?_process_1_null 00A0                            ??_process_1 00A2  
              __end_of_spi_slave_start 0AF3                  __end_of_pic_port_init 0971  
                   __end_of_put_string 0BC9                      get_adcon@my_adres 00C4  
                             stringdir 080A                               stringtab 0800  
            number_to_string_char@flag 00BD       extract_receive_packet@p_data_buf 00A2  
                          _process_100 0C3C                 __end_of_spi_slave_send 09B4  
              __end_of_uint16_data_set 0B5D                       ?_tx_packet_clear 0070  
                    process_100@p_flag 00B3                             _SSPCONbits 0014  
                   spi_slave_send@data 0072                    bit_shift@p_ad_value 00A5  
                    spi_slave_send@buf 0071  
