/******************************************************************************************
 * protocol.h
 * ver1.00
 * Hirofumi Hamada
 *=========================================================================================
 * 通信プロトコルについてのライブラリ　ヘッダファル(COM)
 *
 *=========================================================================================
 * ・ver1.00 || 2016/08/19 || Hirofumi Hamada
 *   初版作成
 *=========================================================================================
 * PIC16F877A
 * 
 *=========================================================================================
 * Created by fabsat Project(Tokai university Satellite Project[TSP])
 *****************************************************************************************/
#ifndef _PROTOCOL_H
#define _PROTOCOL_H

#include <xc.h>
#include "pic_setting.h"



/******************************************************************************************
 *                                  通信相手先の定義                                       *
 *****************************************************************************************/
typedef enum
{
    OBC1,
    OBC2,
    COM ,
    POW ,
} destination_t;


/******************************************************************************************
 *                                  Slave命令コード                                        *
 *****************************************************************************************/
#define RX_MODE         0x01
#define TX_MODE         0x02
#define FLAG_CHECK_MODE 0x03


/******************************************************************************************
 *                                  パケット関連の各種定義                                  *
 *****************************************************************************************/
/*
 * パケットの詳細
 * -------------------------------------------------------------------------------
 * | データタイプ | ペイロード長 |             ペイロード             | 終了コマンド |
 * -------------------------------------------------------------------------------
 * データタイプ：1 [Byte]
 * ペイロード長：1 [Byte]
 * ペイロード　：30[Byte](Max)
 * 終了コマンド：1 [Byte]
 */

/* ペイロードのデータタイプ一覧(引数に取るためenumで型とする) */
typedef enum
{
    CW      = 0x01, 
    DATA          ,
    COMMAND       ,
} data_type_t;


/* データ終了コマンド一覧 */
typedef enum
{
    DATA_END      = 0b00010000,
    DATA_CONTINUE,    
} data_end_command_t;






/******************************************************************************************
 *                                  ユーザーライブラリ関数                                  *
 *****************************************************************************************/

/*=====================================================
 * @brief
 *     Payloadに送信データを格納していく
 * @param
 *     p_data      :uint8_t, uint16_t, doubleの
 *                  配列へのポインタ
 *
 *     data_len    :p_dataは何データあるか
 *                  ただし以下のデータ数制限がある
 *                  uint8_tは15データ
 *                  uint16_tは10データ
 *                  doubleは6データ
 *
 *     byte_of_type:格納したいデータ型のバイト数
 *                  uint8_tなら1
 *                  uintt16_tなら2
 *                  doubleなら4
 * @return
 *     Flee space of payload:ペイロードの残り空き容量
 *     0xff:渡されたデータ全ては格納できない
 *          またはbyte_of_dataが適切な値でない
 * @note
 *     最大ペイロードサイズまで格納できる
 *===================================================*/
uint8_t sent_data_set(void *p_data, uint8_t data_len, uint8_t byte_of_type);


/*=====================================================
 * @brief
 *     パケットの送信準備完了を告げる
 *     同時にデータタイプと終了コマンドを渡す
 * @param
 *     
 * @return
 *     void:
 * @note
 *     最後にtx_packet_statusをTRUEとしてMasterからの
 *     送信命令を待つ
 *===================================================*/
void send_data_slave(data_type_t data_type, data_end_command_t data_end_command);


/*=====================================================
 * @brief
 *     受信パケットからデータを取り出す
 * @param
 *     p_data_type_buf:データタイプを取り出す用のポインタ
 *     p_data_buf     :ペイロードを取り出す用のポインタ
 *     P_data_len_buf :ペイロード長を取り出す用のポインタ
 * @return
 *     void:
 * @note
 *     実行後rx_packetは初期化される
 *===================================================*/
void extract_receive_packet(uint8_t *p_data_type_buf, uint8_t *p_data_buf, uint8_t *p_data_len_buf);


/*=====================================================
 * @brief
 *     送信用パケットを初期化する
 * @param
 *     void:
 * @return
 *     void:
 * @note
 *     note
 *===================================================*/
void tx_packet_clear(void);


/*=====================================================
 * @brief
 *     受信用パケットを初期化する
 * @param
 *     void:
 * @return
 *     void:
 * @note
 *     note
 *===================================================*/
void rx_packet_clear(void);



/******************************************************************************************
 *                               システム内ライブラリ関数                                 *
 *****************************************************************************************/

/*=====================================================
 * @brief
 *     パケットを送信する
 * @param
 *     void:
 * @return
 *     void:
 * @note
 *     note
 *===================================================*/
void send_packet(void);

/*=====================================================
 * @brief
 *     パケットを受信する
 * @param
 *     void:
 * @return
 *     void:
 * @note
 *     受信後rx_packetにデータを移す
 *     受信後rx_packet_statusをTRUEに変更する
 *===================================================*/
void receive_packet(void);


/*=====================================================
 * @brief
 *     tx_packet_statusの状態に応じて、Master側にフラグを
 *     渡す
 * @param
 *     void:
 * @return
 *     void:
 * @note
 *     note
 *===================================================*/
void check_flag(void);


#endif
